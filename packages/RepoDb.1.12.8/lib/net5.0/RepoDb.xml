<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RepoDb</name>
    </assembly>
    <members>
        <member name="T:RepoDb.Attributes.ClassHandlerAttribute">
            <summary>
            An attribute that is used to define a handler for the property transformation.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.ClassHandlerAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.ClassHandlerAttribute"/> class.
            </summary>
            <param name="handlerType">The type of the handler.</param>
        </member>
        <member name="P:RepoDb.Attributes.ClassHandlerAttribute.HandlerType">
            <summary>
            Gets the type of the handler that is being used.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.ClassHandlerAttribute.Validate(System.Type)">
            <summary>
            
            </summary>
            <param name="handlerType"></param>
        </member>
        <member name="T:RepoDb.Attributes.IdentityAttribute">
            <summary>
            An attribute that is used to define an identity property for the data entity object.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.MapAttribute">
            <summary>
            An attribute that is used to define a mapping of the class/property into its equivalent object/field name in the database.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.MapAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.MapAttribute"/> class.
            </summary>
            <param name="name">The name of the mapping that is equivalent to the database object/field.</param>
        </member>
        <member name="P:RepoDb.Attributes.MapAttribute.Name">
            <summary>
            Gets the name of the mapping that is equivalent to the database object/field.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.DbTypeAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.DbType"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.DbTypeAttribute.#ctor(System.Data.DbType)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.DbTypeAttribute"/> class.
            </summary>
            <param name="dbType">The equivalent <see cref="T:System.Data.DbType"/> value of the parameter.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.DbTypeAttribute.DbType">
            <summary>
            Gets the mapped <see cref="P:System.Data.Common.DbParameter.DbType"/> value of the parameter.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.DirectionAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.Direction"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.DirectionAttribute.#ctor(System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.DirectionAttribute"/> class.
            </summary>
            <param name="direction">The value that indicates the direction of the parameter.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.DirectionAttribute.Direction">
            <summary>
            Gets the mapped value that indicates whether the parameter is input, output, bidirectional 
            or a return value from the stored procedure.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.IsNullableAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.IsNullable"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.IsNullableAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.IsNullableAttribute"/> class.
            </summary>
            <param name="isNullable">The value that defines whether the parameter accepts a null value.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.IsNullableAttribute.IsNullable">
            <summary>
            Gets the mapped value that defines whether the parameter accepts a null value.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.NameAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.ParameterName"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.NameAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.NameAttribute"/> class.
            </summary>
            <param name="name">The name of the mapping that is equivalent to the database object/field.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.NameAttribute.Name">
            <summary>
            Gets the mapped name of the equivalent database object/field.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.NameAttribute.GetValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.PrecisionAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.Precision"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PrecisionAttribute.#ctor(System.Byte)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.PrecisionAttribute"/> class.
            </summary>
            <param name="precision">The precision of the parameter.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.PrecisionAttribute.Precision">
            <summary>
            Gets the mapped precision value of the parameter.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.PropertyValueAttribute">
            <summary>
            An attribute that is being used to set a value to any property of the <see cref="T:System.Data.IDbDataParameter"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.#ctor(System.Type,System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> class.
            </summary>
            <param name="parameterType">The type of the <see cref="T:System.Data.IDbDataParameter"/> object.</param>
            <param name="propertyName">The name to be set to the parameter.</param>
            <param name="value">The value to be set to the parameter.</param>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.#ctor(System.Type,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> class.
            </summary>
            <param name="parameterType">The type of the <see cref="T:System.Data.IDbDataParameter"/> object.</param>
            <param name="propertyName">The name to be set to the parameter.</param>
            <param name="value">The value to be set to the parameter.</param>
            <param name="includedInCompilation">
            The value that indicates whether this current attribute method invocation 
            will be included on the ahead-of-time (AOT) compilation.
            </param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.PropertyValueAttribute.ParameterType">
            <summary>
            Gets the represented <see cref="T:System.Type"/> of the <see cref="T:System.Data.IDbDataParameter"/> object.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.PropertyValueAttribute.PropertyName">
            <summary>
            Gets the name of the target property to be set.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.PropertyValueAttribute.Value">
            <summary>
            Gets the value that is used to set in the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.PropertyValueAttribute.IncludedInCompilation">
            <summary>
            Gets the value that indicates whether this current attribute method invocation 
            will be included on the ahead-of-time (AOT) compilation.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.PropertyValueAttribute.PropertyInfo">
            <summary>
            Gets the instance of the <see cref="P:RepoDb.Attributes.Parameter.PropertyValueAttribute.PropertyInfo"/> based on the target property name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.ToString">
            <summary>
            Gets the string representation of the current attribute object.
            </summary>
            <returns>The represented string.</returns>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.SetValue(System.Data.IDbDataParameter)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.GetValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.Validate(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="parameterType"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.ValidateParameterType(System.Type)">
            <summary>
            
            </summary>
            <param name="parameterType"></param>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.EnsurePropertyInfo(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="parameterType"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.Equals(RepoDb.Attributes.Parameter.PropertyValueAttribute)">
            <summary>
            Compares the <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.op_Equality(RepoDb.Attributes.Parameter.PropertyValueAttribute,RepoDb.Attributes.Parameter.PropertyValueAttribute)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.PropertyValueAttribute.op_Inequality(RepoDb.Attributes.Parameter.PropertyValueAttribute,RepoDb.Attributes.Parameter.PropertyValueAttribute)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.ScaleAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.Scale"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.ScaleAttribute.#ctor(System.Byte)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.ScaleAttribute"/> class.
            </summary>
            <param name="scale">The scale of the parameter.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.ScaleAttribute.Scale">
            <summary>
            Gets the mapped scale value of the parameter.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.Parameter.SizeAttribute">
            <summary>
            An attribute that is being used to define a value to the <see cref="P:System.Data.Common.DbParameter.Size"/>
            property via a class property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.Parameter.SizeAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.Parameter.SizeAttribute"/> class.
            </summary>
            <param name="size">The size of the parameter.</param>
        </member>
        <member name="P:RepoDb.Attributes.Parameter.SizeAttribute.Size">
            <summary>
            Gets the mapped size value of the parameter.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.PrimaryAttribute">
            <summary>
            An attribute that is used to define a primary property for the data entity object.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.PropertyHandlerAttribute">
            <summary>
            An attribute that is used to define a handler for the property transformation.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.PropertyHandlerAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.PropertyHandlerAttribute"/> class.
            </summary>
            <param name="handlerType">The type of the handler.</param>
        </member>
        <member name="P:RepoDb.Attributes.PropertyHandlerAttribute.HandlerType">
            <summary>
            Gets the type of the handler that is being used.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.PropertyHandlerAttribute.Validate(System.Type)">
            <summary>
            
            </summary>
            <param name="handlerType"></param>
        </member>
        <member name="T:RepoDb.Attributes.TypeMapAttribute">
            <summary>
            An attribute that is used to define a mapping between the .NET CLR <see cref="T:System.Type"/> and the <see cref="T:System.Data.DbType"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.TypeMapAttribute.#ctor(System.Data.DbType)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Attributes.TypeMapAttribute"/> class.
            </summary>
            <param name="dbType">The equivalent <see cref="T:System.Data.DbType"/> value of the parameter.</param>
        </member>
        <member name="T:RepoDb.BaseRepository`2">
            <summary>
            A base class for all entity-based repositories. It is designed to only allow the given operations work with single data entity object.
            </summary>
            <typeparam name="TEntity">The type of data entity object to be mapped on this repository.</typeparam>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.Common.DbConnection"/> object.</typeparam>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operations by this repository.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.ICache)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> class.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Enumerations.ConnectionPersistency,RepoDb.Interfaces.ICache,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BaseRepository`2"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="P:RepoDb.BaseRepository`2.DbRepository">
            <summary>
            Gets the underlying repository used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.ConnectionString">
            <summary>
            Gets the connection used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.CommandTimeout">
            <summary>
            Gets the command timeout value in seconds that is being used by this repository on every operation.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.Cache">
            <summary>
            Gets the cache object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.CacheItemExpiration">
            <summary>
            Gets the expiration in minutes of the cache item.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.Trace">
            <summary>
            Gets the trace object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.ConnectionPersistency">
            <summary>
            Gets the database connection persistency used by this repository. The default value is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CreateConnection">
            <summary>
            Creates a new instance of the database connection object. If the value of <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property
            is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CreateConnection(System.Boolean)">
            <summary>
            Creates a new instance of the database connection. If the value <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property
            is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <param name="force">Set to true to forcely create a new instance of <see cref="T:System.Data.Common.DbConnection"/> object regardless of the persistency.</param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Dispose">
            <summary>
            Dispose the current repository instance. It is not necessary to call this method if the value of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/>
            property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>. This method only manages the connection persistency for the repositories where the value
            of the <see cref="P:RepoDb.BaseRepository`2.ConnectionPersistency"/> property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and 
            converts the result back to an enumerable list of data entity object.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>
            An enumerable list of data entity objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteNonQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteNonQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/>
            and returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalar(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.BaseRepository`2.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalarAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.BaseRepository`2.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An object that holds the first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalar``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.BaseRepository`2.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalarAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.BaseRepository`2.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Average``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAll(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAllAsync(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.AverageAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAll(System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAllAsync(System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(`0,System.String,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing row from the table.
            </summary>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete``1(``0,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(`0,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing row from the table in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync``1(``0,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAll(System.Collections.Generic.IEnumerable{`0},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAll(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAll(System.String,System.Data.IDbTransaction)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAllAsync(System.Collections.Generic.IEnumerable{`0},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAllAsync(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAllAsync(System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Exists(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Exists(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Exists(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Exists(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExistsAsync(System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExistsAsync``1(``0,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExistsAsync(RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExistsAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExistsAsync(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Insert(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Insert``1(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAsync``1(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAll(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAllAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAll(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAllAsync(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MaxAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge``1(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge``1(`0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge``1(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync``1(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync``1(`0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync``1(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAll(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAll(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <param name="entities">The list of entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAll(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <param name="entities">The list of entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAllAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAllAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="entities">The list of entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAllAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="entities">The list of entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAll(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAllAsync(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MinAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAll(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the table.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAll(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the table.
            </summary>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAllAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAllAsync(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Sum``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAll(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAll``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAllAsync(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.SumAllAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Truncate">
            <summary>
            Truncates a table from the database.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Truncate(System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.TruncateAsync">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.TruncateAsync(System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.TruncateAsync(System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update``1(`0,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync``1(`0,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAll(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAll(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <param name="entities">The list of entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAll(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <param name="entities">The list of entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAllAsync(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAllAsync(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <param name="entities">The list of entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAllAsync(System.Collections.Generic.IEnumerable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <param name="entities">The list of entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="T:RepoDb.BulkInsertMapItem">
            <summary>
            A class that is being used to define a mapping for the bulk insert operation.
            </summary>
        </member>
        <member name="M:RepoDb.BulkInsertMapItem.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.BulkInsertMapItem"/> object.
            </summary>
            <param name="sourceColumn">The name of the source column or property. This respects the mapping of the properties if the source type is an entity model.</param>
            <param name="destinationColumn">The name of the destination column in the database.</param>
        </member>
        <member name="P:RepoDb.BulkInsertMapItem.SourceColumn">
            <summary>
            Gets the name of the source column.
            </summary>
        </member>
        <member name="P:RepoDb.BulkInsertMapItem.DestinationColumn">
            <summary>
            Gets the name of the destination column.
            </summary>
        </member>
        <member name="M:RepoDb.BulkInsertMapItem.ToString">
            <summary>
            Returns the string representation of the current object.
            </summary>
            <returns>The string representation of the current object.</returns>
        </member>
        <member name="T:RepoDb.CacheItem`1">
            <summary>
            A class that is being used to cache the resultsets of the query operations. This is the default class used by the <see cref="T:RepoDb.MemoryCache"/> object.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:RepoDb.CacheItem`1.#ctor(System.String,`0)">
            <summary>
            Creates a new instance of <see cref="!:CacheItem"/> object.
            </summary>
            <param name="key">The key of the cache.</param>
            <param name="value">The value of the cache.</param>
        </member>
        <member name="M:RepoDb.CacheItem`1.#ctor(System.String,`0,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="!:CacheItem"/> object.
            </summary>
            <param name="key">The key of the cache item.</param>
            <param name="value">The value of the cache item.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.CacheItem`1.UpdateFrom(RepoDb.CacheItem{`0})">
            <summary>
            Updates the value of the current item based from the source item.
            </summary>
            <param name="item">The source item.</param>
        </member>
        <member name="P:RepoDb.CacheItem`1.Key">
            <summary>
            Gets the key of the cache.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem`1.Value">
            <summary>
            Gets the value of the cache.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem`1.CacheItemExpiration">
            <summary>
            Gets the expiration in minutes of the cache item.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem`1.CreatedDate">
            <summary>
            Gets the created timestamp of this cache item. By default, it is equals to the time
            of when this cache item object has been instantiated.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem`1.Expiration">
            <summary>
            Gets or sets the expiration date of this cache item.
            </summary>
        </member>
        <member name="M:RepoDb.CacheItem`1.IsExpired">
            <summary>
            Identifies whether this cache item is expired.
            </summary>
            <returns>A boolean value that indicate whether this cache item is expired.</returns>
        </member>
        <member name="T:RepoDb.ClassHandlerCache">
            <summary>
            A class that is being used to cache the mappings between a class property and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.ClassHandlerCache.Get``2">
            <summary>
            Gets the cached <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object that is being mapped to a specific .NET CLR type.
            </summary>
            <typeparam name="TType">The .NET CLR type.</typeparam>
            <typeparam name="TClassHandler">The type of the handler.</typeparam>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object of the .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerCache.Get``1(System.Type)">
            <summary>
            Gets the cached <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object that is being mapped to a specific .NET CLR type.
            </summary>
            <typeparam name="TClassHandler">The type of the handler.</typeparam>
            <param name="type">The target .NET CLR type.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object of the .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerCache.Flush">
            <summary>
            Flushes all the existing cached <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.ClassHandlerCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerCache.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerCache.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.ClassMappedNameCache">
            <summary>
            A class that is being used to cache the database object name mappings of the data entity type.
            </summary>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.Get``1">
            <summary>
            Gets the cached database object name of the data entity type.
            </summary>
            <typeparam name="T">The type of the target type.</typeparam>
            <returns>The cached mapped name of the data entity.</returns>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.Get(System.Type)">
            <summary>
            Gets the cached database object name of the data entity type.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The cached mapped name of the data entity.</returns>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.Flush">
            <summary>
            Flushes all the existing cached class mapped names.
            </summary>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.ClassMappedNameCache.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.CommandTextCache">
            <summary>
            A class that is being used to cache the already-built command texts.
            </summary>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetAverageText(RepoDb.Requests.AverageRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetAverageAllText(RepoDb.Requests.AverageAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetBatchQueryText(RepoDb.Requests.BatchQueryRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetBatchQueryTextAsync(RepoDb.Requests.BatchQueryRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetBatchQueryTextInternal(RepoDb.Requests.BatchQueryRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetCountText(RepoDb.Requests.CountRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetCountAllText(RepoDb.Requests.CountAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetDeleteText(RepoDb.Requests.DeleteRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetDeleteAllText(RepoDb.Requests.DeleteAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetExistsText(RepoDb.Requests.ExistsRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertText(RepoDb.Requests.InsertRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertTextAsync(RepoDb.Requests.InsertRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertTextInternal(RepoDb.Requests.InsertRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertAllText(RepoDb.Requests.InsertAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertAllTextAsync(RepoDb.Requests.InsertAllRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetInsertAllTextInternal(RepoDb.Requests.InsertAllRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMaxText(RepoDb.Requests.MaxRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMaxAllText(RepoDb.Requests.MaxAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeText(RepoDb.Requests.MergeRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeTextAsync(RepoDb.Requests.MergeRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeTextInternal(RepoDb.Requests.MergeRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeAllText(RepoDb.Requests.MergeAllRequest)">
            <summary>
            Gets the cached command text for the 'MergeAll' operation.
            </summary>
            <param name="request">The request object.</param>
            <returns>The cached command text.</returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeAllTextAsync(RepoDb.Requests.MergeAllRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMergeAllTextInternal(RepoDb.Requests.MergeAllRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMinText(RepoDb.Requests.MinRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetMinAllText(RepoDb.Requests.MinAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryText(RepoDb.Requests.QueryRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryTextAsync(RepoDb.Requests.QueryRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryTextInternal(RepoDb.Requests.QueryRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryAllText(RepoDb.Requests.QueryAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryAllTextAsync(RepoDb.Requests.QueryAllRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryAllTextInternal(RepoDb.Requests.QueryAllRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryMultipleText``1(RepoDb.Requests.QueryMultipleRequest)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryMultipleTextAsync``1(RepoDb.Requests.QueryMultipleRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetQueryMultipleTextInternal``1(RepoDb.Requests.QueryMultipleRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetSumText(RepoDb.Requests.SumRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetSumAllText(RepoDb.Requests.SumAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetTruncateText(RepoDb.Requests.TruncateRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateText(RepoDb.Requests.UpdateRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateTextAsync(RepoDb.Requests.UpdateRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateTextInternal(RepoDb.Requests.UpdateRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateAllText(RepoDb.Requests.UpdateAllRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateAllTextAsync(RepoDb.Requests.UpdateAllRequest,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetUpdateAllTextInternal(RepoDb.Requests.UpdateAllRequest,System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="request"></param>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.Flush">
            <summary>
            Flushes all the existing cached command texts.
            </summary>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetActualFields(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="fields"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetActualFieldsAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="fields"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetActualFieldsInternal(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="fields"></param>
             <param name="dbFields"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetPrimaryField(RepoDb.Requests.BaseRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.GetIdentityField(RepoDb.Requests.BaseRequest)">
             <summary>
            
             </summary>
             <param name="request"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.CommandTextCache.EnsureStatementBuilder(System.Data.IDbConnection,RepoDb.Interfaces.IStatementBuilder)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="builder"></param>
             <returns></returns>
        </member>
        <member name="T:RepoDb.DbFieldCache">
            <summary>
            A class that is being used to cache the list of <see cref="T:RepoDb.DbField"/> objects of the table.
            </summary>
        </member>
        <member name="M:RepoDb.DbFieldCache.Flush">
            <summary>
            Flushes all the existing cached enumerable of <see cref="T:RepoDb.DbField"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.DbFieldCache.ValidateDbFields(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            Throws an exception of any of the validation needed is failing.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="dbFields">The list of <see cref="T:RepoDb.DbField"/> objects to be validated.</param>
        </member>
        <member name="M:RepoDb.DbFieldCache.Get(System.Data.IDbConnection,System.String,System.Data.IDbTransaction)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.DbField"/> objects of the table based on the data entity mapped name.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.Get(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.DbField"/> objects of the table based on the data entity mapped name.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="enableValidation">Enables the validation after retrieving the database fields.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.GetInternal``1(``0,System.String,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Gets the cached field definitions of the entity.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="connection">The instance of the <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="enableValidation">Enables the validation after retrieving the database fields.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.GetAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.DbField"/> objects of the table based on the data entity mapped name in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.GetAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.DbField"/> objects of the table based on the data entity mapped name in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="enableValidation">Enables the validation after retrieving the database fields.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="M:RepoDb.DbFieldCache.GetAsyncInternal``1(``0,System.String,System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the cached field definitions of the entity in an asynchronous way.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="connection">The instance of the <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="enableValidation">Enables the validation after retrieving the database fields.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The cached field definitions of the entity.</returns>
        </member>
        <member name="T:RepoDb.FieldCache">
            <summary>
            A class that is being used to cache the list of <see cref="T:RepoDb.Field"/> objects of the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.FieldCache.Get``1">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.Field"/> objects of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The cached list <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.FieldCache.Get(System.Type)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.Field"/> objects of the data entity.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The cached list <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.FieldCache.Flush">
            <summary>
            Flushes all the existing cached enumerable of <see cref="T:RepoDb.Field"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.FieldCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="T:RepoDb.IdentityCache">
            <summary>
            A class that is being used to cache the identity property of the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.IdentityCache.Get``1">
            <summary>
            Gets the cached identity property of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The cached identity property.</returns>
        </member>
        <member name="M:RepoDb.IdentityCache.Get(System.Type)">
            <summary>
            Gets the cached identity property of the data entity.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The cached identity property.</returns>
        </member>
        <member name="M:RepoDb.IdentityCache.Flush">
            <summary>
            Flushes all the existing cached identity <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.IdentityCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="T:RepoDb.PrimaryCache">
            <summary>
            A class that is being used to cache the primary property of the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.PrimaryCache.Get``1">
            <summary>
            Gets the cached primary property of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The cached primary property.</returns>
        </member>
        <member name="M:RepoDb.PrimaryCache.Get(System.Type)">
            <summary>
            Gets the cached primary property of the data entity.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The cached primary property.</returns>
        </member>
        <member name="M:RepoDb.PrimaryCache.Flush">
            <summary>
            Flushes all the existing cached primary <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.PrimaryCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="T:RepoDb.PropertyCache">
            <summary>
            A class that is being used to cache the properties of the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyCache.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the cached <see cref="T:RepoDb.ClassProperty"/> object of the data entity (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The instance of cached <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get``1(System.String,System.Boolean)">
            <summary>
            Gets the cached <see cref="T:RepoDb.ClassProperty"/> object of the data entity (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The instance of cached <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get(System.Type,System.String,System.Boolean)">
            <summary>
            Gets the cached <see cref="T:RepoDb.ClassProperty"/> object of the data entity (via property name).
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The instance of cached <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get``1(RepoDb.Field,System.Boolean)">
            <summary>
            Gets the cached <see cref="T:RepoDb.ClassProperty"/> object of the data entity (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The instance of cached <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get(System.Type,RepoDb.Field,System.Boolean)">
            <summary>
            Gets the cached <see cref="T:RepoDb.ClassProperty"/> object of the data entity (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The instance of cached <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get(System.Type,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the cached <see cref="T:RepoDb.ClassProperty"/> object of the data entity (via <see cref="T:System.Reflection.PropertyInfo"/> object).
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The instance of cached <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get``1">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.ClassProperty"/> objects of the data entity.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The cached list <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Get(System.Type)">
            <summary>
            Gets the cached list of <see cref="T:RepoDb.ClassProperty"/> objects of the data entity.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The cached list <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.Flush">
            <summary>
            Flushes all the existing cached enumerable of <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyCache.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.PropertyHandlerCache">
            <summary>
            A class that is being used to cache the mappings between a class property and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``2">
            <summary>
            Type Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped to a specific .NET CLR type.
            </summary>
            <typeparam name="TType">The .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``1(System.Type)">
            <summary>
            Type Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped to a specific .NET CLR type.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="type">The target .NET CLR type.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped on a specific class property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``2(System.String)">
            <summary>
            Property Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped on a specific class property (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``2(RepoDb.Field)">
            <summary>
            Property Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped on a specific class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``2(System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped on a specific <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Get``1(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Gets the cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object that is being mapped on a specific <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.Flush">
            <summary>
            Flushes all the existing cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerCache.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.PropertyMappedNameCache">
            <summary>
            A class that is being used to cache the mapped-name of the property.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the cached column name mappings of the property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get``1(System.String)">
            <summary>
            Gets the cached column name mappings of the property (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get``1(RepoDb.Field)">
            <summary>
            Gets the cached column name mappings of the property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the cached column name mappings of the property.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyInfo">The target property.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get(System.Reflection.PropertyInfo)">
            <summary>
            Gets the cached column name mappings of the property.
            </summary>
            <param name="propertyInfo">The target property.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Get(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the cached column name mappings of the property.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The target property.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.Flush">
            <summary>
            Flushes all the existing cached property mapped names.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyMappedNameCache.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.PropertyValueAttributeCache">
            <summary>
            A class that is being used to cache the <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> of the class property.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeCache.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Gets the list of cached <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects that is currently mapped to the class property (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeCache.Get``1(System.String,System.Boolean)">
            <summary>
            Gets the list of cached <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects that is currently mapped to the class property (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeCache.Get``1(RepoDb.Field,System.Boolean)">
            <summary>
            Gets the list of cached <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects that is currently mapped to the class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeCache.Get(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the list of cached <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects that is currently mapped to the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeCache.Get(System.Type,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the list of cached <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects that is currently mapped to the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeCache.Flush">
            <summary>
            Flushes all the existing cached objects.
            </summary>
        </member>
        <member name="T:RepoDb.TypeMapCache">
            <summary>
            A class that is being used to cache the mappings between the <see cref="T:System.Data.DbType"/> objects and .NET CLR type or class properties.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get``1">
            <summary>
            Type Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific .NET CLR type.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get(System.Type)">
            <summary>
            Type Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific .NET CLR type.
            </summary>
            <param name="type">The target .NET CLR type.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific class property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get``1(System.String)">
            <summary>
            Property Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific class property (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get``1(RepoDb.Field)">
            <summary>
            Property Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get``1(System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Get(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Gets the cached <see cref="T:System.Data.DbType"/> object that is being mapped on a specific <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.Flush">
            <summary>
            Flushes all the existing cached property mapped names.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapCache.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.TypeMapCache.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.CancellableTraceLog">
            <summary>
            A cancellable tracing log object that is used in the tracing operations. This class holds the cancellable operations for all tracing logs.
            </summary>
        </member>
        <member name="M:RepoDb.CancellableTraceLog.#ctor(System.Guid,System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CancellableTraceLog"/> object.
            </summary>
            <param name="sessionId">The session identifier for the current trace object.</param>
            <param name="statement">A SQL statement that was used in the trace operation.</param>
            <param name="parameter">An object that was used as a parameter in the operation.</param>
            <param name="result">A result of the operation.</param>
        </member>
        <member name="P:RepoDb.CancellableTraceLog.IsCancelled">
            <summary>
            Gets a value whether the operation is cancelled.
            </summary>
        </member>
        <member name="P:RepoDb.CancellableTraceLog.IsThrowException">
            <summary>
            Gets a value whether an exception will be thrown after the <see cref="M:RepoDb.CancellableTraceLog.Cancel(System.Boolean)"/> method was called.
            </summary>
        </member>
        <member name="M:RepoDb.CancellableTraceLog.Cancel(System.Boolean)">
            <summary>
            Cancel the current executing repository operation.
            </summary>
            <param name="throwException">If true, an exception will be thrown.</param>
        </member>
        <member name="T:RepoDb.ClassProperty">
            <summary>
            A class that wraps the <see cref="P:RepoDb.ClassProperty.PropertyInfo"/> object. This class is used to extract the information from the <see cref="T:System.Reflection.PropertyInfo"/> object in a fast and efficient manner.
            </summary>
        </member>
        <member name="M:RepoDb.ClassProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <param name="property">The wrapped property.</param>
        </member>
        <member name="M:RepoDb.ClassProperty.#ctor(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <param name="parentType">The declaring type (avoiding the interface collision).</param>
            <param name="property">The wrapped property.</param>
        </member>
        <member name="F:RepoDb.ClassProperty.declaringType">
            <summary>
            Gets the original declaring type (avoiding the interface collision).
            </summary>
        </member>
        <member name="P:RepoDb.ClassProperty.PropertyInfo">
            <summary>
            Gets the wrapped property of this object.
            </summary>
        </member>
        <member name="M:RepoDb.ClassProperty.ToString">
            <summary>
            Returns the string that represent the current <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <returns>The unquoted name.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetDeclaringType">
            <summary>
            Gets the declaring parent type of the current property info. If the class inherits an interface, then this will return 
            the derived class type instead (if there is), otherwise the <see cref="!:PropertyInfo.DeclaringType"/> property.
            </summary>
            <returns>The declaring type.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.AsField">
            <summary>
            Convert the <see cref="T:RepoDb.ClassProperty"/> into a <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <returns>An instance of <see cref="T:System.String"/> object.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetPrimaryAttribute">
            <summary>
            Gets the <see cref="T:RepoDb.Attributes.PrimaryAttribute"/> if present.
            </summary>
            <returns>The instance of <see cref="T:RepoDb.Attributes.PrimaryAttribute"/>.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetIdentityAttribute">
            <summary>
            Gets the <see cref="T:RepoDb.Attributes.IdentityAttribute"/> if present.
            </summary>
            <returns>The instance of <see cref="T:RepoDb.Attributes.IdentityAttribute"/>.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetTypeMapAttribute">
            <summary>
            Gets the <see cref="T:RepoDb.Attributes.TypeMapAttribute"/> if present.
            </summary>
            <returns>The instance of <see cref="T:RepoDb.Attributes.TypeMapAttribute"/>.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetDbTypeAttribute">
            <summary>
            Gets the <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> if present.
            </summary>
            <returns>The instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/>.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetPropertyHandlerAttribute">
            <summary>
            Gets the <see cref="T:RepoDb.Attributes.PropertyHandlerAttribute"/> if present.
            </summary>
            <returns>The instance of <see cref="T:RepoDb.Attributes.PropertyHandlerAttribute"/>.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.IsPrimary">
            <summary>
            Gets a value whether the current property is a primary property.
            </summary>
            <returns>True if the current property is a primary.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.IsIdentity">
            <summary>
            Gets a value whether the current property is an identity or not.
            </summary>
            <returns>True if the current property is an identity.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetDbType">
            <summary>
            Gets the mapped <see cref="T:System.Data.DbType"/> for the current property.
            </summary>
            <returns>The mapped <see cref="T:System.Data.DbType"/> value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetPropertyHandler">
            <summary>
            Gets the mapped property handler object for the current property.
            </summary>
            <returns>The mapped property handler object.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetPropertyHandler``1">
            <summary>
            Gets the mapped property handler object for the current property.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <returns>The mapped property handler object.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetMappedName">
            <summary>
            Gets the mapped-name for the current property.
            </summary>
            <returns>The mapped-name value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetPropertyValueAttributes">
            <summary>
            Gets the list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object for the current property.
            </summary>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.GetHashCode">
            <summary>
            Returns the hashcode of the <see cref="P:RepoDb.ClassProperty.PropertyInfo"/> object of this instance.
            </summary>
            <returns>The hash code value.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.Equals(System.Object)">
            <summary>
            Compare the current instance to the other object instance.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns>True if the two instance is the same.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.Equals(RepoDb.ClassProperty)">
            <summary>
            Compare the current instance to the other object instance.
            </summary>
            <param name="other">The object to be compared.</param>
            <returns>True if the two instance is the same.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.op_Equality(RepoDb.ClassProperty,RepoDb.ClassProperty)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.ClassProperty.op_Inequality(RepoDb.ClassProperty,RepoDb.ClassProperty)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.ClassProperty"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.CommandArrayParameter">
            <summary>
            A class that is being used to handle the array value of the parameter.
            </summary>
        </member>
        <member name="M:RepoDb.CommandArrayParameter.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CommandArrayParameter"/> class.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="values">The values of the parameter.</param>
        </member>
        <member name="P:RepoDb.CommandArrayParameter.ParameterName">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.CommandArrayParameter.Values">
            <summary>
            Gets the values of the parameter.
            </summary>
        </member>
        <member name="T:RepoDb.CommandParameter">
            <summary>
            A class that is being used to hold the definition of the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="M:RepoDb.CommandParameter.#ctor(RepoDb.Field,System.Object,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.CommandParameter"/> class.
            </summary>
            <param name="field">The <see cref="P:RepoDb.CommandParameter.Field"/> object that is connected.</param>
            <param name="value">The value of the parameter.</param>
            <param name="mappedToType">The parent type where this parameter is mapped.</param>
        </member>
        <member name="P:RepoDb.CommandParameter.Field">
            <summary>
            The field that is connected.
            </summary>
        </member>
        <member name="P:RepoDb.CommandParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.CommandParameter.MappedToType">
            <summary>
            The parent type where this parameter is mapped.
            </summary>
        </member>
        <member name="T:RepoDb.Constant">
            <summary>
            A class that holds the constant values for the library.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.DefaultBatchOperationSize">
            <summary>
            The default value of the batch operation size.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.DefaultCacheItemExpirationInMinutes">
            <summary>
            The default value of the cache expiration in minutes.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.MaxParametersCount">
            <summary>
            The maximum parameters of ADO.Net when executing a command.
            </summary>
        </member>
        <member name="T:RepoDb.CharConstant">
            <summary>
            A class that contains all the constant chars.
            </summary>
        </member>
        <member name="T:RepoDb.StringConstant">
            <summary>
            A class that contains all the constant strings.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Cachers.InsertAllExecutionContextCache">
            <summary>
            A class that is being used to cache the execution context of the MergeAll operation.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.InsertAllExecutionContextCache.Flush">
            <summary>
            Flushes all the cached execution context.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.InsertAllExecutionContextCache.Add``1(System.String,RepoDb.Contexts.Execution.InsertAllExecutionContext{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <param name="context"></param>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.InsertAllExecutionContextCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Cachers.InsertExecutionContextCache">
            <summary>
            A class that is being used to cache the execution context of the Insert operation.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.InsertExecutionContextCache.Flush">
            <summary>
            Flushes all the cached execution context.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.InsertExecutionContextCache.Add``1(System.String,RepoDb.Contexts.Execution.InsertExecutionContext{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <param name="context"></param>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.InsertExecutionContextCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Cachers.MergeAllExecutionContextCache">
            <summary>
            A class that is being used to cache the execution context of the MergeAll operation.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.MergeAllExecutionContextCache.Flush">
            <summary>
            Flushes all the cached execution context.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.MergeAllExecutionContextCache.Add``1(System.String,RepoDb.Contexts.Execution.MergeAllExecutionContext{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <param name="context"></param>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.MergeAllExecutionContextCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Cachers.MergeExecutionContextCache">
            <summary>
            A class that is being used to cache the execution context of the Merge operation.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.MergeExecutionContextCache.Flush">
            <summary>
            Flushes all the cached execution context.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.MergeExecutionContextCache.Add``1(System.String,RepoDb.Contexts.Execution.MergeExecutionContext{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <param name="context"></param>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.MergeExecutionContextCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Cachers.UpdateAllExecutionContextCache">
            <summary>
            A class that is being used to cache the execution context of the UpdateAll operation.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.UpdateAllExecutionContextCache.Flush">
            <summary>
            Flushes all the cached execution context.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.UpdateAllExecutionContextCache.Add``1(System.String,RepoDb.Contexts.Execution.UpdateAllExecutionContext{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <param name="context"></param>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.UpdateAllExecutionContextCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Cachers.UpdateExecutionContextCache">
            <summary>
            A class that is being used to cache the execution context of the Update operation.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.UpdateExecutionContextCache.Flush">
            <summary>
            Flushes all the cached execution context.
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.UpdateExecutionContextCache.Add``1(System.String,RepoDb.Contexts.Execution.UpdateExecutionContext{``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <param name="context"></param>
        </member>
        <member name="M:RepoDb.Contexts.Cachers.UpdateExecutionContextCache.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Execution.InsertAllExecutionContext`1">
            <summary>
            An execution context class used by insert-all operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.CommandText">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.BatchSize">
            <summary>
            The batch size of the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.SingleDataEntityParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.MultipleDataEntitiesParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.IdentityPropertySetterFunc">
            <summary>
            The compiled expression that is used to set the property value.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertAllExecutionContext`1.IdentityPropertySettersFunc">
            <summary>
            The list of compiled expression that is used to set the identity value.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.InsertExecutionContext`1">
            <summary>
            An execution context class used by insert operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertExecutionContext`1.CommandText">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertExecutionContext`1.ParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.InsertExecutionContext`1.IdentityPropertySetterFunc">
            <summary>
            The compiled expression that is used to set the property value.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.MergeAllExecutionContext`1">
            <summary>
            An execution context class used by merge operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeAllExecutionContext`1.CommandText">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeAllExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeAllExecutionContext`1.BatchSize">
            <summary>
            The batch size of the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeAllExecutionContext`1.SingleDataEntityParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeAllExecutionContext`1.MultipleDataEntitiesParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeAllExecutionContext`1.IdentityPropertySetterFunc">
            <summary>
            The compiled expression that is used to set the property value.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.MergeExecutionContext`1">
            <summary>
            An execution context class used by merge operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeExecutionContext`1.CommandText">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeExecutionContext`1.ParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.MergeExecutionContext`1.IdentityPropertySetterFunc">
            <summary>
            The compiled expression that is used to set the property value.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.UpdateAllExecutionContext`1">
            <summary>
            An execution context class used by update operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateAllExecutionContext`1.CommandText">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateAllExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateAllExecutionContext`1.SingleDataEntityParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateAllExecutionContext`1.MultipleDataEntitiesParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Execution.UpdateExecutionContext`1">
            <summary>
            An execution context class used by update operation.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateExecutionContext`1.CommandText">
            <summary>
            The execution command text.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateExecutionContext`1.InputFields">
            <summary>
            The list of the input <see cref="T:RepoDb.DbField"/> objects to be included in the execution.
            </summary>
        </member>
        <member name="P:RepoDb.Contexts.Execution.UpdateExecutionContext`1.ParametersSetterFunc">
            <summary>
            The compiled function that is used to set the <see cref="T:System.Data.Common.DbCommand"/> parameters.
            </summary>
        </member>
        <member name="T:RepoDb.Contexts.Providers.InsertAllExecutionContextProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertAllExecutionContextProvider.GetKey``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="batchSize"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertAllExecutionContextProvider.Create``1(System.Data.IDbConnection,System.String,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertAllExecutionContextProvider.CreateAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertAllExecutionContextProvider.CreateInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="dbFields"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Providers.InsertExecutionContextProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertExecutionContextProvider.GetKey``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertExecutionContextProvider.Create``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertExecutionContextProvider.CreateAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.InsertExecutionContextProvider.CreateInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="dbFields"></param>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Providers.MergeAllExecutionContextProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeAllExecutionContextProvider.GetKey``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="fields"></param>
            <param name="batchSize"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeAllExecutionContextProvider.Create``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="entities"></param>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeAllExecutionContextProvider.CreateAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="entities"></param>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeAllExecutionContextProvider.CreateInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="entities"></param>
            <param name="dbFields"></param>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Providers.MergeExecutionContextProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeExecutionContextProvider.GetKey``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeExecutionContextProvider.Create``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeExecutionContextProvider.CreateAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.MergeExecutionContextProvider.CreateInternal``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="dbFields"></param>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Providers.UpdateAllExecutionContextProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateAllExecutionContextProvider.GetKey``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="tableName"></param>
            <param name="qualifiers"></param>
            <param name="fields"></param>
            <param name="batchSize"></param>
            <param name="hints"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateAllExecutionContextProvider.Create``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="entities"></param>
            <param name="qualifiers"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateAllExecutionContextProvider.CreateAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="entities"></param>
            <param name="qualifiers"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateAllExecutionContextProvider.CreateInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="entities"></param>
            <param name="dbFields"></param>
            <param name="qualifiers"></param>
            <param name="batchSize"></param>
            <param name="fields"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Contexts.Providers.UpdateExecutionContextProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateExecutionContextProvider.GetKey``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.QueryGroup)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="tableName"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateExecutionContextProvider.Create``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateExecutionContextProvider.CreateAsync``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="where"></param>
            <param name="fields"></param>
            <param name="hints"></param>
            <param name="transaction"></param>
            <param name="statementBuilder"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Contexts.Providers.UpdateExecutionContextProvider.CreateInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connection"></param>
            <param name="tableName"></param>
            <param name="dbFields"></param>
            <param name="fields"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Converter">
            <summary>
            A generalized converter class.
            </summary>
        </member>
        <member name="P:RepoDb.Converter.ConversionType">
            <summary>
            Gets or sets the conversion type when converting the instance of <see cref="T:System.Data.Common.DbDataReader"/> object into its destination .NET CLR Types.
            The default value is <see cref="F:RepoDb.Enumerations.ConversionType.Default"/>.
            </summary>
        </member>
        <member name="P:RepoDb.Converter.EnumDefaultDatabaseType">
            <summary>
            Gets or sets the default equivalent database type (of type <see cref="T:System.Data.DbType"/>) of an enumeration if it is being used as a parameter to the 
            execution of any non-entity-based operations.
            </summary>
        </member>
        <member name="M:RepoDb.Converter.DbNullToNull(System.Object)">
            <summary>
            Converts a value to null if the value is equals to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="value">The value to be checked for <see cref="F:System.DBNull.Value"/>.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:RepoDb.Converter.ToType``1(System.Object)">
            <summary>
            Converts a value to a target type if the value is equals to null or <see cref="F:System.DBNull.Value"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:RepoDb.DataEntityDataReader`1">
            <summary>
            A data reader object that is used to manipulate the enumerable list of data entity objects.
            </summary>
            <typeparam name="TEntity">The type of the data entity</typeparam>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Data.IDbConnection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
            <param name="connection">The actual <see cref="T:System.Data.IDbConnection"/> object used.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
            <param name="connection">The actual <see cref="T:System.Data.IDbConnection"/> object used.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
            <param name="connection">The actual <see cref="T:System.Data.IDbConnection"/> object used.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0},System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of the data entity object to be used for manipulation.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="connection">The actual <see cref="T:System.Data.IDbConnection"/> object used.</param>
            <param name="hasOrderingColumn">The value that signifies whether the ordering column will be defined.</param>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of data entity objects.
            </summary>
            <returns>The enumerator object of the current collection.</returns>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Connection">
            <summary>
            Gets the instance of <see cref="T:System.Data.IDbConnection"/> in used.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Transaction">
            <summary>
            Gets the instance of <see cref="T:System.Data.IDbTransaction"/> in used.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.IsInitialized">
            <summary>
            Gets a value that indicates whether the current instance of <see cref="T:RepoDb.DataEntityDataReader`1"/> object has already been initialized.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Enumerator">
            <summary>
            Gets the instance of enumerator that iterates through a collection of data entity objects.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Entities">
            <summary>
            Gets the list of data entity objects.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Position">
            <summary>
            Gets the current position of the enumerator.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.EntityType">
            <summary>
            Gets the type of the entities.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Properties">
            <summary>
            Gets the properties of data entity object.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Fields">
            <summary>
            Gets the fields of the dictionary.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.HasOrderingColumn">
            <summary>
            Gets a value that indicates whether the ordering column is defined.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Item(System.Int32)">
            <summary>
            Gets the current value from the index.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The value from the column index.</returns>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Item(System.String)">
            <summary>
            Gets the current value from the name.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value from the column name.</returns>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.Depth">
            <summary>
            Gets the depth value.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.IsClosed">
            <summary>
            Gets the value that indicates whether the current reader is closed.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.IsDisposed">
            <summary>
            Gets the value that indicates whether the current reader is already disposed.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.RecordsAffected">
            <summary>
            Gets the number of rows affected by the iteration.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.FieldCount">
            <summary>
            Gets the number of properties the data entity object has.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityDataReader`1.HasRows">
            <summary>
            Gets a value that signify whether the current data reader has data entities.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Close">
            <summary>
            Closes the current data reader.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Dispose">
            <summary>
            Disposes the current data reader.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Reset">
            <summary>
            Resets the pointer of the position to the beginning.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetByte(System.Int32)">
            <summary>
            Gets the byte value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            GetBytes
            </summary>
            <param name="i">Int</param>
            <param name="fieldOffset">Int64</param>
            <param name="buffer">byte[]</param>
            <param name="bufferoffset">Int</param>
            <param name="length">Int</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetChar(System.Int32)">
            <summary>
            Gets the char value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            GetChars
            </summary>
            <param name="i">Int</param>
            <param name="fieldoffset">Int64</param>
            <param name="buffer">char[]</param>
            <param name="bufferoffset">Int</param>
            <param name="length">Int</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetData(System.Int32)">
            <summary>
            GetData
            </summary>
            <param name="i">Int</param>
            <returns>Int</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the property data type from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The property type name from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDateTime(System.Int32)">
            <summary>
            Gets the date time value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetDouble(System.Int32)">
            <summary>
            Gets the double value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the property from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The property type from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetFloat(System.Int32)">
            <summary>
            Gets the float value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetGuid(System.Int32)">
            <summary>
            Gets the Guid value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetInt16(System.Int32)">
            <summary>
            Gets the short value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetInt32(System.Int32)">
            <summary>
            Gets the int value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetInt64(System.Int32)">
            <summary>
            Gets the long value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetName(System.Int32)">
            <summary>
            Gets the name of the property from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The name from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetNameForEntities(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetNameForDictionaryStringObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetOrdinal(System.String)">
            <summary>
            Gets the index of the property based on the property name.
            </summary>
            <param name="name">The index of the property.</param>
            <returns>The index of the property from property name.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetOrdinalForEntities(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetOrdinalForDictionaryStringObject(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetSchemaTable">
            <summary>
            Gets the table schema.
            </summary>
            <returns>An instance of the <see cref="T:System.Data.DataTable"/> with the table schema.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetString(System.Int32)">
            <summary>
            Gets the string value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetValue(System.Int32)">
            <summary>
            Gets the current value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetValueForEntities(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetValueForDictionaryStringObject(System.Int32)">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetValues(System.Object[])">
            <summary>
            Populates the values of the array of the current values of the current row.
            </summary>
            <param name="values">The array variable on which to populate the data.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.IsDBNull(System.Int32)">
            <summary>
            Gets a value that checks whether the value of the property from the desired index is equals to <see cref="F:System.DBNull.Value"/>.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.NextResult">
            <summary>
            Forwards the data reader to the next result.
            </summary>
            <returns>Returns true if the forward operation is successful.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.Read">
            <summary>
            Forward the pointer into the next record.
            </summary>
            <returns>A value that indicates whether the movement is successful.</returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.ThrowExceptionIfNotAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetClassProperties">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityDataReader`1.GetFields(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.DataReaderField">
            <summary>
            A class that is being used to handle the field definition of the data reader.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderField.Name">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderField.Ordinal">
            <summary>
            Gets or sets the column ordinal value.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderField.DbField">
            <summary>
            Gets or sets the <see cref="P:RepoDb.DataReaderField.DbField"/> value.
            </summary>
        </member>
        <member name="P:RepoDb.DataReaderField.Type">
            <summary>
            Gets or sets the type value.
            </summary>
        </member>
        <member name="M:RepoDb.DataReaderField.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>The name of the field and the type.</returns>
        </member>
        <member name="T:RepoDb.DbField">
            <summary>
            A class the holds the column definition of the table.
            </summary>
        </member>
        <member name="M:RepoDb.DbField.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Type,System.Nullable{System.Int32},System.Nullable{System.Byte},System.Nullable{System.Byte},System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="isPrimary">The value that indicates whether the field is primary.</param>
            <param name="isIdentity">The value that indicates whether the field is identity.</param>
            <param name="isNullable">The value that indicates whether the field is nullable.</param>
            <param name="type">The equivalent .NET CLR type of the field.</param>
            <param name="size">The size of the field.</param>
            <param name="precision">The precision of the field.</param>
            <param name="scale">The scale of the field.</param>
            <param name="databaseType">The database type of the field.</param>
            <param name="provider">The database provider who created this instance.</param>
        </member>
        <member name="P:RepoDb.DbField.Name">
            <summary>
            Gets the quoted name of the database field.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.IsPrimary">
            <summary>
            Gets the value whether the column is a primary column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.IsIdentity">
            <summary>
            Gets the value whether the column is an identify column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.IsNullable">
            <summary>
            Gets the value whether the column is nullable.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Type">
            <summary>
            Gets the .NET type of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Size">
            <summary>
            Gets the size of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Precision">
            <summary>
            Gets the precision of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Scale">
            <summary>
            Gets the scale of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.DatabaseType">
            <summary>
            Gets the database type of the column.
            </summary>
        </member>
        <member name="P:RepoDb.DbField.Provider">
            <summary>
            Gets the database provider who created this instance.
            </summary>
        </member>
        <member name="M:RepoDb.DbField.ToString">
            <summary>
            Gets the string that represents the instance of this <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <returns>The string that represents the instance of this <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.DbField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.DbField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.DbField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.DbField.Equals(RepoDb.DbField)">
            <summary>
            Compares the <see cref="T:RepoDb.DbField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DbField.op_Equality(RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.DbField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DbField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DbField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DbField.op_Inequality(RepoDb.DbField,RepoDb.DbField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.DbField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DbField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DbField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.DbRepository`1">
            <summary>
            A base class for all shared-based repositories. It is designed to allow the given operations work with multiple data entity objects.
            </summary>
            <typeparam name="TDbConnection">The type of the <see cref="T:System.Data.Common.DbConnection"/> object.</typeparam>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operations by this repository.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.ICache,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Enumerations.ConnectionPersistency,RepoDb.Interfaces.ICache,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbRepository`1"/> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/> will create a new connection object on every repository call.
            </param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ICache"/> interface.</param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.ITrace"/> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> interface.</param>
        </member>
        <member name="P:RepoDb.DbRepository`1.ConnectionString">
            <summary>
            Gets the connection used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.CommandTimeout">
            <summary>
            Gets the command timeout value in seconds that is being used by this repository on every operation.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.Cache">
            <summary>
            Gets the cache object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.CacheItemExpiration">
            <summary>
            Gets the expiration in minutes of the cache item.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.Trace">
            <summary>
            Gets the trace object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.ConnectionPersistency">
            <summary>
            Gets the database connection persistency used by this repository. The default value is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>.
            </summary>
        </member>
        <member name="M:RepoDb.DbRepository`1.CreateConnection">
            <summary>
            Creates a new instance of the database connection. If the value <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/>
            property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CreateConnection(System.Boolean)">
            <summary>
            Creates a new instance of the database connection. If the value <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>, then this will return
            the <see cref="T:System.Data.Common.DbConnection"/> that is being used by the current repository instance. However, if the value of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/>
            property is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>, then this will return a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object.
            </summary>
            <param name="force">Set to true to forcely create a new instance of <see cref="T:System.Data.Common.DbConnection"/> object regardless of the persistency.</param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbConnection"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Dispose">
            <summary>
            Dispose the current repository instance (of type <see cref="T:RepoDb.DbRepository`1"/>). It is not necessary to call this method if the value of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/>
            property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>. This method only manages the connection persistency for the repositories where the value
            of the <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> property is equals to <see cref="F:RepoDb.Enumerations.ConnectionPersistency.Instance"/>.
            </summary>
        </member>
        <member name="M:RepoDb.DbRepository`1.DisposeConnectionForPerCall(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Disposes an <see cref="T:System.Data.IDbConnection"/> object if there is no <see cref="T:System.Data.IDbTransaction"/> object connected
            and if the current <see cref="P:RepoDb.DbRepository`1.ConnectionPersistency"/> value is <see cref="F:RepoDb.Enumerations.ConnectionPersistency.PerCall"/>.
            </summary>
            <param name="connection">The instance of <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="transaction">The instance of <see cref="T:System.Data.IDbTransaction"/> object.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQuery``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>
            An enumerable list of data entity objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQueryAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and 
            converts the result back to an enumerable list of data entity object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>
            An enumerable list of data entity objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteNonQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteNonQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalar(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.DbRepository`1.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An object that holds the first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalarAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.DbRepository`1.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An object that holds the first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalar``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.DbRepository`1.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A first occurrence occurrence (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalarAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the <see cref="P:RepoDb.DbRepository`1.Cache"/> property is set.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQueryMultiple(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Execute the multiple SQL statements from the database.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> used to extract the results.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQueryMultipleAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the multiple SQL statements from the database in an asynchronous way.
            </summary>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> used to extract the results.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Average``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAsync``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAll``2(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAll``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAllAsync``2(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAllAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAll(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAll``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAllAsync(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.AverageAllAsync``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAll``1(System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAllAsync``1(System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAll(System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAllAsync(System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(``0,System.String,System.Data.IDbTransaction)">
            <summary>
            Deletes an existing row from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``2(``1,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(``0,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete an existing row from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``2(``1,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.String,``0,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TWhat">The type of the data entity, the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.String,``0,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the data entity, the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``2(System.String,System.Collections.Generic.IEnumerable{``1},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``2(System.Collections.Generic.IEnumerable{``1},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.String,System.Data.IDbTransaction)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``2(System.String,System.Collections.Generic.IEnumerable{``1},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way. 
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``2(System.Collections.Generic.IEnumerable{``1},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way. 
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way. 
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll(System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the primary keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync(System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``1(System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``2(``1,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``1(System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``2(``1,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``1(RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``1(RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists``1(System.String,``0,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists(System.String,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Exists(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync``1(System.String,``0,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync(System.String,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync(System.String,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExistsAsync(System.String,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``2(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``2(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``2(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``2(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the primary key of the newly inserted data.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAll``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Max``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAsync``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAll``2(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAll``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAllAsync``2(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAllAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAll(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAll``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAllAsync(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MaxAllAsync``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge(System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync(System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Min``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAsync``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAll``2(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAll``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAllAsync``2(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAllAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAll(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAll``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAllAsync(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MinAllAsync``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``2(System.String,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``2(``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``2(System.String,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``2(``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query(System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query(System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync(System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync(System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAll``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAll``1(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAllAsync``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAllAsync``1(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAll(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            Query all the data from the table.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAllAsync(System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            </param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 2 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``4(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 4 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``5(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 5 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``6(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 6 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultiple``7(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 7 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The number of rows to be returned (at T7).</param>
            <param name="hints7">The table hints to be used (at T7).</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``3(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``4(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``5(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``6(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryMultipleAsync``7(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The number of rows to be returned (at T7).</param>
            <param name="hints7">The table hints to be used (at T7).</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Sum``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.String,RepoDb.Field,System.Object,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAsync``1(System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAll``1(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAll``2(RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAll``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAllAsync``1(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAllAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAllAsync``2(RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAllAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAll(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAll``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAllAsync(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.SumAllAsync``1(System.String,RepoDb.Field,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate``1">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate``1(System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync``1">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync``1(System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync``1(System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate(System.String)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate(System.String,System.Data.IDbTransaction)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync(System.String)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync(System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``2(System.String,``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(System.String,``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(System.String,``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``2(``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``2(System.String,``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(System.String,``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(System.String,``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``2(``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update(System.String,System.Object,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Updates an existing row in the table based on the given query expression.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync(System.String,System.Object,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll(System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAll(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction)">
            <summary>
            Update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAllAsync(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="T:RepoDb.DbSettings.BaseDbSetting">
            <summary>
            A base class to be used when implementing an <see cref="T:RepoDb.Interfaces.IDbSetting"/>-based object to support a specific RDBMS data provider.
            </summary>
        </member>
        <member name="M:RepoDb.DbSettings.BaseDbSetting.#ctor">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> class.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.AreTableHintsSupported">
            <summary>
            Gets the value that indicates whether the table hints are supported.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.ClosingQuote">
            <summary>
            Gets the character (or string) used for closing quote.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.AverageableType">
            <summary>
            Gets the default averageable .NET CLR types for the database.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.DefaultSchema">
            <summary>
            Gets the default schema of the database.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.IsDirectionSupported">
            <summary>
            Gets a value that indicates whether setting of the value of <see cref="P:System.Data.Common.DbParameter.Direction"/> object is supported.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.IsExecuteReaderDisposable">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Data.Common.DbCommand"/> object must be disposed after calling the <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/> method.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.IsMultiStatementExecutable">
            <summary>
            Gets a value whether the multiple statement execution is supported.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.IsPreparable">
            <summary>
            Gets a value that indicates whether the current DB Provider supports the <see cref="M:System.Data.Common.DbCommand.Prepare"/> calls.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.IsUseUpsert">
            <summary>
            Gets a value that indicates whether the Insert/Update operation will be used for Merge operation.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.OpeningQuote">
            <summary>
            Gets the character (or string) used for opening quote.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.ParameterPrefix">
            <summary>
            Gets the character (or string) used for the database command parameter quoting.
            </summary>
        </member>
        <member name="P:RepoDb.DbSettings.BaseDbSetting.SchemaSeparator">
            <summary>
            Gets the character (or string) used for separating the schema.
            </summary>
        </member>
        <member name="M:RepoDb.DbSettings.BaseDbSetting.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.DbSettings.BaseDbSetting"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.DbSettings.BaseDbSetting.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.DbSettings.BaseDbSetting.Equals(RepoDb.DbSettings.BaseDbSetting)">
            <summary>
            Compares the <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DbSettings.BaseDbSetting.op_Equality(RepoDb.DbSettings.BaseDbSetting,RepoDb.DbSettings.BaseDbSetting)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DbSettings.BaseDbSetting.op_Inequality(RepoDb.DbSettings.BaseDbSetting,RepoDb.DbSettings.BaseDbSetting)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DbSettings.BaseDbSetting"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.DirectionalQueryField">
            <summary>
            A class that is being used to define a <see cref="T:RepoDb.QueryField" /> object query expression that allow the setting of the <see cref="T:System.Data.ParameterDirection"/> property
            of the <see cref="T:System.Data.IDbDataParameter"/> object. This is very useful if you wish to invoke a Stored Procedure that has an output parameter.
            </summary>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,System.Type,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="type">The type of the parameter object.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(RepoDb.Field,System.Object,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Object,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,System.Type,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="type">The type of the parameter object.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,System.Object,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(RepoDb.Field,System.Object,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Object,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.Nullable{System.Int32},System.Boolean,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="appendUnderscore">The value to identify whether the underscore prefix will be appended to the parameter name.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Object,System.Nullable{System.Int32},System.Boolean,System.Data.ParameterDirection)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.DirectionalQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="size">The sizeof the parameter value.</param>
            <param name="appendUnderscore">The value to identify whether the underscore prefix will be appended to the parameter name.</param>
            <param name="direction">The direction to be used for the parameter object.</param>
        </member>
        <member name="P:RepoDb.DirectionalQueryField.Direction">
            <summary>
            Gets the the value of the parameter direction currently in used.
            </summary>
        </member>
        <member name="P:RepoDb.DirectionalQueryField.Size">
            <summary>
            Gets the size of the parameter currently in used.
            </summary>
        </member>
        <member name="P:RepoDb.DirectionalQueryField.Type">
            <summary>
            Gets the type of the parameter.
            </summary>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.DirectionalQueryField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.DirectionalQueryField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.Equals(RepoDb.DirectionalQueryField)">
            <summary>
            Compares the <see cref="T:RepoDb.DirectionalQueryField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.op_Equality(RepoDb.DirectionalQueryField,RepoDb.DirectionalQueryField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.DirectionalQueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DirectionalQueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DirectionalQueryField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.DirectionalQueryField.op_Inequality(RepoDb.DirectionalQueryField,RepoDb.DirectionalQueryField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.DirectionalQueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.DirectionalQueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.DirectionalQueryField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Enumerations.Conjunction">
            <summary>
            An enumeration that is used to define a conjunction for the query grouping. This enumeration is used at <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Conjunction.And">
            <summary>
            The (AND) conjunction.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Conjunction.Or">
            <summary>
            The (OR) conjunction.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.ConnectionPersistency">
            <summary>
            An enumeration that defines the persistency of the <see cref="T:System.Data.Common.DbConnection"/> object used by the repository.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConnectionPersistency.PerCall">
            <summary>
            A new connection is being created on every call of the repository operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConnectionPersistency.Instance">
            <summary>
            A single connection is being used until the lifetime of the repository.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.ConversionType">
            <summary>
            An enumeration that is used to define the conversion logic when converting an instance of <see cref="T:System.Data.Common.DbDataReader"/> into a .NET CLR class.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConversionType.Default">
            <summary>
            The conversion is strict. There is no additional implied logic in used during the conversion of the <see cref="T:System.Data.Common.DbDataReader"/> object into its destination .NET CLR type.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConversionType.Automatic">
            <summary>
            The conversion is not strict (or automatic). An additional logic from the <see cref="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)"/> and/or <see cref="T:System.Convert"/> objects
            will be used to properly map the instance of <see cref="T:System.Data.Common.DbDataReader"/> object into its destination .NET CLR type. The operation is compiled ahead-of-time (AOT) and 
            will only succeed if the data types of both objects are convertible.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Operation">
            <summary>
            An enumeration that is used to define an operation on the query expression.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Equal">
            <summary>
            An equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotEqual">
            <summary>
            A not-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.LessThan">
            <summary>
            A less-than operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.GreaterThan">
            <summary>
            A greater-than operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.LessThanOrEqual">
            <summary>
            A less-than-or-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.GreaterThanOrEqual">
            <summary>
            A greater-than-or-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Like">
            <summary>
            A like operation. Defines the (LIKE) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotLike">
            <summary>
            A not-like operation. Defines the (NOT LIKE) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Between">
            <summary>
            A between operation. Defines the (BETWEEN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotBetween">
            <summary>
            A not-between operation. Defines the (NOT BETWEEN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.In">
            <summary>
            An in operation. Defines the (IN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotIn">
            <summary>
            A not-in operation. Defines the (NOT IN) keyword in SQL Statement.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Order">
            <summary>
            An enumeration that is used to define an ordering for the query.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Order.Ascending">
            <summary>
            The ascending order.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Order.Descending">
            <summary>
            The descending order.
            </summary>
        </member>
        <member name="T:RepoDb.Exceptions.CancelledExecutionException">
            <summary>
            An exception that is being thrown when the operation has been cancelled during the tracing.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.CancelledExecutionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.CancelledExecutionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.ConverterNotFoundException">
            <summary>
            An exception that is being thrown when the converter is not found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.ConverterNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.ConverterNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EmptyException">
            <summary>
            An exception that is being thrown if the <see cref="T:System.Array"/> or <see cref="T:System.Linq.Enumerable"/> is empty.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EmptyException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.EmptyException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.IdentityFieldNotFoundException">
            <summary>
            An exception that is being thrown if the identity key is not found from the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.IdentityFieldNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.IdentityFieldNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidExpressionException">
            <summary>
            An exception that is being thrown when the query expression passed is not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidExpressionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.InvalidExpressionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidParameterException">
            <summary>
            An exception that is being thrown when the parameter is not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidParameterException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.InvalidParameterException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidQualifiersException">
            <summary>
            An exception that is being thrown if the qualifier <see cref="T:RepoDb.Field"/> objects passed in the operation are not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidQualifiersException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.InvalidQualifiersException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidTypeException">
            <summary>
            An exception that is being thrown when the type is not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidTypeException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.InvalidTypeException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.ItemNotFoundException">
            <summary>
            An exception that is being thrown when the target item is not found from the collection.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.ItemNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.ItemNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.KeyFieldNotFoundException">
            <summary>
            An exception that is being thrown if the primary key and identity key is not found from the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.KeyFieldNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.KeyFieldNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.MappingExistsException">
            <summary>
            An exception that is being thrown when the mapping is being added to the existing one without overriding it.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.MappingExistsException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.MappingExistsException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.MissingFieldsException">
            <summary>
            An exception that is being thrown when the operation extraction of the <see cref="T:System.Data.Common.DbDataReader"/> into data entity object 
            does not matched at least one of the field from the result set.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.MissingFieldsException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.MissingFieldsException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.MissingMappingException">
            <summary>
            An exception that is being thrown when the mapping is missing.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.MissingMappingException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.MissingMappingException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.MissingQualifierFieldsException">
            <summary>
            An exception that is being thrown if the qualifier fields are not found from the request.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.MissingQualifierFieldsException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.MissingQualifierFieldsException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.ParameterNotFoundException">
            <summary>
            An exception that is being thrown when the parameter object is not found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.ParameterNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.ParameterNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.PrimaryFieldNotFoundException">
            <summary>
            An exception that is being thrown if the primary key is not found from the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.PrimaryFieldNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.PrimaryFieldNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.PropertyNotFoundException">
            <summary>
            An exception that is being thrown if the target property is not found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.PropertyNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Exceptions.PropertyNotFoundException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.ClassExpression">
            <summary>
            A class used for manipulating class objects via expressions.
            </summary>
        </member>
        <member name="M:RepoDb.ClassExpression.GetEntitiesPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the values of the property of the data entities (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entities.</typeparam>
            <typeparam name="TResult">The result type of the extracted property.</typeparam>
            <param name="entities">The list of the data entities.</param>
            <param name="expression">The expression to be parsed.</param>
            <returns>The values of the property of the data entities.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetEntitiesPropertyValues``2(System.Collections.Generic.IEnumerable{``0},RepoDb.Field)">
            <summary>
            Gets the values of the property of the data entities (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entities.</typeparam>
            <typeparam name="TResult">The result type of the extracted property.</typeparam>
            <param name="entities">The list of the data entities.</param>
            <param name="field">The name of the target property defined as <see cref="T:RepoDb.Field"/>.</param>
            <returns>The values of the property of the data entities.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetEntitiesPropertyValues``2(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Gets the values of the property of the data entities (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entities.</typeparam>
            <typeparam name="TResult">The result type of the extracted property.</typeparam>
            <param name="entities">The list of the data entities.</param>
            <param name="propertyName">The name of the target property.</param>
            <returns>The values of the property of the data entities.</returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetEntitiesPropertyValues``2(System.Collections.Generic.IEnumerable{``0},RepoDb.ClassProperty)">
            <summary>
            Gets the values of the property of the data entities.
            </summary>
            <typeparam name="TEntity">The type of the data entities.</typeparam>
            <typeparam name="TResult">The result type of the extracted property.</typeparam>
            <param name="entities">The list of the data entities.</param>
            <param name="property">The target property.</param>
            <returns>The values of the property of the data entities.</returns>
        </member>
        <member name="T:RepoDb.ClassExpression.GetPropertyValuesCache`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertyValuesCache`2.GetFunc(RepoDb.ClassProperty)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertyValuesCache`2.Guard(RepoDb.ClassProperty)">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertyValuesCache`2.Do(System.Collections.Generic.IEnumerable{`0},RepoDb.ClassProperty)">
            <summary>
            
            </summary>
            <param name="entities"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetProperties``1">
            <summary>
            Gets the properties of the class.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <returns>The properties of the class.</returns>
        </member>
        <member name="T:RepoDb.ClassExpression.GetPropertiesCache`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertiesCache`1.GetFunc">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertiesCache`1.Do">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertiesAndValues``1(``0)">
            <summary>
            Extract the class properties and values and returns an enumerable of <see cref="T:RepoDb.PropertyValue"/> object.
            </summary>
            <typeparam name="TEntity">The target type of the class.</typeparam>
            <param name="obj">The object to be extracted.</param>
            <returns>A list of <see cref="T:RepoDb.PropertyValue"/> object with extracted values.</returns>
        </member>
        <member name="T:RepoDb.ClassExpression.GetPropertiesValuesCache`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertiesValuesCache`1.GetFunc">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.ClassExpression.GetPropertiesValuesCache`1.Do(`0)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Extensions.ArrayExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Array"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ArrayExtension.AsEnumerable(System.Array)">
            <summary>
            Converts an <see cref="T:System.Array"/> object into an enumerable of objects.
            </summary>
            <param name="array">The array to be converted.</param>
            <returns>An enumerable of objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ArrayExtension.AsEnumerable``1(System.Array)">
            <summary>
            Converts an <see cref="T:System.Array"/> object into an enumerable of objects.
            </summary>
            <typeparam name="T">The type of the object to be filtered.</typeparam>
            <param name="array">The array to be converted.</param>
            <returns>An enumerable of objects.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ClassPropertyExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.ClassProperty"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ClassPropertyExtension.AsFields(System.Collections.Generic.IEnumerable{RepoDb.ClassProperty})">
            <summary>
            Converts the list of <see cref="T:RepoDb.ClassProperty"/> into a a list of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="properties">The current instance of <see cref="T:RepoDb.ClassProperty"/>.</param>
            <returns>A list of <see cref="T:System.String"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ClassPropertyExtension.AsFields(System.Collections.Generic.IList{RepoDb.ClassProperty})">
            <summary>
            Converts the list of <see cref="T:RepoDb.ClassProperty"/> into a a list of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="properties">The current instance of <see cref="T:RepoDb.ClassProperty"/>.</param>
            <returns>A list of <see cref="T:System.String"/> objects.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ConjunctionExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Enumerations.Conjunction"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ConjunctionExtension.GetText(RepoDb.Enumerations.Conjunction)">
            <summary>
            Gets the text value is used to defined the <see cref="T:RepoDb.Enumerations.Conjunction"/>.
            </summary>
        </member>
        <member name="T:RepoDb.Extensions.DataEntityExtension">
            <summary>
            Contains the extension methods for data entity object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetProperties(System.Type)">
            <summary>
            Gets the list of <see cref="T:System.Reflection.PropertyInfo"/> objects from the data entity type as <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The list of <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetProperties``1">
            <summary>
            Gets the list of <see cref="T:System.Reflection.PropertyInfo"/> objects from the data entity type as <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>The list of <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetMappedName(System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
            <summary>
            Gets the mapped name of the data entity from the <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/> object.
            </summary>
            <param name="tableAttribute">The table attribute to be checked.</param>
            <returns>The mapped name for the data entity.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetMappedName(System.Type)">
            <summary>
            Gets the mapped name of the data entity. This will return the value of <see cref="P:RepoDb.Attributes.MapAttribute.Name"/> and/or <see cref="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Name"/> property.
            If the both attributes are not defined, then this will return the name of the class.
            </summary>
            <param name="type">The type of the data entity where to get the mapped name.</param>
            <returns>The mapped name for the data entity.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetMappedName``1">
            <summary>
            Gets the mapped name of the data entity. This will return the value of <see cref="P:RepoDb.Attributes.MapAttribute.Name"/> and/or <see cref="P:System.ComponentModel.DataAnnotations.Schema.TableAttribute.Name"/> property.
            If the both attributes are not defined, then this will return the name of the class.
            </summary>
            <typeparam name="TEntity">The type of the data entity where to get the mapped name.</typeparam>
            <returns>The mapped name for the data entity.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetSchema(System.String)">
            <summary>
            Gets the schema portion of the passed table name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The schema of the passed table name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetSchema(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the schema of the table name.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The schema of the table name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetTableName(System.String)">
            <summary>
            Gets the actual name of the table without the schema.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The actual table name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetTableName(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the actual name of the table without the schema.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The actual table name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetPropertyOrThrow``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetPropertyOrThrow(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetClassPropertyOrThrow``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetClassPropertyOrThrow(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Extensions.DataReaderExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDataReader"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DataReaderExtension.AsEnumerable``1(System.Data.IDataReader)">
            <summary>
            Converts the <see cref="T:System.Data.IDataReader"/> object into an enumerable list of data entity objects.
            </summary>
            <typeparam name="TEntity">The target type of the data entity.</typeparam>
            <param name="reader">The data reader object to be converted.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataReaderExtension.AsEnumerable(System.Data.IDataReader)">
            <summary>
            Converts the <see cref="T:System.Data.IDataReader"/> object into an enumerable list of dynamic objects containing the schema of the reader.
            </summary>
            <param name="reader">The data reader object to be converted.</param>
            <returns>An enumerable list of dynamic objects containing the schema of the reader.</returns>
        </member>
        <member name="T:RepoDb.Extensions.DbCommandExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbCommand"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameter(System.Data.IDbCommand,System.String,System.Object,System.Nullable{System.Data.DbType})">
            <summary>
            Creates a parameter for a command object.
            </summary>
            <param name="command">The command object instance to be used.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The database type of the parameter.</param>
            <returns>An instance of the newly created parameter object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameter(System.Data.IDbCommand,System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection})">
            <summary>
            Creates a parameter for a command object.
            </summary>
            <param name="command">The command object instance to be used.</param>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The database type of the parameter.</param>
            <param name="parameterDirection">The direction of the parameter.</param>
            <returns>An instance of the newly created parameter object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.EnsureTableValueParameter(System.Data.IDbDataParameter)">
             <summary>
            
             </summary>
             <param name="parameter"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersFromArray(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{RepoDb.CommandArrayParameter})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="commandArrayParameters"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersFromArray(System.Data.IDbCommand,RepoDb.CommandArrayParameter,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="commandArrayParameter"></param>
             <param name="dbSetting"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Object)">
            <summary>
            Creates a parameter from object by mapping the property from the target entity type.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="param">The object to be used when creating the parameters.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Object,System.Type)">
            <summary>
            Creates a parameter from object by mapping the property from the target entity type.
            </summary>
            <param name="command">The command object to be used.</param>
            <param name="param">The object to be used when creating the parameters.</param>
            <param name="entityType">The type of the data entity.</param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Object,System.Collections.Generic.HashSet{System.String},System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="param"></param>
             <param name="propertiesToSkip"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameter(System.Data.IDbCommand,System.String,System.Object,System.Nullable{System.Int32},RepoDb.ClassProperty,RepoDb.DbField,System.Nullable{System.Data.ParameterDirection},System.Type)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="classProperty"></param>
            <param name="dbField"></param>
            <param name="parameterDirection"></param>
            <param name="fallbackType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameterForNonEnum(System.Data.IDbCommand,System.Type,System.String,System.Object,System.Nullable{System.Int32},RepoDb.ClassProperty,RepoDb.DbField,System.Nullable{System.Data.ParameterDirection},System.Type)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="valueType"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="classProperty"></param>
            <param name="dbField"></param>
            <param name="parameterDirection"></param>
            <param name="fallbackType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameterForEnum(System.Data.IDbCommand,System.Type,System.String,System.Object,System.Nullable{System.Int32},RepoDb.ClassProperty,RepoDb.DbField,System.Nullable{System.Data.ParameterDirection})">
            <summary>
            
            </summary>
            <param name="command"></param>
            <param name="valueType"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="size"></param>
            <param name="classProperty"></param>
            <param name="dbField"></param>
            <param name="parameterDirection"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersInternal(System.Data.IDbCommand,System.Object,System.Collections.Generic.HashSet{System.String},System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="param"></param>
             <param name="propertiesToSkip"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="dictionary"></param>
             <param name="propertiesToSkip"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,RepoDb.QueryGroup,System.Collections.Generic.HashSet{System.String},System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="queryGroup"></param>
             <param name="propertiesToSkip"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.HashSet{System.String},System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="queryFields"></param>
             <param name="propertiesToSkip"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParameters(System.Data.IDbCommand,RepoDb.QueryField,System.Collections.Generic.HashSet{System.String},System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="queryField"></param>
             <param name="propertiesToSkip"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersForInOperation(System.Data.IDbCommand,RepoDb.QueryField,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="queryField"></param>
             <param name="dbField"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.CreateParametersForBetweenOperation(System.Data.IDbCommand,RepoDb.QueryField,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="queryField"></param>
             <param name="dbField"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.InvokePropertyHandler(RepoDb.ClassProperty,System.Type@,System.Object@)">
            <summary>
            
            </summary>
            <param name="classProperty"></param>
            <param name="valueType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.IsPostgreSqlUserDefined(RepoDb.DbField)">
            <summary>
            
            </summary>
            <param name="dbField"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.GetSize(System.Nullable{System.Int32},RepoDb.DbField)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="dbField"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.InvokePropertyValueAttributes(System.Data.IDbDataParameter,RepoDb.ClassProperty)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <param name="classProperty"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.EnsureAutomaticConversion(RepoDb.DbField,System.Type@,System.Object@)">
            <summary>
            
            </summary>
            <param name="dbField"></param>
            <param name="valueType"></param>
            <param name="value"></param>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.IsAutomaticConversion(RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.GetDbField(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="fieldName"></param>
             <param name="dbFields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.AutomaticConvert(System.Object,System.Type,System.Type)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="fromType"></param>
             <param name="targetType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.AutomaticConvertStringToGuid(System.Object)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.AutomaticConvertGuidToString(System.Object)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.DbCommandExtension.ConvertEnumValueToType(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Extensions.DbFieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Field"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DbFieldExtension.AsEnumerable(RepoDb.DbField)">
            <summary>
            Converts an instance of a <see cref="T:RepoDb.DbField"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RepoDb.DbField"/> object.
            </summary>
            <param name="dbField">The <see cref="T:RepoDb.DbField"/> to be converted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of <see cref="T:RepoDb.DbField"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbFieldExtension.AsField(RepoDb.DbField)">
            <summary>
            Converts an instance of a <see cref="T:RepoDb.DbField"/> into <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="dbField">The <see cref="T:RepoDb.DbField"/> to be converted.</param>
            <returns>An instance of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DbFieldExtension.AsFields(System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            Converts the list of <see cref="T:RepoDb.DbField"/> objects into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="dbFields">The <see cref="T:RepoDb.DbField"/> to be converted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.EnumerableExtension">
            <summary>
            An extension class for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Split the enumerable into multiple enumerables.
            </summary>
            <typeparam name="T">The target dynamic type of the enumerable.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <param name="sizePerSplit">The sizes of the items per split.</param>
            <returns>An enumerable of enumerables.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.OfTargetType``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the items of type <typeparamref name="TargetType"/> from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> object into a target <see cref="T:System.Collections.Generic.IEnumerable`1"/> object.
            </summary>
            <typeparam name="SourceType">The source type.</typeparam>
            <typeparam name="TargetType">The target type.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object in which the items are of type <typeparamref name="TargetType"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.WithType``1(System.Collections.IEnumerable)">
            <summary>
            Checks whether the instance of <see cref="T:System.Collections.IEnumerable"/> is of type <see cref="T:System.Collections.Generic.IEnumerable`1"/>, then casts it, otherwise, 
            returns the instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified items. The items that are not of type <typeparamref name="T"/> will be
            eliminated from the result. This method is using the underlying method <see cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> object in which the items are of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> is of type <see cref="T:System.Collections.Generic.List`1"/>, then casts it, otherwise, converts it.
            This method is using the underlying method <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> method.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <returns>The converted <see cref="T:System.Collections.Generic.IList`1"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> is an array of <typeparamref name="T"/>, then casts it, otherwise, converts it.
            This method is using the underlying method <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/> method.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The actual enumerable instance.</param>
            <returns>The converted <see cref="T:System.Array"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.EnumerableExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets a value indicating whether the current collection is null or empty.
            </summary>
            <param name="value">The target type.</param>
            <typeparam name="T">The actual enumerable instance.</typeparam>
            <returns>A value indicating whether the collection is null or empty.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ExpressionExtension">
            Though we know that throwing an exception in the extension is not advisable, but I tend to do it to ensure that the
            parsing of the Linq expressions are properly handled. Please be guided about this extension that it somehow throws
            and exception at some scenarios.
            <summary>
            Contains the extension methods for <see cref="T:System.Linq.Expressions.Expression"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsExtractable(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> can be extracted as <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression can be extracted as <see cref="T:RepoDb.QueryField"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsGroupable(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> can be grouped as <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression can be grouped as <see cref="T:RepoDb.QueryGroup"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.IsMathematical(System.Linq.Expressions.Expression)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.Expression"/> is using the <see cref="T:System.Math"/> object operations.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be identified.</param>
            <returns>Returns true if the expression is using the <see cref="T:System.Math"/> object operations.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetField(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets the <see cref="T:RepoDb.Field"/> defined on the current instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetField(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets the <see cref="T:RepoDb.Field"/> defined on the current instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetField(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the <see cref="T:RepoDb.Field"/> defined on the current instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetField(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the <see cref="T:RepoDb.Field"/> defined on the current instance of <see cref="T:System.Linq.Expressions.MemberExpression"/>
            </summary>
            <param name="expression"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets the name of the <see cref="T:System.Reflection.MemberInfo"/> defines on the current instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> to be checked.</param>
            <returns>The name of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets the name of the operand defines on the current instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> to be checked.</param>
            <returns>The name of the operand.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the name of the operand defines on the current instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to be checked.</param>
            <returns>The name of the operand.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetName(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the name of the <see cref="T:System.Reflection.MemberInfo"/> defines on the current instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> to be checked.</param>
            <returns>The name of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetMemberType(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets the type of the <see cref="T:System.Reflection.MemberInfo"/> defines on the current instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> to be checked.</param>
            <returns>The type of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetMemberType(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets the type of the operand defines on the current instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> to be checked.</param>
            <returns>The type of the operand.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetMemberType(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets the type of the operand defines on the current instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> to be checked.</param>
            <returns>The type of the operand.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetMemberType(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets the type of the <see cref="T:System.Reflection.MemberInfo"/> defines on the current instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> to be checked.</param>
            <returns>The type of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.Expression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.Expression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.BinaryExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ConstantExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ConstantExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.UnaryExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MethodCallExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MemberExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.NewArrayExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ListInitExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ListInitExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ListInitExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.NewExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.NewExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.NewExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.NewExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MemberInitExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ConditionalExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.ParameterExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.ParameterExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetValue(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.DefaultExpression"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.DefaultExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.ToMember(System.Linq.Expressions.Expression)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.Expression"/> object into <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <param name="expression">The instance of <see cref="T:System.Linq.Expressions.Expression"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.MemberExpression"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            A helper method to return the instance of <see cref="T:System.Reflection.PropertyInfo"/> object based on expression.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
            <param name="expression">The expression to be extracted.</param>
            <returns>An instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetProperty``1(System.Linq.Expressions.BinaryExpression)">
            <summary>
            A helper method to return the instance of <see cref="T:System.Reflection.PropertyInfo"/> object based on <see cref="T:System.Linq.Expressions.BinaryExpression"/> object.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
            <param name="expression">The expression to be extracted.</param>
            <returns>An instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetProperty``1(System.Linq.Expressions.UnaryExpression)">
            <summary>
            A helper method to return the instance of <see cref="T:System.Reflection.PropertyInfo"/> object based on <see cref="T:System.Linq.Expressions.UnaryExpression"/> object.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
            <param name="expression">The expression to be extracted.</param>
            <returns>An instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ExpressionExtension.GetProperty``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            A helper method to return the instance of <see cref="T:System.Reflection.PropertyInfo"/> object based on <see cref="T:System.Linq.Expressions.MemberExpression"/> object.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
            <param name="expression">The expression to be extracted.</param>
            <returns>An instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.FieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Field"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsEnumerable(RepoDb.Field)">
            <summary>
            Converts an instance of a <see cref="T:RepoDb.Field"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="field">The <see cref="T:RepoDb.Field"/> to be converted.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsField(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsParameter(RepoDb.Field,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsAliasField(RepoDb.Field,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="alias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsParameterAsField(RepoDb.Field,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsFieldAndParameter(RepoDb.Field,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsFieldAndAliasField(RepoDb.Field,System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsJoinQualifier(RepoDb.Field,System.String,System.String,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Creates a string representation of the JOIN statement for the target qualifier <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object.</param>
            <param name="leftAlias">The left alias.</param>
            <param name="rightAlias">The right alias.</param>
            <param name="considerNulls">The value that defines whether the null values are being considered.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The currently in used database setting.</returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsFields(System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsParameters(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsAliasFields(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="alias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsParametersAsFields(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsFieldsAndParameters(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsFieldsAndAliasFields(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Extensions.ListExtension">
            <summary>
            An extension class for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ListExtension.AddIfNotNull``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Adds an item into the <see cref="T:System.Collections.Generic.IList`1"/> if not null.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="list">The instance of the list.</param>
            <param name="item">The item to be evaulated and added.</param>
        </member>
        <member name="M:RepoDb.Extensions.ListExtension.AddRangeIfNotNullOrNotEmpty``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds an item into the <see cref="T:System.Collections.Generic.IList`1"/> if not null.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="list">The instance of the list.</param>
            <param name="items">The items to be evaulated and added.</param>
        </member>
        <member name="T:RepoDb.Extensions.MemberBindingExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Linq.Expressions.MemberBinding"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.MemberBindingExtension.GetValue(System.Linq.Expressions.MemberBinding)">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object where the value is to be extracted.</param>
            <returns>The extracted value from <see cref="T:System.Linq.Expressions.MemberBinding"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberBindingExtension.IsMemberAssignment(System.Linq.Expressions.MemberBinding)">
            <summary>
            Identify whether the instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> is a <see cref="T:System.Linq.Expressions.MemberAssignment"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object to be identified.</param>
            <returns>Returns true if the expression is a <see cref="T:System.Linq.Expressions.MemberAssignment"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberBindingExtension.ToMemberAssignment(System.Linq.Expressions.MemberBinding)">
            <summary>
            Converts the <see cref="T:System.Linq.Expressions.MemberBinding"/> object into <see cref="T:System.Linq.Expressions.MemberAssignment"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Linq.Expressions.MemberBinding"/> object to be converted.</param>
            <returns>A converted instance of <see cref="T:System.Linq.Expressions.MemberAssignment"/> object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.MemberInfoExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.GetMappedName(System.Reflection.MemberInfo)">
            <summary>
            Gets the name of the current instance of <see cref="T:System.Reflection.MemberInfo"/>. If the instance is <see cref="T:System.Reflection.PropertyInfo"/>, it will try to retrieved the
            mapped name of the property.
            </summary>
            <param name="member">The member where to retrieve a name.</param>
            <returns>The name of the <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.GetValue(System.Reflection.MemberInfo,System.Object,System.Object[])">
            <summary>
            Gets a value from the current instance of <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> object where the value is to be extracted.</param>
            <param name="obj">The object whose member value will be returned.</param>
            <param name="parameters">The argument list of parameters if needed.</param>
            <returns>The extracted value from <see cref="T:System.Reflection.MemberInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.SetValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the value of an object member based on the retrieved value from the instance of <see cref="T:System.Reflection.MemberInfo"/> object.
            </summary>
            <param name="member">The instance of <see cref="T:System.Reflection.MemberInfo"/> object where the value is to be retrieved.</param>
            <param name="obj">The object whose member value will be set.</param>
            <param name="value">The target value of the member.</param>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.ToPropertyInfo(System.Reflection.MemberInfo)">
            <summary>
            Converts the current instance of <see cref="T:System.Reflection.MemberInfo"/> object into <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="member">The instance of the <see cref="T:System.Reflection.MemberInfo"/> object.</param>
            <returns>A converted instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.IsMemberArgumentLengthEqual(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Checks whether the arguments length are equal to both members.
            </summary>
            <param name="member1">The first <see cref="T:System.Reflection.MemberInfo"/>.</param>
            <param name="member2">The second <see cref="T:System.Reflection.MemberInfo"/>.</param>
            <returns>True if the arguments length of the members are equal.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ObjectExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.ToNumber(System.Object)">
            <summary>
            Converts an object to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>A <see cref="T:System.Int64"/> value of the object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.ThrowIfNull``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.ThrowIfNull``1(``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="argument"></param>
        </member>
        <member name="T:RepoDb.Extensions.OperationExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Enumerations.Operation"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.OperationExtension.GetText(RepoDb.Enumerations.Operation)">
            <summary>
            Gets the text value is used to defined the <see cref="T:RepoDb.Enumerations.Operation"/>.
            </summary>
        </member>
        <member name="T:RepoDb.Extensions.OrderExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.Enumerations.Order"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.OrderExtension.GetText(RepoDb.Enumerations.Order)">
            <summary>
            Gets the text value is used to defined the <see cref="T:RepoDb.Enumerations.Order"/>.
            </summary>
        </member>
        <member name="T:RepoDb.Extensions.OrderFieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.OrderField"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsEnumerable(RepoDb.OrderField)">
            <summary>
            Converts an instance of order field into an enumerable list of order fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <returns>An enumerable list of order fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsField(RepoDb.OrderField,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts an instance of order field into an enumerable list of fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsField(RepoDb.OrderField,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts an instance of order field into an enumerable list of fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <param name="alias">The alias to be used for conversion.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="T:RepoDb.Extensions.PropertyInfoExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets a custom attribute defined on the property.
            </summary>
            <typeparam name="T">The custom attribute that is defined into the property.</typeparam>
            <param name="property">The property of where the custom attribute is defined.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetCustomAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets a custom attribute defined on the property.
            </summary>
            <param name="property">The property of where the custom attribute is defined.</param>
            <param name="type">The custom attribute that is defined into the property.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetMappedName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the mapped name of the property.
            </summary>
            <param name="property">The property where the mapped name will be retrieved.</param>
            <returns>A string containing the mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetMappedName(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets the mapped name of the property.
            </summary>
            <param name="property">The property where the mapped name will be retrieved.</param>
            <param name="declaringType">The declaring type of the property.</param>
            <returns>A string containing the mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsQueryField(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a query field object.
            </summary>
            <param name="property">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be converted.</param>
            <param name="entity">The entity object where the value of the property will be retrieved.</param>
            <returns>An instance of query field object that holds the converted name and values of the property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsQueryField(System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a query field object.
            </summary>
            <param name="property">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be converted.</param>
            <param name="entity">The entity object where the value of the property will be retrieved.</param>
            <returns>An instance of query field object that holds the converted name and values of the property.</returns>
            <param name="appendUnderscore">The value to identify whether the underscore prefix will be appended to the parameter name.</param>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAsString(System.Reflection.PropertyInfo,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a mapped name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A instance of string containing the value of a mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameterAsString(System.Reflection.PropertyInfo,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a parameterized name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A instance of string containing the value of a parameterized name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameterAsFieldAsString(System.Reflection.PropertyInfo,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a parameterized (as field) name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A instance of string containing the value of a parameterized (as field) name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAndParameterAsString(System.Reflection.PropertyInfo,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a field and parameter name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A instance of string containing the value of a field and parameter name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAndAliasField(System.Reflection.PropertyInfo,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts a <see cref="T:System.Reflection.PropertyInfo"/> into a field (and its alias) name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="alias">The alias to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A instance of string containing the value of a field (and its alias) name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GenerateCustomizedHashCode(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Generates a hashcode of the <see cref="T:System.Reflection.PropertyInfo"/> object based on the parent class name and its own name.
            </summary>
            <param name="property">The instance of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="declaringType">The declaring type of the <see cref="T:System.Reflection.PropertyInfo"/> object. This refers to the derived class if present.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsField(System.Reflection.PropertyInfo)">
            <summary>
            Converts an instance of <see cref="T:System.Reflection.PropertyInfo"/> object into <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="property">The instance of <see cref="T:System.Reflection.PropertyInfo"/> object to be converted.</param>
            <returns>The converted instance of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable of <see cref="T:System.Reflection.PropertyInfo"/> objects into an enumerable array of <see cref="T:RepoDb.Field"/>.
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of <see cref="T:RepoDb.Field"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFields(System.Reflection.PropertyInfo[])">
            <summary>
            Converts an array of <see cref="T:System.Reflection.PropertyInfo"/> objects into an enumerable array of <see cref="T:RepoDb.Field"/>.
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of <see cref="T:RepoDb.Field"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetPropertyValueAttributes(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Returns the list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object that is currently mapped
            on the target <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The target property.</param>
            <param name="includeMappings">True to include the existing mappings.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.PropertyHandlerAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetPropertyValueAttributes(System.Reflection.PropertyInfo,System.Type,System.Boolean)">
            <summary>
            Returns the list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object that is currently mapped
            on the target <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="property">The target property.</param>
            <param name="declaringType">The declaring type of the property.</param>
            <param name="includeMappings">True to include the existing mappings.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.PropertyHandlerAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetPropertyValueAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Gets the instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object from the existing mapped
            list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.
            </summary>
            <typeparam name="TPropertyValueAttribute">The target type of the <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/>.</typeparam>
            <param name="property">The property where to extract the instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="includeMappings">True to include the existing mappings.</param>
            <returns>The instance of target <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetPropertyValueAttribute``1(System.Reflection.PropertyInfo,System.Type,System.Boolean)">
            <summary>
            Gets the instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object from the existing mapped
            list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.
            </summary>
            <typeparam name="TPropertyValueAttribute">The target type of the <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/>.</typeparam>
            <param name="property">The property where to extract the instance of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="declaringType">The declaring type of the property.</param>
            <param name="includeMappings">True to include the existing mappings.</param>
            <returns>The instance of target <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetNamePropertyValueAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetDbTypePropertyValueAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="declaringType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetPropertyValueAttributeByParameterName(System.Reflection.PropertyInfo,System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="declaringType"></param>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetHandledValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Returns the value of the data entity property. If the property handler is defined in the property, then the
            handled value will be returned.
            </summary>
            <param name="property">The target <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="entity">The instance of the data entity object.</param>
            <returns>The handled value of the data entity property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetHandledValue(System.Reflection.PropertyInfo,System.Object,System.Type)">
            <summary>
            Returns the value of the data entity property. If the property handler is defined in the property, then the
            handled value will be returned.
            </summary>
            <param name="property">The target <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="entity">The instance of the data entity object.</param>
            <param name="declaringType">The customized declaring type of the <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <returns>The handled value of the data entity property.</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFieldExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.QueryField"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsEnumerable(RepoDb.QueryField)">
            <summary>
            Converts an instance of a query field into an enumerable list of query fields.
            </summary>
            <param name="queryField">The query field to be converted.</param>
            <returns>An enumerable list of query fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.ResetAll(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            <summary>
            Resets all the instances of <see cref="T:RepoDb.QueryField"/>.
            </summary>
            <param name="queryFields">The list of <see cref="T:RepoDb.QueryField"/> objects.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.PrependAnUnderscoreAtParameter(RepoDb.QueryField)">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsField(RepoDb.QueryField,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsField(RepoDb.QueryField,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsParameter(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsParameter(RepoDb.QueryField,System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsParameterAsField(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsBetweenParameter(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsBetweenParameter(RepoDb.QueryField,System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsInParameter(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsInParameter(RepoDb.QueryField,System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsFieldAndParameterForBetween(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsFieldAndParameterForBetween(RepoDb.QueryField,System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsFieldAndParameterForIn(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsFieldAndParameterForIn(RepoDb.QueryField,System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="queryField"></param>
            <param name="index"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.FunctionalQueryField">
            <summary>
            A dynamic functional-based <see cref="T:RepoDb.QueryField"/> object. This requires a properly constructed
            formatted string (for a specific database function) in order to work properly.
            </summary>
            <example>
            See sample code below that uses a TRIM function.
            <code>
                var where = new FunctionalQueryField("ColumnName", "Value", "TRIM({0})");
                var result = connection.Query&lt;Entity&gt;(where);
            </code>
            </example>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.#ctor(System.String,System.Object,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="format">The properly constructed format of the target function to be used.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.#ctor(RepoDb.Field,System.Object,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="format">The properly constructed format of the target function to be used.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.String)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="format">The properly constructed format of the target function to be used.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Object,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="format">The properly constructed format of the target function to be used.</param>
        </member>
        <member name="P:RepoDb.Extensions.QueryFields.FunctionalQueryField.Format">
            <summary>
            Gets the properly constructed format of the target function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.GetString(System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the string representations (column-value pairs) of the current <see cref="T:RepoDb.QueryField"/> object with the formatted-function transformations.
            </summary>
            <param name="index">The target index.</param>
            <param name="dbSetting">The database setting currently in used.</param>
            <returns>The string representations of the current <see cref="T:RepoDb.QueryField"/> object using the LOWER function.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.Equals(RepoDb.Extensions.QueryFields.FunctionalQueryField)">
            <summary>
            Compares the <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.op_Equality(RepoDb.Extensions.QueryFields.FunctionalQueryField,RepoDb.Extensions.QueryFields.FunctionalQueryField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.FunctionalQueryField.op_Inequality(RepoDb.Extensions.QueryFields.FunctionalQueryField,RepoDb.Extensions.QueryFields.FunctionalQueryField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Extensions.QueryFields.FunctionalQueryField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.LeftQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the LEFT function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LeftQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftQueryField.#ctor(RepoDb.Field,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LeftQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LeftQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LeftQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String,System.Int32)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="charCount">The number of characters from the left to be evaluated.</param>
        </member>
        <member name="P:RepoDb.Extensions.QueryFields.LeftQueryField.CharCount">
            <summary>
            Gets the value that defines the number of characters from the left to be evaluated.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftQueryField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Extensions.QueryFields.LeftQueryField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.LeftTrimQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the LTRIM function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftTrimQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LeftTrimQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftTrimQueryField.#ctor(RepoDb.Field,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftTrimQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LeftTrimQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.LengthQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the LENGTH function.
            This only works on PostgreSQL, MySQL and SQLite database providers.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LengthQueryField.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LengthQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LengthQueryField.#ctor(RepoDb.Field,System.Int32)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LengthQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Int32)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LengthQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Int32)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.LenQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the LEN function.
            This only works on SQL Server database provider.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LenQueryField.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LenQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LenQueryField.#ctor(RepoDb.Field,System.Int32)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LenQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Int32)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LenQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Int32)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.LowerQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the LOWER function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LowerQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.LowerQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LowerQueryField.#ctor(RepoDb.Field,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LowerQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.LowerQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.RightQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the RIGHT function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.RightQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightQueryField.#ctor(RepoDb.Field,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.RightQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.RightQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.RightQueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String,System.Int32)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="charCount">The number of characters from the right to be evaluated.</param>
        </member>
        <member name="P:RepoDb.Extensions.QueryFields.RightQueryField.CharCount">
            <summary>
            Gets the value that defines the number of characters from the right to be evaluated.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightQueryField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Extensions.QueryFields.RightQueryField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.RightTrimQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the RTRIM function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightTrimQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.RightTrimQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightTrimQueryField.#ctor(RepoDb.Field,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightTrimQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.RightTrimQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.TrimQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the TRIM function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.TrimQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.TrimQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.TrimQueryField.#ctor(RepoDb.Field,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.TrimQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.TrimQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryFields.UpperQueryField">
            <summary>
            A functional-based <see cref="T:RepoDb.QueryField"/> object that is using the UPPER function.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.UpperQueryField.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Extensions.QueryFields.UpperQueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.UpperQueryField.#ctor(RepoDb.Field,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.UpperQueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.String)">
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.Extensions.QueryFields.UpperQueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.String)">
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="T:RepoDb.Extensions.QueryGroupExtension">
            <summary>
            Contains the extension methods for <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.AsEnumerable(RepoDb.QueryGroup)">
            <summary>
            Convert an instance of query group into an enumerable list of query groups.
            </summary>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be converted.</param>
            <returns>An enumerable list of query groups.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.MapTo``1(RepoDb.QueryGroup)">
            <summary>
            Maps the current <see cref="T:RepoDb.QueryGroup"/> object to a type.
            </summary> 
            <typeparam name="TEntity">The target type where the current <see cref="T:RepoDb.QueryGroup"/> is to be mapped.</typeparam>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be mapped.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroupTypeMap"/> object that holds the mapping.</returns>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.MapTo(RepoDb.QueryGroup,System.Type)">
            <summary>
            Maps the current <see cref="T:RepoDb.QueryGroup"/> object to a type.
            </summary>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object to be mapped.</param>
            <param name="type">The target type where the current <see cref="T:RepoDb.QueryGroup"/> is to be mapped.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroupTypeMap"/> object that holds the mapping.</returns>
        </member>
        <member name="T:RepoDb.Extensions.StringExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins an array string with a given separator.
            </summary>
            <param name="strings">The enumerable list of strings.</param>
            <param name="separator">The separator to be used.</param>
            <returns>A joined string from a given array of strings separated by the defined separator.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Joins an array string with a given separator.
            </summary>
            <param name="strings">The enumerable list of strings.</param>
            <param name="separator">The separator to be used.</param>
            <param name="trim">The boolean value that indicates whether to trim each string before joining.</param>
            <returns>A joined string from a given array of strings separated by the defined separator.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsAlphaNumeric(System.String)">
            <summary>
            Removes the non-alphanumeric characters.
            </summary>
            <param name="value">The string value where the non-alphanumeric characters will be removed.</param>
            <returns>The alphanumeric string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsAlphaNumeric(System.String,System.Boolean)">
            <summary>
            Removes the non-alphanumeric characters.
            </summary>
            <param name="value">The string value where the non-alphanumeric characters will be removed.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before removing the non-alphanumeric characters.</param>
            <returns>The alphanumeric string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsUnquoted(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Unquotes a string.
            </summary>
            <param name="value">The string value to be unqouted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The unquoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsUnquoted(System.String,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Unquotes a string.
            </summary>
            <param name="value">The string value to be unqouted.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before unquoting.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The unquoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsUnquotedInternal(System.String,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Unquotes a string.
            </summary>
            <param name="value">The string value to be unqouted.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before quoting.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The unquoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuoted(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Quotes a string.
            </summary>
            <param name="value">The string value to be quoted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuoted(System.String,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Quotes a string.
            </summary>
            <param name="value">The string value to be quoted.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before quoting.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuoted(System.String,System.Boolean,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Quotes a string.
            </summary>
            <param name="value">The string value to be quoted.</param>
            <param name="trim">The boolean value that indicates whether to trim the string before quoting.</param>
            <param name="ignoreSchema">The boolean value that indicates whether to ignore the schema.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuotedForDatabaseSchemaTableInternal(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Quotes a string for database, schema and a table.
            </summary>
            <param name="value">The string value to be quoted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuotedInternal(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Quotes a string.
            </summary>
            <param name="value">The string value to be quoted.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The quoted string.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsField(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Returns the string as a field name in the database.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="dbSetting">The <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns>The string value represented as database field.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsField(System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsParameter(System.String)">
            <summary>
            Returns the string as a parameter name in the database.
            </summary>
            <param name="value">The string to be converted.</param>
            <returns>The string value represented as database parameter.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsParameter(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Returns the string as a parameter name in the database.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="dbSetting">The <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns>The string value represented as database parameter.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsParameter(System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Returns the string as a parameter name in the database.
            </summary>
            <param name="value">The string to be converted.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns>The string value represented as database parameter.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsParameter(System.String,System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="functionFormat"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsJoinQualifier(System.String,System.String,System.String,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <param name="considerNulls"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsJoinQualifierWithoutNullChecks(System.String,System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsJoinQualifierWithNullChecks(System.String,System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsAliasField(System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="alias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsParameterAsField(System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsFieldAndParameter(System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsFieldAndAliasField(System.String,System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsFields(System.Collections.Generic.IEnumerable{System.String},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsAliasFields(System.Collections.Generic.IEnumerable{System.String},System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="alias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsFieldsAndAliasFields(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="values"></param>
            <param name="leftAlias"></param>
            <param name="rightAlias"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.ThrowIfNullOrEmpty``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.ThrowIfNullOrEmpty``1(``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="argument"></param>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.ThrowIfNullOrWhiteSpace(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="argument"></param>
        </member>
        <member name="T:RepoDb.Extensions.TypeExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetDbType(System.Type)">
            <summary>
            Gets the corresponding <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="type">The target type.</param>
            <returns>The instance of the <see cref="T:System.Data.DbType"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetConstructorWithMostArguments(System.Type)">
            <summary>
            Returns the instance of <see cref="T:System.Reflection.ConstructorInfo"/> with the most argument.
            </summary>
            <param name="type">The current type.</param>
            <returns>The instance of <see cref="T:System.Reflection.ConstructorInfo"/> with the most arguments.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsObjectType(System.Type)">
            <summary>
            Checks whether the current type is of type <see cref="T:System.Object"/>.
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is a <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsClassType(System.Type)">
            <summary>
            Checks whether the current type is a class.
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is a class.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsAnonymousType(System.Type)">
            <summary>
            Checks whether the current type is an anonymous type.
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is an anonymous class.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsDictionaryStringObject(System.Type)">
            <summary>
            Checks whether the current type is of type <see cref="T:System.Collections.Generic.IDictionary`2"/> (with string/object key-value-pair).
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is of type <see cref="T:System.Collections.Generic.IDictionary`2"/> (with string/object key-value-pair).</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsNullable(System.Type)">
            <summary>
            Checks whether the current type is wrapped within a <see cref="T:System.Nullable`1"/> object.
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is wrapped within a <see cref="T:System.Nullable`1"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsPlainType(System.Type)">
            <summary>
            Checks whether the current type is a plain class type.
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is a plain class type.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsQueryObjectType(System.Type)">
            <summary>
            Checks whether the current type is of type <see cref="T:RepoDb.QueryField"/> or <see cref="T:RepoDb.QueryGroup"/>.
            </summary>
            <param name="type">The current type.</param>
            <returns>Returns true if the current type is of type <see cref="T:RepoDb.QueryField"/> or <see cref="T:RepoDb.QueryGroup"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.AsFields(System.Type)">
            <summary>
            Converts all properties of the type into an array of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="type">The current type.</param>
            <returns>A list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetEnumerableClassProperties(System.Type)">
            <summary>
            Gets the list of enumerable <see cref="T:RepoDb.ClassProperty"/> objects of the type.
            </summary>
            <param name="type">The current type.</param>
            <returns>The list of the enumerable <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetClassProperties(System.Type)">
            <summary>
            Converts all properties of the type into an array of <see cref="T:RepoDb.ClassProperty"/> objects.
            </summary>
            <param name="type">The current type.</param>
            <returns>A list of <see cref="T:RepoDb.ClassProperty"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of the current type. If there is no underlying type, this will return the current type.
            </summary>
            <param name="type">The current type to check.</param>
            <returns>The underlying type or the current type.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetMappedProperty(System.Type,System.String)">
            <summary>
            Returns the property of the type based on the mappings equality.
            </summary>
            <param name="type">The current type.</param>
            <param name="mappedName">The name of the property mapping.</param>
            <returns>The instance of <see cref="T:RepoDb.ClassProperty"/>.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetImplementedInterfaces(System.Type)">
            <summary>
            Returns the list of the interface types being implemented by the current type.
            </summary>
            <param name="type">The current type.</param>
            <returns>The list of the interface types.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.MakeGenericTypeFrom(System.Type,System.Type)">
            <summary>
            Creates a generic type of the current type based on the generic type available from the source type.
            </summary>
            <param name="currentType">The current type.</param>
            <param name="sourceType">The source type.</param>
            <returns>The newly created generic type.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsInterfacedTo(System.Type,System.Type)">
            <summary>
            Checks whether the current type has implemented the target interface.
            </summary>
            <param name="currentType">The current type.</param>
            <param name="interfaceType">The target interface type.</param>
            <returns>True if the current type has implemented the target interface.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.IsClassHandlerValidForModel(System.Type,System.Type)">
            <summary>
            Checks whether the current class handler type is valid to be used for the target model type.
            </summary>
            <param name="classHandlerType">The current class handler type type.</param>
            <param name="targetModelType">The target model type.</param>
            <returns>True if the current class handler type is valid to be used for the target model type.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetProperty``1(System.String,System.Boolean)">
            <summary>
            A helper method to return the instance of <see cref="T:System.Reflection.PropertyInfo"/> object based on name.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>An instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetProperty(System.Type,System.String,System.Boolean)">
            <summary>
            A helper method to return the instance of <see cref="T:System.Reflection.PropertyInfo"/> object based on name.
            </summary>
            <param name="type">The target .NET CLR type.</param>
            <param name="propertyName">The name of the target class property.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>An instance of <see cref="T:System.Reflection.PropertyInfo"/> object.</returns>
        </member>
        <member name="T:RepoDb.DbConnectionExtension">
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <averagemary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </averagemary>
            <averagemary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </averagemary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <summary>
            Contains the extension methods for <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
        </member>
        <member name="T:RepoDb.DbConnectionExtension.CommandArrayParametersText">
             <summary>
            
             </summary>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateCommand(System.Data.IDbConnection,System.String,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Creates a command object.
            </summary>
            <param name="connection">The connection to be used when creating a command object.</param>
            <param name="commandText">The value of the <see cref="P:System.Data.IDbCommand.CommandText"/> property.</param>
            <param name="commandType">The value of the <see cref="P:System.Data.IDbCommand.CommandType"/> property.</param>
            <param name="commandTimeout">The value of the <see cref="P:System.Data.IDbCommand.CommandTimeout"/> property.</param>
            <param name="transaction">The value of the <see cref="P:System.Data.IDbCommand.Transaction"/> property.</param>
            <returns>A command object instance containing the defined property values passed.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.EnsureOpen(System.Data.IDbConnection)">
            <summary>
            Ensures the connection object is open.
            </summary>
            <param name="connection">The connection to be opened.</param>
            <returns>The instance of the current connection object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.EnsureOpenAsync(System.Data.IDbConnection,System.Threading.CancellationToken)">
            <summary>
            Ensures the connection object is open in an asynchronous way.
            </summary>
            <param name="connection">The connection to be opened.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The instance of the current connection object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQuery(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="cancellationToken"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQuery``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of the target result type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <returns>
            An enumerable list of the target result type instances containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryInternalForDictionaryStringObject``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryInternalForType``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            converts the result back to an enumerable list of the target result type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>
            An enumerable list of the target result type instances containing the converted results of the underlying <see cref="T:System.Data.IDataReader"/> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsyncInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <param name="cache"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsyncInternalForDictionaryStringObject``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <param name="cache"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsyncInternalForType``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken,System.String,System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="cancellationToken"></param>
             <param name="tableName"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Execute the multiple SQL statements from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> used to extract the results.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryMultipleInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="isDisposeConnection"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryMultipleAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Execute the multiple SQL statements from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> used to extract the results.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryMultipleAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="isDisposeConnection"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns><returns>The instance of the <see cref="T:System.Data.IDataReader"/> object.</returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/> and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns><returns>The instance of the <see cref="T:System.Data.IDataReader"/> object.</returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected rows during the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <returns>The number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteNonQuery"/> and
            returns the number of affected rows during the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryAsyncInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <returns>An object that holds the first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An object that holds the first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache)">
            <summary>
            Executes a SQL statement from the database. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <returns>A first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken)">
            <summary>
            Executes a SQL statement from the database in an asynchronous way. It uses the underlying method of <see cref="M:System.Data.IDbCommand.ExecuteScalar"/> and
            returns the first occurrence value (first column of first row) of the execution.
            </summary>
            <typeparam name="TResult">The target return type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandText">The command text to be used.</param>
            <param name="param">
            The parameters/values defined in the <see cref="P:System.Data.IDbCommand.CommandText"/> property. Supports a dynamic object, <see cref="T:System.Collections.Generic.IDictionary`2"/>,
            <see cref="T:System.Dynamic.ExpandoObject"/>, <see cref="T:RepoDb.QueryField"/>, <see cref="T:RepoDb.QueryGroup"/> and an enumerable of <see cref="T:RepoDb.QueryField"/> objects.
            </param>
            <param name="commandType">The command type to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A first occurrence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsyncInternal``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,System.Threading.CancellationToken,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="cacheKey"></param>
             <param name="cacheItemExpiration"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cache"></param>
             <param name="cancellationToken"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetDbSetting(System.Data.IDbConnection)">
            <summary>
            Gets the associated <see cref="T:RepoDb.Interfaces.IDbSetting"/> object that is currently mapped on the target <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <returns>An instance of the mapped <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetDbHelper(System.Data.IDbConnection)">
            <summary>
            Gets the associated <see cref="T:RepoDb.Interfaces.IDbHelper"/> object that is currently mapped on the target <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <returns>An instance of the mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetStatementBuilder(System.Data.IDbConnection)">
            <summary>
            Gets the associated <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object that is currently mapped on the target <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <returns>An instance of the mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ThrowMissingMappingException(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="connectionType"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SetOutputParameters(System.Object)">
             <summary>
            
             </summary>
             <param name="param"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SetOutputParameters(RepoDb.QueryGroup)">
             <summary>
            
             </summary>
             <param name="queryGroup"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SetOutputParameters(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
             <summary>
            
             </summary>
             <param name="queryFields"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SetOutputParameter(RepoDb.QueryField)">
             <summary>
            
             </summary>
             <param name="queryField"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AddOrderColumnParameters``1(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{``0})">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="command"></param>
             <param name="entities"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="connection"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Type)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="transaction"></param>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKeyAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="connection"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKeyAsync``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKeyAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Type,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="transaction"></param>
             <param name="entityType"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey(System.String,RepoDb.Field)">
             <summary>
            
             </summary>
             <param name="tableName"></param>
             <param name="field"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey(System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey(System.Data.IDbConnection,System.String,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKeyAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetAndGuardPrimaryKeyOrIdentityKey(System.String,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="tableName"></param>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroup``1(System.Data.IDbConnection,System.String,``0,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="what"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroupAsync``1(System.Data.IDbConnection,System.String,``0,System.Data.IDbTransaction,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="connection"></param>
             <param name="tableName"></param>
             <param name="what"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroup``1(System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="tableName"></param>
             <param name="what"></param>
             <param name="dbFields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroup``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="connection"></param>
             <param name="what"></param>
             <param name="transaction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroupAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Threading.CancellationToken)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="connection"></param>
             <param name="what"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroup``1(RepoDb.DbField,``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="dbField"></param>
             <param name="what"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroup``1(RepoDb.Field,``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="field"></param>
             <param name="what"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhatToQueryGroup``1(``0)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="what"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(RepoDb.DbField,System.Object)">
             <summary>
            
             </summary>
             <param name="dbField"></param>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="where"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(RepoDb.Field,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
            
             </summary>
             <param name="field"></param>
             <param name="dictionary"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup``1(RepoDb.Field,``0)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="field"></param>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup``1(RepoDb.ClassProperty,``0)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="property"></param>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(RepoDb.QueryField)">
             <summary>
            
             </summary>
             <param name="queryField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToQueryGroup(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
             <summary>
            
             </summary>
             <param name="queryFields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetPrimaryOrIdentityKey(System.Type)">
             <summary>
            
             </summary>
             <param name="entityType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="entities"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ValidateTransactionConnectionObject(System.Data.IDbConnection,System.Data.IDbTransaction)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="transaction"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhereToCommandParameters(System.Data.Common.DbCommand,RepoDb.QueryGroup,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="command"></param>
             <param name="where"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateQueryGroupForUpsert(System.Object,System.Collections.Generic.IEnumerable{RepoDb.ClassProperty},System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="entity"></param>
             <param name="properties"></param>
             <param name="qualifiers"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateQueryGroupForUpsert(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <param name="dictionary"></param>
             <param name="qualifiers"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExtractPropertyValues``2(System.Collections.Generic.IEnumerable{``0},RepoDb.ClassProperty)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <typeparam name="TResult"></typeparam>
             <param name="entities"></param>
             <param name="property"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetQualifiedFields``1(``0)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetQualifiedFields``1(System.Collections.Generic.IEnumerable{RepoDb.Field})">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetQualifiedFields``1(System.Collections.Generic.IEnumerable{RepoDb.Field},``0)">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="fields"></param>
             <param name="entity"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ToRawSqlWithArrayParams(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="parameterName"></param>
             <param name="values"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateDbCommandForExecution(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateDbCommandForExecutionAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Threading.CancellationToken,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="cancellationToken"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateDbCommandForExecutionInternal(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Boolean)">
             <summary>
            
             </summary>
             <param name="connection"></param>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="commandType"></param>
             <param name="commandTimeout"></param>
             <param name="transaction"></param>
             <param name="entityType"></param>
             <param name="dbFields"></param>
             <param name="skipCommandArrayParametersCheck"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParametersText(System.String,System.Object,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParametersTextInternal(System.String,System.Object,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="param"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParametersText(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="dictionary"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParametersText(System.String,RepoDb.QueryField,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="queryField"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParametersText(System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="queryFields"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParametersText(System.String,RepoDb.QueryGroup,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="queryGroup"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetCommandArrayParameter(System.String,System.Object)">
             <summary>
            
             </summary>
             <param name="parameterName"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.GetRawSqlText(System.String,System.String,System.Collections.IEnumerable,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="parameterName"></param>
             <param name="values"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.IsPreConstructed(System.String,RepoDb.QueryField)">
             <summary>
            
             </summary>
             <param name="commandText"></param>
             <param name="queryField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsyncInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Average``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.AverageRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.AverageRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.AverageRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.AverageRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAll``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAll``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAll``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAll``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsync``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsync``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAll(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAll``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.AverageAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <averagemary>
            Computes the average value of the target field.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.AverageAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.AverageAllAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.AverageAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <averagemary>
            Computes the average value of the target field in an asynchronous way.
            </averagemary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.AverageAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The average value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryInternal``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsyncInternal``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryInternalBase``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the rows from the database by batch.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the rows from the database by batch in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="page">The page of the batch to be used. This is a zero-based index (the first page is 0).</param>
            <param name="rowsPerBatch">The number of data per batch to be returned.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsyncInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountInternalBase(System.Data.IDbConnection,RepoDb.Requests.CountRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.CountRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAll``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternal``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsync``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsyncInternal``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAll(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsync(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsyncInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllInternalBase(System.Data.IDbConnection,RepoDb.Requests.CountAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Count the number of rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAllAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.CountAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Count the number of rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.CountAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An integer value that holds the number of rows from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,``0,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing row from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``2(System.Data.IDbConnection,``1,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,``0,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing row from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``2(System.Data.IDbConnection,``1,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsyncInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.String,``0,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing row from the table.
            </summary>
            <typeparam name="TWhat">The type of the data entity, the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes an existing row from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.String,``0,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing row from the table in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing row from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The data entity object, the dynamic expression or the key value to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``1},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``2(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``1},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternal``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``2(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``1},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``2(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``1},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TKey">The type of the key column.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternal``1(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternal(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Delete the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternal(System.Data.IDbConnection,System.String,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternal(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="keys">The list of the keys to be deleted.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteAllRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.DeleteAllRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Delete all the rows from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows that has been deleted from the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``2(System.Data.IDbConnection,``1,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``1(System.Data.IDbConnection,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``2(System.Data.IDbConnection,``1,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsyncInternal``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists``1(System.Data.IDbConnection,System.String,``0,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Exists(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync``1(System.Data.IDbConnection,System.String,``0,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync(System.Data.IDbConnection,System.String,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsync(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsInternalBase(System.Data.IDbConnection,RepoDb.Requests.ExistsRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Check whether the rows are existing in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.ExistsRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExistsAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.ExistsRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Check whether the rows are existing in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.ExistsRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A boolean value that indicates whether the rows are existing in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertInternal``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsyncInternal``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table (certain fields only).
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertInternalBase``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row in the table.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsyncInternalBase``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be inserted.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity objects.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity objects.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity objects.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsyncInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity or dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAllAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity or dynamic objects to be inserted.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of inserted rows in the table.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsyncInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Max``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MaxRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MaxRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MaxRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MaxRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAll``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAll``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAll``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAll``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsync``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsync``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAll(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAll``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MaxAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Computes the max value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MaxAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MaxAllAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MaxAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Computes the max value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MaxAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The max value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``2(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeInternal``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,System.String,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,``0,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifier">The field to be used during merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``2(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsyncInternal``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Inserts a new row or updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a dynamic object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge(System.Data.IDbConnection,System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a dynamic object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a dynamic object into an existing data in the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a dynamic object into an existing data in the database.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a dynamic object into an existing data in the database.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a dynamic object into an existing data in the database.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync(System.Data.IDbConnection,System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,System.Object,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeInternalBase``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data entity or dynamic object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpsertInternalBase``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Upserts a data entity or dynamic object into an existing data in the database.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsyncInternalBase``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges a data entity or dynamic object into an existing data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpsertAsyncInternalBase``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Upserts a data entity or dynamic object into an existing data in the database in an .
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <typeparam name="TResult">The target type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The value of the identity field if present, otherwise, the value of the primary field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifier">The qualifier field to be used during merge operation.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert multiple rows or update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifier">The field to be used during merge operation.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifier">The field to be used during merge operation.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsyncInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Insert multiple rows or update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Insert the multiple dynamic objects (as new rows) or update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges the multiple dynamic objects into the database in an asynchronous way. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges the multiple dynamic objects into the database in an asynchronous way. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="qualifier">The qualifier field to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges the multiple dynamic objects into the database in an asynchronous way. By default, the table fields are used unless the 'fields' argument is explicitly defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of dynamic objects to be merged.</param>
            <param name="qualifiers">The qualifier <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges the multiple data entity or dynamic objects into the database.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity or dynamic object to be merged.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpsertAllInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Upserts the multiple data entity or dynamic objects into the database.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity or dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAllAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Merges the multiple data entity or dynamic objects into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity or dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpsertAllAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Upserts the multiple data entity or dynamic objects into the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The data entity or dynamic object to be merged.</param>
            <param name="qualifiers">The list of qualifier fields to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the merge process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsyncInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Min``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MinRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MinRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MinRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MinRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAll``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAll``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAll``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAll``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsync``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsync``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAll(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAll``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MinAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Computes the min value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MinAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MinAllAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.MinAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Computes the min value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.MinAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The min value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``2(System.Data.IDbConnection,System.String,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``2(System.Data.IDbConnection,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryInternal``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``2(System.Data.IDbConnection,System.String,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``2(System.Data.IDbConnection,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="what">The dynamic expression or the primary/identity key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync(System.Data.IDbConnection,System.String,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryInternalBase``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the existing rows from the table based on a given expression.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item. By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsyncInternalBase``1(System.Data.IDbConnection,System.String,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the existing rows from the table based on a given expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="where">The query expression to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="connection">The connection object to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsyncInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllInternal(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsyncInternal(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAllAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query all the data from the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="tableName">The name of the target table.</param>
            <param name="connection">The connection object to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="orderBy">The order definition of the fields to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="cacheKey">
            The key to the cache item.By setting this argument, it will return the item from the cache if present, otherwise it will query the database.
            This will only work if the 'cache' argument is set.
            </param>
            <param name="cacheItemExpiration">The expiration in minutes of the cache item.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="cache">The cache object to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An enumerable list of data entity objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 2 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``2(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 2 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``3(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 4 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``4(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 5 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``5(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 5 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 6 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``6(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 6 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultiple``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 7 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The number of rows to be returned (at T7).</param>
            <param name="hints7">The table hints to be used (at T7).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleInternal``7(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 7 target types.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The number of rows to be returned (at T7).</param>
            <param name="hints7">The table hints to be used (at T7).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``2(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 2 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 2 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``3(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 3 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 4 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``4(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 3 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 4 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``5(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 5 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 5 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``6(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 6 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 6 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsync``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The number of rows to be returned (at T7).</param>
            <param name="hints7">The table hints to be used (at T7).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryMultipleAsyncInternal``7(System.Data.IDbConnection,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Query the data as multiple resultsets from the table based on the given 7 target types in an asynchronous way.
            </summary>
            <typeparam name="T1">The first target type.</typeparam>
            <typeparam name="T2">The second target type.</typeparam>
            <typeparam name="T3">The third target type.</typeparam>
            <typeparam name="T4">The fourth target type.</typeparam>
            <typeparam name="T5">The fifth target type.</typeparam>
            <typeparam name="T6">The sixth target type.</typeparam>
            <typeparam name="T7">The seventh target type.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="where1">The query expression to be used (at T1).</param>
            <param name="where2">The query expression to be used (at T2).</param>
            <param name="where3">The query expression to be used (at T3).</param>
            <param name="where4">The query expression to be used (at T4).</param>
            <param name="where5">The query expression to be used (at T5).</param>
            <param name="where6">The query expression to be used (at T6).</param>
            <param name="where7">The query expression to be used (at T7).</param>
            <param name="orderBy1">The order definition of the fields to be used (at T1).</param>
            <param name="top1">The number of rows to be returned (at T1).</param>
            <param name="hints1">The table hints to be used (at T1).</param>
            <param name="orderBy2">The order definition of the fields to be used (at T2).</param>
            <param name="top2">The number of rows to be returned (at T2).</param>
            <param name="hints2">The table hints to be used (at T2).</param>
            <param name="orderBy3">The order definition of the fields to be used (at T3).</param>
            <param name="top3">The number of rows to be returned (at T3).</param>
            <param name="hints3">The table hints to be used (at T3).</param>
            <param name="orderBy4">The order definition of the fields to be used (at T4).</param>
            <param name="top4">The number of rows to be returned (at T4).</param>
            <param name="hints4">The table hints to be used (at T4).</param>
            <param name="orderBy5">The order definition of the fields to be used (at T5).</param>
            <param name="top5">The number of rows to be returned (at T5).</param>
            <param name="hints5">The table hints to be used (at T5).</param>
            <param name="orderBy6">The order definition of the fields to be used (at T6).</param>
            <param name="top6">The number of rows to be returned (at T6).</param>
            <param name="hints6">The table hints to be used (at T6).</param>
            <param name="orderBy7">The order definition of the fields to be used (at T7).</param>
            <param name="top7">The number of rows to be returned (at T7).</param>
            <param name="hints7">The table hints to be used (at T7).</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A tuple of 7 enumerable target data entity types.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsyncInternal``1(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,RepoDb.QueryGroup,System.Nullable{System.Int32},System.String,System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Sum``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsyncInternal(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Object,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The dynamic expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryField,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.SumRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.SumRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.SumRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.SumRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAll``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAll``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAll``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAll``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsync``1(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsync``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsync``2(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsyncInternal``2(System.Data.IDbConnection,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAll(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAll``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsync(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsync``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsyncInternal``1(System.Data.IDbConnection,System.String,RepoDb.Field,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.SumAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Computes the sum value of the target field.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.SumAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.SumAllAsyncInternalBase``1(System.Data.IDbConnection,RepoDb.Requests.SumAllRequest,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Computes the sum value of the target field in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.SumAllRequest"/> object.</param>
            <param name="param">The mapped object parameters.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The sum value of the target field.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Truncate``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsyncInternal``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Truncate(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateInternal(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsync(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsyncInternal(System.Data.IDbConnection,System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateInternalBase(System.Data.IDbConnection,RepoDb.Requests.TruncateRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Truncates a table from the database.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsyncInternalBase(System.Data.IDbConnection,RepoDb.Requests.TruncateRequest,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,System.Threading.CancellationToken)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="request">The actual <see cref="T:RepoDb.Requests.TruncateRequest"/> object.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``2(System.Data.IDbConnection,System.String,``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,System.String,``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``2(System.Data.IDbConnection,``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateInternal``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``2(System.Data.IDbConnection,System.String,``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,System.String,``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``2(System.Data.IDbConnection,``0,``1,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TWhat">The type of the expression or the key value.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="what">The dynamic expression or the key value to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsyncInternal``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync(System.Data.IDbConnection,System.String,System.Object,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The dynamic object to be used for update.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateInternalBase``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsyncInternalBase``1(System.Data.IDbConnection,System.String,``0,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Updates an existing row in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entity">The data entity or dynamic object to be updated.</param>
            <param name="where">The query expression to be used.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The expression for the qualifier fields.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsyncInternal``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAll(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},RepoDb.Field,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifier">The qualifier <see cref="T:RepoDb.Field"/> object to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way. By default, the table fields are used unless the 'fields' argument is defined.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="entities">The list of dynamic objects to be used for update.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects to be used for update.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Update the existing rows in the table.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity or dynamic objects to be updated.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be updated.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAllAsyncInternalBase``1(System.Data.IDbConnection,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Threading.CancellationToken)">
            <summary>
            Update the existing rows in the table in an asynchronous way.
            </summary>
            <param name="connection">The connection object to be used.</param>
            <typeparam name="TEntity">The type of the object (whether a data entity or a dynamic).</typeparam>
            <param name="tableName">The name of the target table to be used.</param>
            <param name="entities">The list of data entity or dynamic objects to be updated.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="fields">The list of <see cref="T:RepoDb.Field"/> objects to be updated.</param>
            <param name="hints">The table hints to be used.</param>
            <param name="commandTimeout">The command timeout in seconds to be used.</param>
            <param name="transaction">The transaction to be used.</param>
            <param name="trace">The trace object to be used.</param>
            <param name="statementBuilder">The statement builder object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The number of affected rows during the update process.</returns>
        </member>
        <member name="T:RepoDb.Field">
            <summary>
            An object that is used to signify a field in the query statement. It is also used as a common object in relation to the context of field object.
            </summary>
        </member>
        <member name="M:RepoDb.Field.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="M:RepoDb.Field.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The type of the field.</param>
        </member>
        <member name="P:RepoDb.Field.Name">
            <summary>
            Gets the quoted name of the field.
            </summary>
        </member>
        <member name="P:RepoDb.Field.Type">
            <summary>
            Gets or sets the type of the field.
            </summary>
        </member>
        <member name="M:RepoDb.Field.ToString">
            <summary>
            Stringify the current field object.
            </summary>
            <returns>The string value equivalent to the name of the field.</returns>
        </member>
        <member name="M:RepoDb.Field.From(System.String)">
            <summary>
            Creates an enumerable of <see cref="T:RepoDb.Field"/> objects that derived from the string value.
            </summary>
            <param name="name">The enumerable of string values that signifies the name of the fields (for each item).</param>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Field.From(System.String[])">
            <summary>
            Creates an enumerable of <see cref="T:RepoDb.Field"/> objects that derived from the given array of string values.
            </summary>
            <param name="fields">The enumerable of string values that signifies the name of the fields (for each item).</param>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse(System.Object)">
            <summary>
            Parses an object and creates an enumerable of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="obj">An object to be parsed.</param>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1">
            <summary>
            Parses an object and creates an enumerable of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse(System.Type)">
            <summary>
            Parses a type and creates an enumerable of <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <returns>An enumerable of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.ParseDictionaryStringObject(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.Field"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.Field"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <typeparam name="TResult">The type of the result and the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.UnaryExpression"/> and converts the result 
            to <see cref="T:RepoDb.Field"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.MemberExpression"/> and converts the result 
            to <see cref="T:RepoDb.Field"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.BinaryExpression"/> and converts the result 
            to <see cref="T:RepoDb.Field"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse``1(System.Linq.Expressions.NewExpression)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.NewExpression"/> and converts the result 
            to <see cref="T:RepoDb.Field"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.Field"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Field.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Field"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Field.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Field"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Field.Equals(RepoDb.Field)">
            <summary>
            Compares the <see cref="T:RepoDb.Field"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Field.op_Equality(RepoDb.Field,RepoDb.Field)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Field"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Field"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Field.op_Inequality(RepoDb.Field,RepoDb.Field)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Field"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Field"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Field"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.ICache">
            <summary>
            An interface that is used to mark a class to be a caching class object.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Add``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <typeparam name="T">The type of the cache item value.</typeparam>
            <param name="key">The key to the cache.</param>
            <param name="value">The value of the cache.</param>
            <param name="expiration">The expiration in minutes of the cache item.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Add``1(RepoDb.CacheItem{``0},System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <typeparam name="T">The type of the cache item value.</typeparam>
            <param name="item">The cache item to be added in the collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Clear">
            <summary>
            Clears the collection of the cache.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Contains(System.String)">
            <summary>
            Checks whether the key is present in the collection.
            </summary>
            <param name="key">The name of the key to be checked.</param>
            <returns>A boolean value that signifies the presence of the key from the collection.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Get``1(System.String,System.Boolean)">
            <summary>
            Gets an object from the cache collection.
            </summary>
            <typeparam name="T">The type of the cache item value.</typeparam>
            <param name="key">The key of the cache object to be retrieved.</param>
            <returns>A cached item object from the cache collection based on the given key.</returns>
            <param name="throwException">Throws an exception if the item is not found.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Remove(System.String,System.Boolean)">
            <summary>
            Removes the item from the cache collection.
            </summary>
            <param name="key">The key of the item to be removed from the cache collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to remove an item.</param>
        </member>
        <member name="T:RepoDb.Interfaces.IClassHandler`1">
            <summary>
            An interface that is used to mark a class to be a class handler.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="M:RepoDb.Interfaces.IClassHandler`1.Get(`0,System.Data.Common.DbDataReader)">
            <summary>
            The method that is being invoked when the outbound execution is triggered (i.e.: BatchQuery, ExecuteQuery and Query).
            </summary>
            <param name="entity">The current instance of data entity object.</param>
            <param name="reader">The instance of <see cref="T:System.Data.Common.DbDataReader"/> in used to populate the data entity object.</param>
            <returns>The current or the newly created instance data entity object.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IClassHandler`1.Set(`0)">
            <summary>
            The method that is being invoked when the inbound execution is triggered (i.e.: Insert, Update and Merge).
            </summary>
            <param name="entity">The current instance of data entity object.</param>
            <returns>The current or the newly created instance data entity object.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IDbHelper">
            <summary>
            An interface that is used to mark a class be a database helper object.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbHelper.DbTypeResolver">
            <summary>
            Gets the type resolver used by this <see cref="T:RepoDb.Interfaces.IDbHelper"/> instance.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.IDbHelper.GetFields(System.Data.IDbConnection,System.String,System.Data.IDbTransaction)">
            <summary>
            Gets the list of <see cref="T:RepoDb.DbField"/> objects of the table.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <returns>A list of <see cref="T:RepoDb.DbField"/> of the target table.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IDbHelper.GetFieldsAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Gets the list of <see cref="T:RepoDb.DbField"/> objects of the table in an asynchronous way.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>A list of <see cref="T:RepoDb.DbField"/> of the target table.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IDbHelper.GetScopeIdentity(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Gets the newly generated identity from the database.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <returns>The newly generated identity from the database.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IDbHelper.GetScopeIdentityAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Gets the newly generated identity from the database in an asynchronous way.
            </summary>
            <param name="connection">The instance of the connection object.</param>
            <param name="transaction">The transaction object that is currently in used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>The newly generated identity from the database.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IDbSetting">
            <summary>
            An interface that is used to mark a class to be a database setting object.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.AreTableHintsSupported">
            <summary>
            Gets the value that indicates whether the table hints are supported.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.AverageableType">
            <summary>
            Gets the default averageable .NET CLR types for the database.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.ClosingQuote">
            <summary>
            Gets the character used for closing quote.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.DefaultSchema">
            <summary>
            Gets the default schema of the database.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.IsDirectionSupported">
            <summary>
            Gets a value that indicates whether setting the value of <see cref="P:System.Data.Common.DbParameter.Direction"/> object is supported.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.IsExecuteReaderDisposable">
            <summary>
            Gets a value that indicates whether the <see cref="T:System.Data.Common.DbCommand"/> object must be disposed after calling the <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/> method.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.IsMultiStatementExecutable">
            <summary>
            Gets a value whether the multiple statement execution is supported.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.IsPreparable">
            <summary>
            Gets a value that indicates whether the current DB Provider supports the <see cref="M:System.Data.Common.DbCommand.Prepare"/> calls.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.IsUseUpsert">
            <summary>
            Gets a value that indicates whether the Insert/Update operation will be used for Merge operation.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.OpeningQuote">
            <summary>
            Gets the character used for opening quote.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.ParameterPrefix">
            <summary>
            Gets the character used for the database command parameter prefixing.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IDbSetting.SchemaSeparator">
            <summary>
            Gets the character (or string) used for dot notation.
            </summary>
        </member>
        <member name="T:RepoDb.Interfaces.IExpirable">
            <summary>
            An interface that is used to mark a class to be expirable.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IExpirable.CreatedDate">
            <summary>
            Gets the created timestamp of this class.
            </summary>
        </member>
        <member name="P:RepoDb.Interfaces.IExpirable.Expiration">
            <summary>
            Gets or sets the expiration date of this class.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.IExpirable.IsExpired">
            <summary>
            Identifies whether this class is expired.
            </summary>
            <returns>A boolean value that indicate whether this class is expired.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IPropertyHandler`2">
            <summary>
            An interface that is used to mark a class to be a property handler.
            </summary>
            <typeparam name="TInput">Usually refers to the type of the database column. The input type for the getter; the output type for the setter.</typeparam>
            <typeparam name="TResult">Usually refers to the type of the data entity type property. The input type for the setter; the output type for the getter.</typeparam>
        </member>
        <member name="M:RepoDb.Interfaces.IPropertyHandler`2.Get(`0,RepoDb.ClassProperty)">
            <summary>
            The method that is being invoked when the outbound transformation is triggered (i.e.: BatchQuery, ExecuteQuery and Query).
            </summary>
            <param name="input">The input value.</param>
            <param name="property">The property in the current execution context.</param>
            <returns>An instance of the TResult generic type.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IPropertyHandler`2.Set(`1,RepoDb.ClassProperty)">
            <summary>
            The method that is being invoked when the inbound transformation is triggered (i.e.: Insert, Merge and Update).
            </summary>
            <param name="input">The input value.</param>
            <param name="property">The property in the current execution context.</param>
            <returns>An instance of the TInput generic type.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`1">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`1.Resolve">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`2">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput">The type of the input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`2.Resolve(`0)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input">The input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`3">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput1">The type of the first input value.</typeparamref>
            <typeparamref name="TInput2">The type of the second input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`3.Resolve(`0,`1)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input1">The first input value.</param>
            <param name="input2">The second input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`4">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput1">The type of the first input value.</typeparamref>
            <typeparamref name="TInput2">The type of the second input value.</typeparamref>
            <typeparamref name="TInput3">The type of the third input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`4.Resolve(`0,`1,`2)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input1">The first input value.</param>
            <param name="input2">The second input value.</param>
            <param name="input3">The third input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`5">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput1">The type of the first input value.</typeparamref>
            <typeparamref name="TInput2">The type of the second input value.</typeparamref>
            <typeparamref name="TInput3">The type of the third input value.</typeparamref>
            <typeparamref name="TInput4">The type of the fourth input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`5.Resolve(`0,`1,`2,`3)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input1">The first input value.</param>
            <param name="input2">The second input value.</param>
            <param name="input3">The third input value.</param>
            <param name="input4">The fourth input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`6">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput1">The type of the first input value.</typeparamref>
            <typeparamref name="TInput2">The type of the second input value.</typeparamref>
            <typeparamref name="TInput3">The type of the third input value.</typeparamref>
            <typeparamref name="TInput4">The type of the fourth input value.</typeparamref>
            <typeparamref name="TInput5">The type of the firth input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`6.Resolve(`0,`1,`2,`3,`4)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input1">The first input value.</param>
            <param name="input2">The second input value.</param>
            <param name="input3">The third input value.</param>
            <param name="input4">The fourth input value.</param>
            <param name="input5">The fifth input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`7">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput1">The type of the first input value.</typeparamref>
            <typeparamref name="TInput2">The type of the second input value.</typeparamref>
            <typeparamref name="TInput3">The type of the third input value.</typeparamref>
            <typeparamref name="TInput4">The type of the fourth input value.</typeparamref>
            <typeparamref name="TInput5">The type of the firth input value.</typeparamref>
            <typeparamref name="TInput6">The type of the sixth input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`7.Resolve(`0,`1,`2,`3,`4,`5)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input1">The first input value.</param>
            <param name="input2">The second input value.</param>
            <param name="input3">The third input value.</param>
            <param name="input4">The fourth input value.</param>
            <param name="input5">The fifth input value.</param>
            <param name="input6">The sixth input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IResolver`8">
            <summary>
            An interfaced that is used to mark a class to be a resolver.
            </summary>
            <typeparamref name="TInput1">The type of the first input value.</typeparamref>
            <typeparamref name="TInput2">The type of the second input value.</typeparamref>
            <typeparamref name="TInput3">The type of the third input value.</typeparamref>
            <typeparamref name="TInput4">The type of the fourth input value.</typeparamref>
            <typeparamref name="TInput5">The type of the firth input value.</typeparamref>
            <typeparamref name="TInput6">The type of the sixth input value.</typeparamref>
            <typeparamref name="TInput7">The type of the sixth input value.</typeparamref>
            <typeparamref name="TResult">The type of the result value.</typeparamref>
        </member>
        <member name="M:RepoDb.Interfaces.IResolver`8.Resolve(`0,`1,`2,`3,`4,`5,`5)">
            <summary>
            Resolves an input value to a target result type.
            </summary>
            <param name="input1">The first input value.</param>
            <param name="input2">The second input value.</param>
            <param name="input3">The third input value.</param>
            <param name="input4">The fourth input value.</param>
            <param name="input5">The fifth input value.</param>
            <param name="input6">The sixth input value.</param>
            <param name="input7">The seventh input value.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IStatementBuilder">
            <summary>
            An interface that is used to mark a class to be a statement builder object. The statement builder is an object that is being mapped and/or injected into the repositories to be used for
            composing the SQL Statements. Implement this interface if the caller would likely to support the different statement building approach, or by supporting the other data providers.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateAverage(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Average' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for average operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateAverageAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'AverageAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for average-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateBatchQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'BatchQuery' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for batch query operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateCount(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Count' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for count operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateCountAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for 'CountAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for count-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateDelete(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Delete' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for delete operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateDeleteAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for 'DeleteAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for delete-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateExists(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Exists' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for exists operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'Insert' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInsertAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'InsertAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMax(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Max' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for maximum operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMaxAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'MaxAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for maximum-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'Merge' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMergeAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'MergeAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for update-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMin(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Min' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for minimum operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMinAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'MinAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for minimum-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a SQL Statement for 'Query' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateQueryAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String)">
            <summary>
            Creates a SQL Statement for 'QueryAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateSum(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Sum' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for sum operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateSumAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'SumAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for sum-all operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateTruncate(RepoDb.QueryBuilder,System.String)">
            <summary>
            Creates a SQL Statement for 'Truncate' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A sql statement for truncate operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateUpdate(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'Update' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="where">The query expression.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for update operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateUpdateAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'UpdateAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for update-all operation.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.ITrace">
            <summary>
            An interface that is used to mark a class to be usable for tracing the operations. A trace object is being used to provide an auditing and debugging capability when executing the actual operation.
            The caller can modify the SQL Statements or the parameters being passed prior the actual execution, or even cancel the prior-execution.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeAverage(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Average' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Average' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterAverage(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Average' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Average' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeAverageAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'AverageAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the AverageAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterAverageAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual AverageAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'AverageAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeBatchQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'BatchQuery' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the BatchQuery' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterBatchQuery(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual BatchQuery' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'BatchQuery' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeCount(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Count' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Count' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterCount(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Count' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Count' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeCountAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'CountAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the CountAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterCountAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual CountAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'CountAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeDelete(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Delete' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Delete' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterDelete(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Delete' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Delete' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeDeleteAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'DeleteAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the DeleteAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterDeleteAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual DeleteAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'DeleteAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExists(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Exists' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Exists' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExists(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Exists' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Exists' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteNonQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'ExecuteNonQuery' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the ExecuteNonQuery' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteNonQuery(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual ExecuteNonQuery' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'ExecuteNonQuery' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'ExecuteQuery' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the ExecuteQuery' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteQuery(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual ExecuteQuery' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'ExecuteQuery' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteReader(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'ExecuteReader' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the ExecuteReader' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteReader(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual ExecuteReader' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'ExecuteReader' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteScalar(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'ExecuteScalar' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the ExecuteScalar' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteScalar(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual ExecuteScalar' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'ExecuteScalar' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInsert(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Insert' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Insert' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInsert(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Insert' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Insert' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInsertAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'InsertAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the InsertAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInsertAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual InsertAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'InsertAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMax(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Max' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Max' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMax(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Max' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Max' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMaxAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'MaxAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the MaxAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMaxAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual MaxAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'MaxAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMerge(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Merge' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Merge' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMerge(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Merge' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Merge' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMergeAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'MergeAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the MergeAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMergeAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual MergeAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'MergeAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMin(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Min' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Min' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMin(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Min' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Min' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMinAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'MinAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the MinAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMinAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual MinAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'MinAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Query' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Query' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQuery(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Query' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Query' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQueryAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'QueryAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the QueryAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQueryAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual QueryAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'QueryAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQueryMultiple(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'QueryMultiple' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the QueryMultiple' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQueryMultiple(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual QueryMultiple' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'QueryMultiple' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeSum(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Sum' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Sum' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterSum(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Sum' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Sum' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeSumAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'SumAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the SumAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterSumAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual SumAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'SumAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeTruncate(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Truncate' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Truncate' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterTruncate(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Truncate' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Truncate' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeUpdate(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'Update' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the Update' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterUpdate(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual Update' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'Update' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeUpdateAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method that is being raised before the actual 'UpdateAll' operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the UpdateAll' execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterUpdateAll(RepoDb.TraceLog)">
            <summary>
            A method that is being raised after the actual UpdateAll' operation execution.
            </summary>
            <param name="log">The log object referenced by the 'UpdateAll' execution.</param>
        </member>
        <member name="T:RepoDb.ClassHandlerMapper">
            <summary>
            A class that is being used to map a .NET CLR type into a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Add``2(System.Boolean)">
            <summary>
            Adds a mapping between a class and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <typeparam name="TClassHandler">The type of the handler.</typeparam>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Add``2(``1,System.Boolean)">
            <summary>
            Adds a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <typeparam name="TClassHandler">The type of the handler.</typeparam>
            <param name="classHandler">The instance of the class handler. The type must implement the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> interface.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Add(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object.
            </summary>
            <param name="type">The target .NET CLR type.</param>
            <param name="classHandler">The instance of the class handler. The type must implement the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> interface.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Get``2">
            <summary>
            Get the existing mapped class handler of the .NET CLR type.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <typeparam name="TClassHandler">The type of the handler.</typeparam>
            <returns>An instance of mapped class handler for .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Get``1(System.Type)">
            <summary>
            Get the existing mapped class handler of the .NET CLR type.
            </summary>
            <typeparam name="TClassHandler">The type of the handler.</typeparam>
            <param name="type">The target .NET CLR type.</param>
            <returns>An instance of mapped class handler for .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Remove``1">
            <summary>
            Removes the existing mapped class handler of the .NET CLR type.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Remove(System.Type)">
            <summary>
            Removes the existing mapped class handler of the .NET CLR type.
            </summary>
            <param name="type">The target .NET CLR type.</param>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Clear">
            <summary>
            Clears all the existing cached <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.ClassHandlerMapper.Guard(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:RepoDb.ClassMapper">
            <summary>
            A class that is being used to map a class into its equivalent database object (ie: Table, View). This is an alternative class to <see cref="T:RepoDb.Attributes.MapAttribute"/> object for class mapping.
            </summary>
        </member>
        <member name="M:RepoDb.ClassMapper.Add``1(System.String)">
            <summary>
            Adds a mapping between a .NET CLR type and a database object (i.e.: Table, View).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="name">The name of the database object (ie: Table, View).</param>
        </member>
        <member name="M:RepoDb.ClassMapper.Add``1(System.String,System.Boolean)">
            <summary>
            Adds a mapping between a .NET CLR type and a database object (i.e.: Table, View).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="name">The name of the database object (ie: Table, View).</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.ClassMapper.Add(System.Type,System.String)">
            <summary>
            Adds a mapping between a .NET CLR type and a database object (i.e.: Table, View).
            </summary>
            <param name="type">The target type.</param>
            <param name="name">The name of the database object (ie: Table, View).</param>
        </member>
        <member name="M:RepoDb.ClassMapper.Add(System.Type,System.String,System.Boolean)">
            <summary>
            Adds a mapping between a .NET CLR type and a database object (i.e.: Table, View).
            </summary>
            <param name="type">The target type.</param>
            <param name="name">The name of the database object (ie: Table, View).</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.ClassMapper.Get``1">
            <summary>
            Get the existing mapped database object of the .NET CLR type.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <returns>The mapped name of the class.</returns>
        </member>
        <member name="M:RepoDb.ClassMapper.Get(System.Type)">
            <summary>
            Get the existing mapped database object of the .NET CLR type.
            </summary>
            <param name="type">The target type.</param>
            <returns>The mapped name of the class.</returns>
        </member>
        <member name="M:RepoDb.ClassMapper.Remove``1">
            <summary>
            Remove the exising mapped database object on the .NET CLR type.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
        </member>
        <member name="M:RepoDb.ClassMapper.Remove(System.Type)">
            <summary>
            Remove the exising mapped database object on the .NET CLR type.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:RepoDb.ClassMapper.Clear">
            <summary>
            Clears all the existing cached objects.
            </summary>
        </member>
        <member name="T:RepoDb.DbHelperMapper">
            <summary>
            A class that is being used to map an instance of <see cref="T:RepoDb.Interfaces.IDbHelper"/> of into the type of <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Add``1(RepoDb.Interfaces.IDbHelper,System.Boolean)">
            <summary>
            Adds a mapping between the type of <typeparamref name="TDbConnection"/> and an <see cref="T:RepoDb.Interfaces.IDbHelper"/> object.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="dbHelper">The instance of <see cref="T:RepoDb.Interfaces.IDbHelper"/> object to mapped to.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Get``1">
            <summary>
            Get the existing mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
            <returns>The instance of existing mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Get``1(``0)">
            <summary>
            Get the existing mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
            <param name="connection">The instance of <see cref="T:System.Data.IDbConnection"/>.</param>
            <returns>The instance of exising mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Remove``1">
            <summary>
            Remove the existing mapped <see cref="T:RepoDb.Interfaces.IDbHelper"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
        </member>
        <member name="M:RepoDb.DbHelperMapper.Clear">
            <summary>
            Clears all the existing cached <see cref="T:RepoDb.Interfaces.IDbHelper"/> objects.
            </summary>
        </member>
        <member name="T:RepoDb.DbSettingMapper">
            <summary>
            A class that is being used to map an instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> of into the type of <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.DbSettingMapper.Add``1(RepoDb.Interfaces.IDbSetting,System.Boolean)">
            <summary>
            Adds a mapping between the type of <typeparamref name="TDbConnection"/> and an <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to mapped to.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.DbSettingMapper.Get``1">
            <summary>
            Get the existing mapped <see cref="T:RepoDb.Interfaces.IDbSetting"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
            <returns>The instance of existing mapped <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbSettingMapper.Get``1(``0)">
            <summary>
            Get the existing mapped <see cref="T:RepoDb.Interfaces.IDbSetting"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
            <param name="connection">The instance of <see cref="T:System.Data.IDbConnection"/>.</param>
            <returns>The instance of exising mapped <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</returns>
        </member>
        <member name="M:RepoDb.DbSettingMapper.Remove``1">
            <summary>
            Remove the existing mapped <see cref="T:RepoDb.Interfaces.IDbSetting"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
        </member>
        <member name="M:RepoDb.DbSettingMapper.Clear">
            <summary>
            Clears all the existing cached <see cref="T:RepoDb.Interfaces.IDbSetting"/> objects.
            </summary>
        </member>
        <member name="T:RepoDb.EntityMapFluentDefinition`1">
            <summary>
            A class that is being used to define the class mappings (ie: Table, Column, Primary, Identity, DB Type and Property Handler).
            Use this class if you wish to avoid decorating an attribute into the models.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="P:RepoDb.EntityMapFluentDefinition`1.EntityType">
            <summary>
            Gets the current type of the class.
            </summary>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Table(System.String)">
            <summary>
            Defines a mapping between a class and a database object (i.e.: Table, View).
            </summary>
            <param name="name">The name of the database object (i.e.: Table, View).</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Table(System.String,System.Boolean)">
            <summary>
            Defines a mapping between a class and a database object.
            </summary>
            <param name="name">The name of the database object (ie: Table, View).</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Defines a mapping between a class property and a database column.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="columnName">The name of the database column.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Column(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean)">
            <summary>
            Defines a mapping between a class property and a database column.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="columnName">The name of the database column.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Column(System.String,System.String)">
            <summary>
            Defines a mapping between a class property and a database column (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Column(System.String,System.String,System.Boolean)">
            <summary>
            Defines a mapping between a class property and a database column (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Column(RepoDb.Field,System.String)">
            <summary>
            Defines a mapping between a class property and a database column (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Column(RepoDb.Field,System.String,System.Boolean)">
            <summary>
            Defines a mapping between a class property and a database column (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Primary(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines the class primary property.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Primary(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Defines the class primary property.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Primary(System.String)">
            <summary>
            Defines the class primary property (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Primary(System.String,System.Boolean)">
            <summary>
            Defines the class primary property (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Primary(RepoDb.Field)">
            <summary>
            Defines the class primary property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Primary(RepoDb.Field,System.Boolean)">
            <summary>
            Defines the class primary property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Identity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines the class identity property.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Identity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Defines the class identity property.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Identity(System.String)">
            <summary>
            Defines the class identity property (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Identity(System.String,System.Boolean)">
            <summary>
            Defines the class identity property (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Identity(RepoDb.Field)">
            <summary>
            Defines the class identity property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.Identity(RepoDb.Field,System.Boolean)">
            <summary>
            Defines the class identity property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.DbType(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Nullable{System.Data.DbType})">
            <summary>
            Defines a mapping between a class property and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="dbType">The target database type.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.DbType(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Defines a mapping between a class property and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.DbType(System.String,System.Nullable{System.Data.DbType})">
            <summary>
            Defines a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.DbType(System.String,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Defines a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.DbType(RepoDb.Field,System.Nullable{System.Data.DbType})">
            <summary>
            Defines a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.DbType(RepoDb.Field,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Defines a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.ClassHandler``1">
            <summary>
            Defines a mapping between a class and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TClassHandler">The type of the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.ClassHandler``1(System.Boolean)">
            <summary>
            Defines a mapping between a class and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TClassHandler">The type of the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.</typeparam>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.ClassHandler``1(``0)">
            <summary>
            Defines a mapping between a class and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object.
            </summary>
            <typeparam name="TClassHandler">The type of the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.</typeparam>
            <param name="classHandler">The instance of the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.ClassHandler``1(``0,System.Boolean)">
            <summary>
            Defines a mapping between a class and a <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object.
            </summary>
            <typeparam name="TClassHandler">The type of the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.</typeparam>
            <param name="classHandler">The instance of the <see cref="T:RepoDb.Interfaces.IClassHandler`1"/>.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines a mapping between a class property and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Defines a mapping between a class property and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>
            Defines a mapping between a class property and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="propertyHandler">The instance of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0,System.Boolean)">
            <summary>
            Defines a mapping between a class property and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="propertyHandler">The instance of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.String)">
            <summary>
            Adds a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> mapping into a class property (via property name). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.String,``0)">
            <summary>
            Adds a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> mapping into a class property (via property name).
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="propertyHandler">The instance of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(System.String,``0,System.Boolean)">
            <summary>
            Adds a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> mapping into a class property (via property name).
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="propertyHandler">The instance of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(RepoDb.Field)">
            <summary>
            Adds a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> mapping into a class property (via <see cref="T:RepoDb.Field"/> object). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.
            Make sure a default constructor is available for the type of <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(RepoDb.Field,``0)">
            <summary>
            Adds a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> mapping into a class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="propertyHandler">The instance of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyHandler``1(RepoDb.Field,``0,System.Boolean)">
            <summary>
            Adds a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> mapping into a class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TPropertyHandler">The type of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="propertyHandler">The instance of the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/>.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyValueAttributes(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Defines the class property parameter value attributes.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="attributes">The list of property value attributes to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyValueAttributes(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Defines the class property parameter value attributes.
            </summary>
            <param name="expression">The expression to be parsed.</param>
            <param name="attributes">The list of property value attributes to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyValueAttributes(System.String,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Defines the class property parameter value attributes (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="attributes">The list of property value attributes to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyValueAttributes(System.String,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Defines the class property parameter value attributes (via property name).
            </summary>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="attributes">The list of property value attributes to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyValueAttributes(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Defines the class property parameter value attributes (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="attributes">The list of property value attributes to be mapped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.EntityMapFluentDefinition`1.PropertyValueAttributes(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Defines the class property parameter value attributes (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="attributes">The list of property value attributes to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:RepoDb.FluentMapper">
            <summary>
            A class that is being used to define the mappings for the target class or .NET CLR type in a fluent manner.
            </summary>
        </member>
        <member name="M:RepoDb.FluentMapper.Entity``1">
            <summary>
            Defines the target class where to apply the mappings.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>An instance of <see cref="T:RepoDb.EntityMapFluentDefinition`1"/> object.</returns>
        </member>
        <member name="M:RepoDb.FluentMapper.Type``1">
            <summary>
            Defines the target .NET CLR type where to apply the mappings.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <returns>An instance of <see cref="T:RepoDb.TypeMapFluentDefinition`1"/> object.</returns>
        </member>
        <member name="T:RepoDb.IdentityMapper">
            <summary>
            A class that is being used to set a class property to be an identity property. This is an alternative class to <see cref="T:RepoDb.Attributes.IdentityAttribute"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds an identity property mapping into a target class (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Adds an identity property mapping into a target class (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(System.String)">
            <summary>
            Adds an identity property mapping into a target class (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(System.String,System.Boolean)">
            <summary>
            Adds an identity property mapping into a target class (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(RepoDb.Field)">
            <summary>
            Adds an identity property mapping into a target class (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(RepoDb.Field,System.Boolean)">
            <summary>
            Adds an identity property mapping into a target class (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add``1(RepoDb.ClassProperty,System.Boolean)">
            <summary>
            Adds an identity property mapping into a <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="classProperty">The instance of <see cref="T:RepoDb.ClassProperty"/> to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Add(System.Type,RepoDb.ClassProperty,System.Boolean)">
            <summary>
            Adds an identity property mapping into a <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <param name="type">The type of the data entity.</param>
            <param name="classProperty">The instance of <see cref="T:RepoDb.ClassProperty"/> to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Get``1">
            <summary>
            Get the exising mapped identity property of the target class.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>An instance of the mapped <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.IdentityMapper.Get(System.Type)">
            <summary>
            Get the exising mapped identity property of the target class.
            </summary>
            <param name="type">The target type.</param>
            <returns>An instance of the mapped <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.IdentityMapper.Remove``1">
            <summary>
            Removes the existing mapped identity property of the class.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="M:RepoDb.IdentityMapper.Remove(System.Type)">
            <summary>
            Removes the existing mapped identity property of the class.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:RepoDb.IdentityMapper.Clear">
            <summary>
            Clears all the existing cached identity properties.
            </summary>
        </member>
        <member name="T:RepoDb.PrimaryMapper">
            <summary>
            A class that is being used to set a class property to be an primary property. This is an alternative class to <see cref="T:RepoDb.Attributes.PrimaryAttribute"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Adds a primary property mapping into a target class (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Adds a primary property mapping into a target class (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(System.String)">
            <summary>
            Adds a primary property mapping into a target class (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(System.String,System.Boolean)">
            <summary>
            Adds a primary property mapping into a target class (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(RepoDb.Field)">
            <summary>
            Adds a primary property mapping into a target class (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(RepoDb.Field,System.Boolean)">
            <summary>
            Adds a primary property mapping into a target class (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add``1(RepoDb.ClassProperty,System.Boolean)">
            <summary>
            Adds a primary property mapping into a <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="classProperty">The instance of <see cref="T:RepoDb.ClassProperty"/> to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Add(System.Type,RepoDb.ClassProperty,System.Boolean)">
            <summary>
            Adds a primary property mapping into a <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
            <param name="type">The type of the data entity.</param>
            <param name="classProperty">The instance of <see cref="T:RepoDb.ClassProperty"/> to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Get``1">
            <summary>
            Get the exising mapped primary property of the target class.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <returns>An instance of the mapped <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Get(System.Type)">
            <summary>
            Get the exising mapped primary property of the target class.
            </summary>
            <param name="type">The target type.</param>
            <returns>An instance of the mapped <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Remove``1">
            <summary>
            Removes the existing mapped primary property of the class.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Remove(System.Type)">
            <summary>
            Removes the existing mapped primary property of the class.
            </summary>
            <param name="type">The target type.</param>
        </member>
        <member name="M:RepoDb.PrimaryMapper.Clear">
            <summary>
            Clears all the existing cached primary properties.
            </summary>
        </member>
        <member name="T:RepoDb.PropertyHandlerMapper">
            <summary>
            A class that is being used to map a .NET CLR type or a class property into a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Boolean)">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(``1,System.Boolean)">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="propertyHandler">The instance of the property handler. The type must implement the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> interface.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add(System.Type,System.Object,System.Boolean)">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
            <param name="type">The target .NET CLR type.</param>
            <param name="propertyHandler">The instance of the property handler. The type must implement the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> interface.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``2">
            <summary>
            Type Level: Gets the mapped property handler of the .NET CLR type.
            </summary>
            <typeparam name="TType">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <returns>An instance of mapped property handler for .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``1(System.Type)">
            <summary>
            Type Level: Gets the mapped property handler of the .NET CLR type.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="type">The target .NET CLR type.</param>
            <returns>An instance of mapped property handler for .NET CLR type.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove``1">
            <summary>
            Type Level: Removes the existing mapped property handler of the .NET CLR type.
            </summary>
            <typeparam name="T">The target .NET CLR type.</typeparam>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove(System.Type)">
            <summary>
            Type Level: Removes the existing mapped property handler of the .NET CLR type.
            </summary>
            <param name="type">The target .NET CLR type.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via expression). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="expression">The expression to be parsed.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``1)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via expression). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``1,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.String)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via property name). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyName">The instance of property handler.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.String,``1)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyName">The instance of property handler.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.String,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via property name). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyName">The instance of property handler.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.String,``1,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyName">The instance of property handler.</param>
            <param name="propertyHandler">The instance of property handler.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(RepoDb.Field)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via <see cref="T:RepoDb.Field"/> object). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(RepoDb.Field,``1)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(RepoDb.Field,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via <see cref="T:RepoDb.Field"/> object). It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(RepoDb.Field,``1,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a data entity type property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Adds a property handler mapping into a <see cref="T:System.Reflection.PropertyInfo"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure a default constructor is available for the type of property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Reflection.PropertyInfo,``1)">
            <summary>
            Property Level: Adds a property handler mapping into a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``2(System.Reflection.PropertyInfo,``1,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Add``1(System.Type,System.Reflection.PropertyInfo,``0,System.Boolean)">
            <summary>
            Property Level: Adds a property handler mapping into a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="entityType">The target .NET CLR type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="propertyHandler">The instance of the property handler.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Gets the mapped property handler object of the data entity type property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The mapped property handler object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``2(System.String)">
            <summary>
            Property Level: Gets the mapped property handler object of the data entity type property (via property name).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The mapped property handler object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``2(RepoDb.Field)">
            <summary>
            Property Level: Gets the mapped property handler object of the data entity type property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The mapped property handler object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``2(System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Gets the mapped property handler on a specific <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped property handler object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Get``1(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Gets the mapped property handler on a specific <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the property handler.</typeparam>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped property handler object of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Removes the existing mapped property handler from a data entity type property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove``1(System.String)">
            <summary>
            Property Level: Removes the existing mapped property handler from a data entity type property (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The instance of property handler.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove``1(RepoDb.Field)">
            <summary>
            Property Level: Removes the existing mapped property handler from a data entity type property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove``1(System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Removes a mapped property handler from a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Remove(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Removes a mapped property handler from a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target .NET CLR type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Clear">
            <summary>
            Clears all the existing cached <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> objects.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.GenerateHashCode(System.Type)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="type">The type of the data entity.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.GuardPresence(System.Type)">
            <summary>
            Throws an exception if null.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.Guard(System.Type)">
            <summary>
            Throws an exception if the type does not implemented the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> interface.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyHandlerMapper.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="TType">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.PropertyMapper">
            <summary>
            A class that is being used to map a class into its equivalent database object (ie: Table, View) column. This is an alternative class to <see cref="T:RepoDb.Attributes.MapAttribute"/> object for property mapping.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Adds a mapping between a class property and a database column (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="columnName">The name of the database column.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Boolean)">
            <summary>
            Adds a mapping between a class property and a database column (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="columnName">The name of the database column.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(System.String,System.String)">
            <summary>
            Adds a mapping between a class property and a database column (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(System.String,System.String,System.Boolean)">
            <summary>
            Adds a mapping between a class property and a database column (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="columnName">The name of the class property to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(RepoDb.Field,System.String)">
            <summary>
            Adds a mapping between a class property and a database column (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(RepoDb.Field,System.String,System.Boolean)">
            <summary>
            Adds a mapping between a class property and a database column (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and the database column.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Add``1(System.Reflection.PropertyInfo,System.String,System.Boolean)">
            <summary>
            Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and the database column.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="columnName">The name of the database column.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the mapped database column of the property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>The mapped name of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.Get``1(System.String)">
            <summary>
            Gets the mapped database column of the property (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The mapped name of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.Get``1(RepoDb.Field)">
            <summary>
            Gets the mapped database column of the property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The mapped name of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.Get``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the mapped database column of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped name of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.Get(System.Reflection.PropertyInfo)">
            <summary>
            Gets the mapped database column of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped name of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.Get(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Gets the mapped database column of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target .NET CLR type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped name of the property.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Removes the mapped database column from a property (via expression).
            </summary>
            <typeparam name="TEntity">The type of the data entity.</typeparam>
            <param name="expression">The expression to be parsed.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Remove``1(System.String)">
            <summary>
            Removes the mapping between the class property and database column (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Remove``1(RepoDb.Field)">
            <summary>
            Removes the mapping between the  class property and database column (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Remove``1(System.Reflection.PropertyInfo)">
            <summary>
            Removes the mapped database column from a <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.Clear">
            <summary>
            Clears all the existing cached property mapped names.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyMapper.GenerateHashCode(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Generates a hashcode for caching.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The generated hashcode.</returns>
        </member>
        <member name="M:RepoDb.PropertyMapper.ValidateTargetColumnName(System.String)">
            <summary>
            Validates the value of the target column name.
            </summary>
            <param name="columnName">The column name to be validated.</param>
        </member>
        <member name="M:RepoDb.PropertyMapper.ThrowNullReferenceException``1(``0,System.String)">
            <summary>
            Validates the target object presence.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="obj">The object to be checked.</param>
            <param name="argument">The name of the argument.</param>
        </member>
        <member name="T:RepoDb.PropertyValueAttributeMapper">
            <summary>
            A class that is being used to map a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object into a class property.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the target class property.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the target class property.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add``1(RepoDb.Field,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add(System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Adds a mapping between a class property and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object (via <see cref="T:System.Reflection.PropertyInfo"/> object).
            </summary>
            <param name="propertyInfo">The instance of the target <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add(System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.
            </summary>
            <param name="propertyInfo">The instance of the target <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add(System.Type,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute})">
            <summary>
            Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of the target <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Add(System.Type,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{RepoDb.Attributes.Parameter.PropertyValueAttribute},System.Boolean)">
            <summary>
            Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and a list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of the target <see cref="T:System.Reflection.PropertyInfo"/> object.</param>
            <param name="attributes">The list of <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> object.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the class property (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Get``1(System.String)">
            <summary>
            Get the list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the class property (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the target class property.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Get``1(RepoDb.Field)">
            <summary>
            Get the list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Get(System.Reflection.PropertyInfo)">
            <summary>
            Get the list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Get(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Get the list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The list of mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects.</returns>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Removes the existing mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the class property (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Remove``1(System.String)">
            <summary>
            Removes the existing mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the class property (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the target class property.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Remove``1(RepoDb.Field)">
            <summary>
            Removes the existing mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Remove(System.Reflection.PropertyInfo)">
            <summary>
            Removes the existing mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Remove(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Removes the existing mapped <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:RepoDb.PropertyValueAttributeMapper.Clear">
            <summary>
            Clear all the existing cached mappings.
            </summary>
        </member>
        <member name="T:RepoDb.StatementBuilderMapper">
            <summary>
            A class that is being used to map an instance of <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> of into the type of <see cref="T:System.Data.IDbConnection"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Add``1(RepoDb.Interfaces.IStatementBuilder,System.Boolean)">
            <summary>
            Adds a mapping between the type of <typeparamref name="TDbConnection"/> and an <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/> object.</typeparam>
            <param name="statementBuilder">The instance of <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object to mapped to.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Get``1">
            <summary>
            Get the existing mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
            <returns>The instance of existing mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Get``1(``0)">
            <summary>
            Get the existing mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
            <param name="connection">The instance of <see cref="T:System.Data.IDbConnection"/>.</param>
            <returns>The instance of exising mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Remove``1">
            <summary>
            Remove the existing mapped <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> object from the type of <typeparamref name="TDbConnection"/>.
            </summary>
            <typeparam name="TDbConnection">The type of <see cref="T:System.Data.IDbConnection"/>.</typeparam>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Clear">
            <summary>
            Clears all the existing cached <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> objects.
            </summary>
        </member>
        <member name="T:RepoDb.TypeMapFluentDefinition`1">
            <summary>
            A class that is being used to define a type-level mappings (ie: DB Type and Property Handler). Use this class if you wish to define the mappings in a fluent manner and avoid the models be decorated by the attributes.
            </summary>
            <typeparam name="TType">The target .NET CLR type to be mapped.</typeparam>
        </member>
        <member name="P:RepoDb.TypeMapFluentDefinition`1.Type">
            <summary>
            Gets the current .NET CLR type.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapFluentDefinition`1.DbType(System.Nullable{System.Data.DbType})">
            <summary>
            Defines a mapping between a .NET CLR type and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> object where to map the .NET CLR type.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.TypeMapFluentDefinition`1.DbType(System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Defines a mapping between a .NET CLR type and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> object where to map the .NET CLR type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.TypeMapFluentDefinition`1.PropertyHandler``1">
            <summary>
            Defines a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure that the default constructor is available for the property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.TypeMapFluentDefinition`1.PropertyHandler``1(System.Boolean)">
            <summary>
            Defines a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object. It uses the <see cref="M:System.Activator.CreateInstance(System.Type)"/> method to create the instance of target property handler.
            Make sure that the default constructor is available for the property handler, otherwise an exception will be thrown.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.TypeMapFluentDefinition`1.PropertyHandler``1(``0)">
            <summary>
            Defines a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="propertyHandler">The instance of the property handler. The type must implement the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> interface.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.TypeMapFluentDefinition`1.PropertyHandler``1(``0,System.Boolean)">
            <summary>
            Defines a mapping between a .NET CLR type and a <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object.
            </summary>
            <typeparam name="TPropertyHandler">The type of the handler.</typeparam>
            <param name="propertyHandler">The instance of the property handler. The type must implement the <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> interface.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="T:RepoDb.TypeMapper">
            <summary>
            A class that is being used to map a .NET CLR type or class property into its equivalent <see cref="T:System.Data.DbType"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.Nullable{System.Data.DbType})">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <typeparam name="TType">The target type.</typeparam>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> object to map.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <typeparam name="TType">The target type.</typeparam>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> object to map.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add(System.Type,System.Nullable{System.Data.DbType})">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> object to map.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add(System.Type,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Type Level: Adds a mapping between a .NET CLR type and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="dbType">The <see cref="T:System.Data.DbType"/> object to map.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Get``1">
            <summary>
            Type Level: Get the existing mapped <see cref="T:System.Data.DbType"/> object of the .NET CLR type.
            </summary>
            <typeparam name="TType">The dynamic .NET CLR type used for mapping.</typeparam>
            <returns>The instance of the mapped <see cref="T:System.Data.DbType"/> object.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Get(System.Type)">
            <summary>
            Type Level: Get the existing mapped <see cref="T:System.Data.DbType"/> object of the .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type used for mapping.</param>
            <returns>The instance of the mapped <see cref="T:System.Data.DbType"/> object.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Remove``1">
            <summary>
            Type Level: Remove the existing mapped <see cref="T:System.Data.DbType"/> object from the .NET CLR type.
            </summary>
            <typeparam name="TType">The .NET CLR type where the mapping is to be removed.</typeparam>
        </member>
        <member name="M:RepoDb.TypeMapper.Remove(System.Type)">
            <summary>
            Type Level: Remove the existing mapped <see cref="T:System.Data.DbType"/> object from the .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type where the mapping is to be removed.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType})">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <param name="dbType">The target database type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.String,System.Nullable{System.Data.DbType})">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="dbType">The target database type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.String,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via property name).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyName">The name of the class property to be mapped.</param>
            <param name="dbType">The name of the class property to be mapped.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(RepoDb.Field,System.Nullable{System.Data.DbType})">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="dbType">The target database type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(RepoDb.Field,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.Reflection.PropertyInfo,System.Nullable{System.Data.DbType})">
            <summary>
            Property Level: Adds a mapping between a class property and a <see cref="T:System.Data.DbType"/> object (via <see cref="T:System.Reflection.PropertyInfo"/> object).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="dbType">The target database type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add``1(System.Reflection.PropertyInfo,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Property Level: Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Add(System.Type,System.Reflection.PropertyInfo,System.Nullable{System.Data.DbType},System.Boolean)">
            <summary>
            Property Level: Adds a mapping between a <see cref="T:System.Reflection.PropertyInfo"/> object and a <see cref="T:System.Data.DbType"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be mapped.</param>
            <param name="dbType">The target database type.</param>
            <param name="force">A value that indicates whether to force the mapping. If one is already exists, then it will be overwritten.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Get the existing mapped <see cref="T:System.Data.DbType"/> object of the class property (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Get``1(System.String)">
            <summary>
            Property Level: Get the existing mapped <see cref="T:System.Data.DbType"/> object of the class property (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Get``1(RepoDb.Field)">
            <summary>
            Property Level: Get the existing mapped <see cref="T:System.Data.DbType"/> object of the class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Get(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Get the existing mapped <see cref="T:System.Data.DbType"/> object of the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>The mapped <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Remove``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Property Level: Remove the existing mapped <see cref="T:System.Data.DbType"/> from the class property (via expression).
            </summary>
            <typeparam name="TEntity">The target type.</typeparam>
            <param name="expression">The property expression.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Remove``1(System.String)">
            <summary>
            Property Level: Remove the existing mapped <see cref="T:System.Data.DbType"/> from the class property (via property name).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Remove``1(RepoDb.Field)">
            <summary>
            Property Level: Remove the existing mapped <see cref="T:System.Data.DbType"/> from the class property (via <see cref="T:RepoDb.Field"/> object).
            </summary>
            <typeparam name="TEntity">The target .NET CLR type.</typeparam>
            <param name="field">The instance of <see cref="T:RepoDb.Field"/> object.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Remove(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Property Level: Remove the existing mapped <see cref="T:System.Data.DbType"/> from the <see cref="T:System.Reflection.PropertyInfo"/> object.
            </summary>
            <param name="entityType">The target type.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Clear">
            <summary>
            Clear all the existing cached mappings.
            </summary>
        </member>
        <member name="T:RepoDb.MemoryCache">
            <summary>
            A class object that is used for caching the resultsets of the query operations. This is the default cache object used by the <see cref="T:RepoDb.DbRepository`1"/> and <see cref="T:RepoDb.BaseRepository`2"/> repository objects.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.Add``1(System.String,``0,System.Int32,System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <typeparam name="T">The type of the cache item value.</typeparam>
            <param name="key">The key to the cache.</param>
            <param name="value">The value of the cache.</param>
            <param name="expiration">The expiration in minutes of the cache item.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.Add``1(RepoDb.CacheItem{``0},System.Boolean)">
            <summary>
            Adds a cache item value.
            </summary>
            <typeparam name="T">The type of the cache item value.</typeparam>
            <param name="item">The cache item to be added in the collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to add an item.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.Clear">
            <summary>
            Clears the collection of the cache.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.Contains(System.String)">
            <summary>
            Checks whether the key is present in the collection.
            </summary>
            <param name="key">The name of the key to be checked.</param>
            <returns>A boolean value that signifies the presence of the key from the collection.</returns>
        </member>
        <member name="M:RepoDb.MemoryCache.Get``1(System.String,System.Boolean)">
            <summary>
            Gets an object from the cache collection.
            </summary>
            <typeparam name="T">The type of the cache item value.</typeparam>
            <param name="key">The key of the cache object to be retrieved.</param>
            <returns>A cached item object from the cache collection based on the given key.</returns>
            <param name="throwException">Throws an exception if the item is not found.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of the cache collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.MemoryCache.GetEnumerator">
            <summary>
            Gets the enumerator of the cache collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.MemoryCache.Remove(System.String,System.Boolean)">
            <summary>
            Removes the item from the cache collection.
            </summary>
            <param name="key">The key of the item to be removed from the cache collection.</param>
            <param name="throwException">Throws an exception if the operation has failed to remove an item.</param>
        </member>
        <member name="T:RepoDb.OrderField">
            <summary>
            A class that holds a field that is used to order the results of the query operation.
            </summary>
        </member>
        <member name="M:RepoDb.OrderField.#ctor(System.String,RepoDb.Enumerations.Order)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <param name="name">The name of the field to be ordered.</param>
            <param name="order">The ordering direction of the field.</param>
        </member>
        <member name="P:RepoDb.OrderField.Name">
            <summary>
            Gets the quoted name of the order field.
            </summary>
        </member>
        <member name="P:RepoDb.OrderField.Order">
            <summary>
            Gets the order direction of the field.
            </summary>
        </member>
        <member name="M:RepoDb.OrderField.Parse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RepoDb.Enumerations.Order)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="order">The order of the property.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse``1(System.Linq.Expressions.UnaryExpression,RepoDb.Enumerations.Order)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.UnaryExpression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="order">The order of the property.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse``1(System.Linq.Expressions.MemberExpression,RepoDb.Enumerations.Order)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.MemberExpression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="order">The order of the property.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse``1(System.Linq.Expressions.BinaryExpression,RepoDb.Enumerations.Order)">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.BinaryExpression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <param name="order">The order of the property.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Ascending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Ascending"/> value.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Ascending"/> value.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Descending``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Parses a property from the data entity object based on the given <see cref="T:System.Linq.Expressions.Expression"/> and converts the result 
            to <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Descending"/> value.
            </summary>
            <typeparam name="TEntity">The type of the data entity that contains the property to be parsed.</typeparam>
            <param name="expression">The expression to be parsed.</param>
            <returns>An instance of <see cref="T:RepoDb.OrderField"/> object with <see cref="F:RepoDb.Enumerations.Order.Descending"/> value.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse(System.Object)">
            <summary>
            Parse an object properties to be used for ordering. The object can have multiple properties for ordering and each property must have
            a value of <see cref="T:RepoDb.Enumerations.Order"/> enumeration.
            </summary>
            <param name="obj">An object to be parsed.</param>
            <returns>An enumerable of <see cref="T:RepoDb.OrderField"/> object that holds the ordering values for every field.</returns>
        </member>
        <member name="M:RepoDb.OrderField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.OrderField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.OrderField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Equals(RepoDb.OrderField)">
            <summary>
            Compares the <see cref="T:RepoDb.OrderField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.OrderField.op_Equality(RepoDb.OrderField,RepoDb.OrderField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.OrderField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.OrderField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.OrderField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.OrderField.op_Inequality(RepoDb.OrderField,RepoDb.OrderField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.OrderField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.OrderField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.OrderField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Parameter">
            <summary>
            A class that holds the value of the field parameter.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Parameter"/> object.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="prependUnderscore">The value to identify whether the underscope prefix will be prepended.</param>
        </member>
        <member name="P:RepoDb.Parameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.Parameter.OriginalName">
            <summary>
            Gets the original name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.Parameter.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.Parameter.OriginalValue">
            <summary>
            Gets the original value of the parameter.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.PrependAnUnderscore">
            <summary>
            Prepend an underscore on the current parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.SetName(System.String)">
            <summary>
            Set the name of the parameter.
            </summary>
            <param name="name">The new name.</param>
        </member>
        <member name="M:RepoDb.Parameter.SetValue(System.Object)">
            <summary>
            Set the value of the parameter.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:RepoDb.Parameter.Reset">
            <summary>
            Resets the <see cref="T:RepoDb.Parameter"/> object back to its default state (as is newly instantiated).
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.ToString">
            <summary>
            Stringify the current object. Will return the format of <b>Name (Value)</b> text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Parameter.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Parameter"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Parameter.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Parameter"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Parameter.Equals(RepoDb.Parameter)">
            <summary>
            Compares the <see cref="T:RepoDb.Parameter"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Parameter.op_Equality(RepoDb.Parameter,RepoDb.Parameter)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Parameter"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Parameter"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Parameter"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Parameter.op_Inequality(RepoDb.Parameter,RepoDb.Parameter)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Parameter"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Parameter"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Parameter"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.PropertyValue">
            <summary>
            A class that is being used to handle the extracted value of the class property. It is referencing the instance of the <see cref="T:RepoDb.ClassProperty"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.PropertyValue.#ctor(System.String,System.Object,RepoDb.ClassProperty)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="property">The actual property object.</param>
        </member>
        <member name="P:RepoDb.PropertyValue.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:RepoDb.PropertyValue.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="P:RepoDb.PropertyValue.Property">
            <summary>
            Gets the actual property object.
            </summary>
        </member>
        <member name="T:RepoDb.QueryBuilder">
            <summary>
            A class used to compose a SQL Query Statement.
            </summary>
        </member>
        <member name="M:RepoDb.QueryBuilder.ToString">
            <summary>
            Stringify the current object.
            </summary>
            <returns>
            Returns a string that corresponds to the composed SQL Query Statement. It uses the <see cref="M:RepoDb.QueryBuilder.GetString"/>
            method as its underlying method call.
            </returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.GetString">
            <summary>
            Gets the string that corresponds to the composed SQL Query Statement.
            Starts at index 1 to drop the leading space.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Clear">
            <summary>
            Clears the current composed SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Space">
            <summary>
            Append a space to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.NewLine">
            <summary>
            Appends a line terminator to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.WriteText(System.String)">
            <summary>
            Writes a custom text to the SQL Query Statement.
            </summary>
            <param name="text">The text to be written.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Delete">
            <summary>
            Appends a word DELETE word to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.End">
            <summary>
            Appends a character ";" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Average(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word AVG to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Average(RepoDb.Field,RepoDb.Interfaces.IDbSetting,RepoDb.Interfaces.IResolver{RepoDb.Field,RepoDb.Interfaces.IDbSetting,System.String})">
            <summary>
            Appends a word AVG to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <param name="convertResolver">The converter that is being used to convert the <see cref="T:RepoDb.Field"/> object before the aggregation.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Min(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word MIN to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Min(RepoDb.Field,RepoDb.Interfaces.IDbSetting,RepoDb.Interfaces.IResolver{RepoDb.Field,RepoDb.Interfaces.IDbSetting,System.String})">
            <summary>
            Appends a word MIN to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <param name="convertResolver">The converter that is being used to convert the <see cref="T:RepoDb.Field"/> object before the aggregation.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Max(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word MAX to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Max(RepoDb.Field,RepoDb.Interfaces.IDbSetting,RepoDb.Interfaces.IResolver{RepoDb.Field,RepoDb.Interfaces.IDbSetting,System.String})">
            <summary>
            Appends a word MAX to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <param name="convertResolver">The converter that is being used to convert the <see cref="T:RepoDb.Field"/> object before the aggregation.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Sum(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word SUM to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Sum(RepoDb.Field,RepoDb.Interfaces.IDbSetting,RepoDb.Interfaces.IResolver{RepoDb.Field,RepoDb.Interfaces.IDbSetting,System.String})">
            <summary>
            Appends a word SUM to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <param name="convertResolver">The converter that is being used to convert the <see cref="T:RepoDb.Field"/> object before the aggregation.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Count(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word COUNT to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.CountBig(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word COUNT_BIG to the SQL Query Statement.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> object to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldFrom(RepoDb.Field)">
            <summary>
            Appends a stringified fields to the SQL Query Statement.
            </summary>
            <param name="field">The list of fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsFrom``1(RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Append a stringified fields to the SQL Query Statement.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndParametersFrom``1(System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndParametersFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndAliasFieldsFrom``1(System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement with aliases.
            </summary>
            <param name="leftAlias">The alias to be prepended for each field in the left.</param>
            <param name="rightAlias">The alias to be prepended for each field in the right.</param>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.FieldsAndAliasFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement with aliases.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="leftAlias">The alias to be prepended for each field in the left.</param>
            <param name="rightAlias">The alias to be prepended for each field in the right.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.AsAliasFieldsFrom``1(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields to the SQL Query Statement with aliases.
            </summary>
            <param name="alias">The alias to be prepended for each field.</param>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.AsAliasFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified fields to the SQL Query Statement by command with aliases.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="alias">The alias to be prepended for each field.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.From">
            <summary>
            Appends a word FROM to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.GroupByFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word GROUP BY and a stringified fields to the SQL Query Statement.
            </summary>
            <param name="fields">The fields to be stringified.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.HavingCountFrom(RepoDb.QueryField,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word HAVING COUNT and a conditional field to the SQL Query Statement.
            </summary>
            <param name="queryField">The conditional field object used for composition.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Insert">
            <summary>
            Appends a word INSERT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.GroupBy">
            <summary>
            Appends a word GROUP BY to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.HavingCount">
            <summary>
            Appends a word HAVING COUNT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Into">
            <summary>
            Appends a word INTO to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Values">
            <summary>
            Appends a word VALUES to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OrderByFrom(System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word ORDER BY and the stringified fields to the SQL Query Statement with aliases.
            </summary>
            <param name="orderBy">The list of order fields to be stringified.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OrderByFrom(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word ORDER BY and the stringified fields to the SQL Query Statement with aliases.
            </summary>
            <param name="orderBy">The list of order fields to be stringified.</param>
            <param name="alias">The aliases to be prepended for each field.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.As">
            <summary>
            Appends a word AS to the SQL Query Statement with alias.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.As(System.String)">
            <summary>
            Appends a word AS to the SQL Query Statement with alias.
            </summary>
            <param name="alias">The alias to be prepended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.With">
            <summary>
            Appends a word WITH to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Set">
            <summary>
            Appends a word SET to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Join">
            <summary>
            Appends a word JOIN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.JoinQualifiersFrom(RepoDb.Field,System.String,System.String,System.Boolean,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a stringified field as a joined qualifier to the SQL Query Statement with left and right aliases.
            </summary>
            <param name="field">The field to be stringified.</param>
            <param name="leftAlias">The left alias.</param>
            <param name="rightAlias">The right alias.</param>
            <param name="considerNulls">The value that defines whether the null values are being considered.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Merge">
            <summary>
            Appends a word MERGE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Table">
            <summary>
            Appends a word TABLE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.TableNameFrom``1(RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends the mapped entity name to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.TableNameFrom(System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends the target name to the SQL Query Statement.
            </summary>
            <param name="tableName">The name of the table.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersFrom``1(System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Append the mapped properties name to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Append the stringified field parameters to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersAsFieldsFrom``1(System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Append the stringified parameter as fields to the SQL Query Statement.
            </summary>
            <typeparam name="TEntity">The type of data entity object bound for the SQL Statement to be created.</typeparam>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.ParametersAsFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Append the stringified parameter as fields to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Select">
            <summary>
            Appends a word SELECT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Top">
            <summary>
            Appends a word TOP to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.TopFrom(System.Nullable{System.Int32})">
            <summary>
            Appends a word TOP with the number of rows to the SQL Query Statement.
            </summary>
            <param name="rows">The number of rows.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Limit">
            <summary>
            Appends a word LIMIT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Limit(System.Nullable{System.Int32})">
            <summary>
            Appends a word LIMIT to the SQL Query Statement.
            </summary>
            <param name="take">The number of rows to be taken.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.LimitTake(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Appends a word LIMIT (Rows, Skip) with the number of rows to be skipped and return the SQL Query Statement.
            </summary>
            <param name="take">The number of rows to be taken.</param>
            <param name="skip">The number of rows to be skipped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.LimitOffset(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Appends a word LIMIT with the number of rows to be skipped and return the SQL Query Statement.
            </summary>
            <param name="take">The number of rows to be taken.</param>
            <param name="skip">The number of rows to be skipped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Offset">
            <summary>
            Appends a word OFFSET to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Offset(System.Nullable{System.Int32})">
            <summary>
            Appends a word OFFSET to the SQL Query Statement.
            </summary>
            <param name="skip">The number of rows to be skipped.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OrderBy">
            <summary>
            Appends a word ORDER BY to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Where">
            <summary>
            Appends a word WHERE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Update">
            <summary>
            Appends a word UPDATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Using">
            <summary>
            Appends a word USING to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.WhereFrom(RepoDb.QueryGroup,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word WHERE and the stringified values of the <see cref="T:RepoDb.QueryGroup"/> to the SQL Query Statement.
            </summary>
            <param name="queryGroup">The query group to be stringified.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.WhereFrom(RepoDb.QueryGroup,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word WHERE and the stringified values of the <see cref="T:RepoDb.QueryGroup"/> to the SQL Query Statement.
            </summary>
            <param name="queryGroup">The query group to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.WhereFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word WHERE and the stringified values of the <see cref="T:RepoDb.QueryGroup"/> to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <param name="index">The parameter index.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.RowNumber">
            <summary>
            Appends a word ROW_NUMBER to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Over">
            <summary>
            Appends a word OVER to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.And">
            <summary>
            Appends a word AND to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Or">
            <summary>
            Appends a word OR to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OpenParen">
            <summary>
            Appends a character "(" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.CloseParen">
            <summary>
            Appends a character ")" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.On">
            <summary>
            Appends a word ON to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.In">
            <summary>
            Appends a word IN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Between">
            <summary>
            Appends a word BETWEEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.When">
            <summary>
            Appends a word WHEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Not">
            <summary>
            Appends a word NOT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Matched">
            <summary>
            Appends a word MATCHED to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Then">
            <summary>
            Appends a word THEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Case">
            <summary>
            Appends a word CASE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Truncate">
            <summary>
            Appends a word TRUNCATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.HintsFrom(System.String)">
            <summary>
            Appends the hints to the SQL Query Statement.
            </summary>
            <param name="hints">The hints to be appended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.MaxFrom(RepoDb.Field)">
            <summary>
            Appends a word MAX and the field to the SQL Query Statement, otherwise an empty string.
            </summary>
            <param name="field">The target field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.MinFrom(RepoDb.Field)">
            <summary>
            Appends a word MIN and the field to the SQL Query Statement, otherwise an empty string.
            </summary>
            <param name="field">The target field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Avg">
            <summary>
            Appends a word AVG to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Ascending">
            <summary>
            Appends a word ASC to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Descending">
            <summary>
            Appends a word DESC to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.AvgFrom(RepoDb.Field)">
            <summary>
            Appends a word AVG and the field to the SQL Query Statement, otherwise an empty string.
            </summary>
            <param name="field">The target field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Replace">
            <summary>
            Appends a word REPLACE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Returning">
            <summary>
            Appends a word RETURNING to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Conflict">
            <summary>
            Appends a word CONFLICT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OnConflict">
            <summary>
            Appends a word ON CONFLICT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.OnConflict(System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Appends a word ON CONFLICT ON (fieldname) to the SQL Query Statement.
            </summary>
            <param name="fields">The instances of the <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.Do">
            <summary>
            Appends a word DO to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.DoNothing">
            <summary>
            Appends a word DO NOTHING to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder.DoUpdate">
            <summary>
            Appends a word DO UPDATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="T:RepoDb.QueryField">
            <summary>
            A class that is being used to define a field expression for the query operation. It holds the instances of the <see cref="T:RepoDb.Field"/>,
            <see cref="T:RepoDb.Parameter"/> and the <see cref="T:RepoDb.Enumerations.Operation"/> objects of the query expression.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(RepoDb.Field,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="prependUnderscore">The value to identify whether the underscore prefix will be appended to the parameter name.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(RepoDb.Field,RepoDb.Enumerations.Operation,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="field">The actual field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="prependUnderscore">The value to identify whether the underscore prefix will be appended to the parameter name.</param>
        </member>
        <member name="P:RepoDb.QueryField.Field">
            <summary>
            Gets the associated field object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.Operation">
            <summary>
            Gets the operation used by this instance.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.Parameter">
            <summary>
            Gets the associated parameter object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.DbParameter">
            <summary>
            Gets the in-used instance of database parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.GetString(RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the string representations (column-value pairs) of the current <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="dbSetting">The database setting currently in used.</param>
            <returns>The string representations of the current <see cref="T:RepoDb.QueryField"/> object.</returns>
        </member>
        <member name="M:RepoDb.QueryField.GetString(System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the string representations (column-value pairs) of the current <see cref="T:RepoDb.QueryField"/> object.
            </summary>
            <param name="index">The target index.</param>
            <param name="dbSetting">The database setting currently in used.</param>
            <returns>The string representations of the current <see cref="T:RepoDb.QueryField"/> object.</returns>
        </member>
        <member name="M:RepoDb.QueryField.GetString(System.Int32,System.String,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the string representations (column-value pairs) of the current <see cref="T:RepoDb.QueryField"/> object with the formatted-function transformations.
            </summary>
            <param name="index">The target index.</param>
            <param name="functionFormat">The properly constructed format of the target function to be used.</param>
            <param name="dbSetting">The database setting currently in used.</param>
            <returns>The string representations of the current <see cref="T:RepoDb.QueryField"/> object using the LOWER function.</returns>
        </member>
        <member name="M:RepoDb.QueryField.GetName">
            <summary>
            Returns the name of the <see cref="P:RepoDb.QueryField.Field"/> object current in used.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.GetValue">
            <summary>
            Returns the value of the <see cref="P:RepoDb.QueryField.Parameter"/> object currently in used. However, if this instance of object has already been used as a database parameter 
            with <see cref="!:DbParameter.Direction"/> equals to <see cref="F:System.Data.ParameterDirection.Output"/> via <see cref="T:RepoDb.DirectionalQueryField"/> 
            object, then the value of the in-used <see cref="T:System.Data.IDbDataParameter"/> object will be returned.
            </summary>
            <returns>The value of the <see cref="P:RepoDb.QueryField.Parameter"/> object.</returns>
        </member>
        <member name="M:RepoDb.QueryField.GetValue``1">
            <summary>
            Returns the value of the <see cref="P:RepoDb.QueryField.Parameter"/> object currently in used. However, if this instance of object has already been used as a database parameter 
            with <see cref="!:DbParameter.Direction"/> equals to <see cref="F:System.Data.ParameterDirection.Output"/> via <see cref="T:RepoDb.DirectionalQueryField"/> 
            object, then the value of the in-used <see cref="T:System.Data.IDbDataParameter"/> object will be returned.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>The value of the converted <see cref="P:RepoDb.QueryField.Parameter"/> object.</returns>
        </member>
        <member name="M:RepoDb.QueryField.IsForUpdate">
            <summary>
            Make the current instance of <see cref="T:RepoDb.QueryField"/> object to become an expression for 'Update' operations.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.Reset">
            <summary>
            Resets the <see cref="T:RepoDb.QueryField"/> back to its default state (as is newly instantiated).
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.ToString">
            <summary>
            Stringify the current instance of this object. Will return the stringified format of field and parameter in combine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.QueryField"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.QueryField.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryField"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.QueryField.Equals(RepoDb.QueryField)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryField"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryField.op_Equality(RepoDb.QueryField,RepoDb.QueryField)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryField"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryField.op_Inequality(RepoDb.QueryField,RepoDb.QueryField)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryField"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryField"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:RepoDb.QueryField.GetTargetProperty``1(RepoDb.Field)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetOperation(System.Linq.Expressions.ExpressionType)">
            <summary>
            
            </summary>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ToIn(System.String,System.Collections.IEnumerable,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="enumerable"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ToQueryFields(System.String,System.Collections.IEnumerable,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="enumerable"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ToLike(System.String,System.Object,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ConvertToLikeableValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="methodName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.Parse``1(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ToEnumValue(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.Parse``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ParseEquals``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ParseCompareString``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ParseContains``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ParseWith``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ParseAll``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.ParseAny``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetProperty``1(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetProperty``1(System.Linq.Expressions.LambdaExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetProperty``1(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetProperty``1(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetProperty``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryField.GetProperty``1(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.QueryGroup">
            <summary>
            A widely-used class for defining the groupings when composing the query expression. This object is used by most operations
            to define the filters and expressions on the actual execution.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField)">
            QueryField *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.QueryGroup)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            QueryFields *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.QueryGroup)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryGroup)">
            QueryGroup *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryGroup,RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryGroup,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryGroup,RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryGroup})">
            QueryGroups *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.QueryGroup,RepoDb.Enumerations.Conjunction)">
            QueryField / QueryGroup *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.QueryGroup,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,RepoDb.QueryGroup,RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.QueryGroup})">
            QueryField / QueryGroups *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(RepoDb.QueryField,System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryField">The field to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.QueryGroup,RepoDb.Enumerations.Conjunction)">
            ** QueryFields / QueryGroup **/
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.QueryGroup,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},RepoDb.QueryGroup,RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroup">The child query group to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup})">
            QueryFields / QueryGroups *
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expression.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expression.</param>
            <param name="conjunction">The conjunction to be used for every group separation.</param>
            <param name="isNot">The prefix to be added whether the field value is in opposite state.</param>
        </member>
        <member name="P:RepoDb.QueryGroup.Conjunction">
            <summary>
            Gets the conjunction used by this object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.QueryFields">
            <summary>
            Gets the list of child <see cref="T:RepoDb.QueryField"/> objects.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.QueryGroups">
            <summary>
            Gets the list of child <see cref="T:RepoDb.QueryGroup"/> objects.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.IsNot">
            <summary>
            Gets the value whether the grouping is in opposite field-value state.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.PrependAnUnderscoreAtTheParameters">
            <summary>
            Prepend an underscore on every parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.SetIsNot(System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:RepoDb.QueryGroup.IsNot"/> property.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value the defines the <see cref="P:RepoDb.QueryGroup.IsNot"/> property.</param>
        </member>
        <member name="M:RepoDb.QueryGroup.FixForQueryMultiple(RepoDb.QueryGroup[])">
            <summary>
            Fix the names of the parameters in every <see cref="T:RepoDb.QueryField"/> object of the target list of <see cref="T:RepoDb.QueryGroup"/>s.
            </summary>
            <param name="queryGroups">The list of query groups.</param>
            <returns>An instance of <see cref="T:RepoDb.QueryGroup"/> object containing all the fields.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.ForceIsFixedVariables">
            <summary>
            Forces to set the <see cref="F:RepoDb.QueryGroup.isFixed"/> variable to True.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.ResetQueryFields">
            <summary>
            Reset all the query fields.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.ResetQueryGroups">
            <summary>
            Reset all the query groups.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.FixQueryFields(System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            <summary>
            Fix the query fields names.
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.Reset">
            <summary>
            Reset the <see cref="T:RepoDb.QueryGroup"/> back to its default state (as is newly instantiated).
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.Fix">
            <summary>
            Fix the names of the <see cref="T:RepoDb.Parameter"/> on every <see cref="T:RepoDb.QueryField"/> (and on every child <see cref="T:RepoDb.QueryGroup"/>) of the current <see cref="T:RepoDb.QueryGroup"/>.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.IsForUpdate">
            <summary>
            Make the current instance of <see cref="T:RepoDb.QueryGroup"/> object to become an expression for 'Update' operations.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.GetString(RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the stringified query expression format of the current instance. A formatted string for field-operation-parameter will be
            conjuncted by the value of the <see cref="P:RepoDb.QueryGroup.Conjunction"/> property.
            </summary>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A stringified formatted-text of the current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetString(System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Gets the stringified query expression format of the current instance. A formatted string for field-operation-parameter will be
            conjuncted by the value of the <see cref="T:RepoDb.Enumerations.Conjunction"/> property.
            </summary>
            <param name="index">The parameter index for batch operation.</param>
            <param name="dbSetting">The currently in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>A stringified formatted-text of the current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetFields(System.Boolean)">
            <summary>
            Gets all the child <see cref="T:RepoDb.QueryField"/> objects associated on the current instance.
            </summary>
            <param name="traverse">Identify whether to explore all the children of the child <see cref="T:RepoDb.QueryGroup"/> objects.</param>
            <returns>An enumerable list of <see cref="T:RepoDb.QueryField"/> objects.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.QueryGroup"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryGroup"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Equals(RepoDb.QueryGroup)">
            <summary>
            Compares the <see cref="T:RepoDb.QueryGroup"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.op_Equality(RepoDb.QueryGroup,RepoDb.QueryGroup)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.QueryGroup"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.op_Inequality(RepoDb.QueryGroup,RepoDb.QueryGroup)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.QueryGroup"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObject(RepoDb.QueryGroupTypeMap[],System.Boolean)">
            <summary>
            Converts every <see cref="T:RepoDb.QueryGroup"/> object of the list of <see cref="T:RepoDb.QueryGroupTypeMap"/> into an <see cref="T:System.Object"/> 
            with all the child <see cref="T:RepoDb.QueryField"/>s as the property/value to that object. The value of every property of the created
            object will be an instance of the <see cref="T:RepoDb.CommandParameter"/> with the proper type, name and value.
            </summary>
            <param name="queryGroupTypeMaps">The list of <see cref="T:RepoDb.QueryGroupTypeMap"/> objects to be converted.</param>
            <param name="fixParameters">A boolean value whether to fix the parameter name before converting.</param>
            <returns>An instance of an object that contains all the definition of the converted underlying <see cref="P:RepoDb.QueryGroup.QueryFields"/>s.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObject(System.Collections.Generic.IDictionary{System.String,System.Object},RepoDb.QueryGroupTypeMap@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="queryGroupTypeMap"></param>
            <param name="fixParameters"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObjectForQueryFields(System.Collections.Generic.IDictionary{System.String,System.Object},RepoDb.QueryGroupTypeMap@,System.Collections.Generic.IEnumerable{RepoDb.QueryField})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="queryGroupTypeMap"></param>
            <param name="queryFields"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObjectForBetweenQueryField(System.Collections.Generic.IDictionary{System.String,System.Object},RepoDb.QueryGroupTypeMap@,RepoDb.QueryField)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="queryGroupTypeMap"></param>
            <param name="queryField"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObjectForInQueryField(System.Collections.Generic.IDictionary{System.String,System.Object},RepoDb.QueryGroupTypeMap@,RepoDb.QueryField)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="queryGroupTypeMap"></param>
            <param name="queryField"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.AsMappedObjectForNormalQueryField(System.Collections.Generic.IDictionary{System.String,System.Object},RepoDb.QueryGroupTypeMap@,RepoDb.QueryField)">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="queryGroupTypeMap"></param>
            <param name="queryField"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.GetValueList``1(``0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(``0)">
            <summary>
            Parses an object and convert back the result to an instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="obj">The instance of the object to be parsed.</param>
            <returns>An instance of the <see cref="T:RepoDb.QueryGroup"/> with parsed properties and values.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(``0,System.Boolean)">
            <summary>
            Parses an object and convert back the result to an instance of <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
            <param name="obj">The instance of the object to be parsed.</param>
            <param name="throwException">If true, an exception will be thrown if the type of 'obj' argument cannot be parsed.</param>
            <returns>An instance of the <see cref="T:RepoDb.QueryGroup"/> with parsed properties and values.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.IsDirect(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Parses a customized query expression.
            </summary>
            <typeparam name="TEntity">The target entity type</typeparam>
            <param name="expression">The expression to be converted to a <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <returns>An instance of the <see cref="T:RepoDb.QueryGroup"/> object that contains the parsed query expression.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.UnaryExpression)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.MemberExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse``1(System.Linq.Expressions.MethodCallExpression,System.Nullable{System.Linq.Expressions.ExpressionType})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="expression"></param>
            <param name="unaryNodeType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetConjunction(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetConjunction(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetNodeType(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetNodeType(System.Linq.Expressions.LambdaExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetNodeType(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetNodeType(System.Linq.Expressions.MemberExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetNodeType(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.QueryGroupTypeMap">
            <summary>
            A class that is being used to hold the <see cref="T:RepoDb.QueryGroup"/> object type mapping. This class has been introduced
            to support the needs of the multi-resultsets query operation.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroupTypeMap.#ctor(RepoDb.QueryGroup,System.Type)">
            <summary>
            Creates an instance of <see cref="T:RepoDb.QueryGroupTypeMap"/> class.
            </summary>
            <param name="queryGroup">The <see cref="T:RepoDb.QueryGroup"/> object.</param>
            <param name="type">The type where the <see cref="T:RepoDb.QueryGroup"/> object is mapped.</param>
        </member>
        <member name="P:RepoDb.QueryGroupTypeMap.QueryGroup">
            <summary>
            Gets the current associated <see cref="T:RepoDb.QueryGroup"/> object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroupTypeMap.MappedType">
            <summary>
            Gets the type where the current <see cref="T:RepoDb.QueryGroup"/> is mapped.
            </summary>
        </member>
        <member name="T:RepoDb.QueryMultipleExtractor">
            <summary>
            A class that is being used to extract the multiple resultsets of the 'ExecuteQueryMultiple' operation.
            </summary>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbDataReader,System.Boolean,System.Object,System.Threading.CancellationToken)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.QueryMultipleExtractor"/> class.
            </summary>
            <param name="connection">The instance of the <see cref="T:System.Data.Common.DbConnection"/> object that is current in used.</param>
            <param name="reader">The instance of the <see cref="T:System.Data.Common.DbDataReader"/> object to be extracted.</param>
            <param name="isDisposeConnection">The flag that is used to define whether the associated <paramref name="connection"/> object will be disposed during the disposition process.</param>
            <param name="param">The parameter in used during the execution.</param>
            <param name="cancellationToken">The <see cref="P:RepoDb.QueryMultipleExtractor.CancellationToken"/> object to be used during the asynchronous operation.</param>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Dispose">
            <summary>
            Disposes the current instance of <see cref="T:RepoDb.QueryMultipleExtractor"/>.
            </summary>
        </member>
        <member name="P:RepoDb.QueryMultipleExtractor.Position">
            <summary>
            Gets the position of the <see cref="T:System.Data.Common.DbDataReader"/>.
            </summary>
        </member>
        <member name="P:RepoDb.QueryMultipleExtractor.CancellationToken">
            <summary>
            Gets the instance of the <see cref="P:RepoDb.QueryMultipleExtractor.CancellationToken"/> currently in used.
            </summary>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Extract``1(System.Boolean)">
            <summary>
            Extract the <see cref="T:System.Data.Common.DbDataReader"/> object into an enumerable of data entity objects.
            </summary>
            <typeparam name="TEntity">The type of data entity to be extracted.</typeparam>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An enumerable of extracted data entity.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.ExtractAsync``1(System.Boolean)">
            <summary>
            Extract the <see cref="T:System.Data.Common.DbDataReader"/> object into an enumerable of data entity objects in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of data entity to be extracted.</typeparam>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An enumerable of extracted data entity.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Extract(System.Boolean)">
            <summary>
            Extract the <see cref="T:System.Data.Common.DbDataReader"/> object into an enumerable of dynamic objects.
            </summary>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An enumerable of extracted data entity.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.ExtractAsync(System.Boolean)">
            <summary>
            Extract the <see cref="T:System.Data.Common.DbDataReader"/> object into an enumerable of dynamic objects in an asynchronous way.
            </summary>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An enumerable of extracted data entity.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Scalar``1(System.Boolean)">
            <summary>
            Converts the first column of the first row of the <see cref="T:System.Data.Common.DbDataReader"/> to an object.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An instance of extracted object as value result.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.ScalarAsync``1(System.Boolean)">
            <summary>
            Converts the first column of the first row of the <see cref="T:System.Data.Common.DbDataReader"/> to an object in an asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An instance of extracted object as value result.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.Scalar(System.Boolean)">
            <summary>
            Converts the first column of the first row of the <see cref="T:System.Data.Common.DbDataReader"/> to an object.
            </summary>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An instance of extracted object as value result.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.ScalarAsync(System.Boolean)">
            <summary>
            Converts the first column of the first row of the <see cref="T:System.Data.Common.DbDataReader"/> to an object in an asynchronous way.
            </summary>
            <param name="isMoveToNextResult">A flag to use whether the operation would call the <see cref="M:System.Data.IDataReader.NextResult"/> method.</param>
            <returns>An instance of extracted object as value result.</returns>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.NextResult">
            <summary>
            Advances the <see cref="T:System.Data.Common.DbDataReader"/> object to the next result.
            <returns>True if there are more result sets; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:RepoDb.QueryMultipleExtractor.NextResultAsync">
            <summary>
            Advances the <see cref="T:System.Data.Common.DbDataReader"/> object to the next result in an asynchronous way.
            <returns>True if there are more result sets; otherwise false.</returns>
            </summary>
        </member>
        <member name="T:RepoDb.Reflection.Compiler">
            <summary>
            The compiler class of the library.
            </summary>
        </member>
        <member name="T:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo">
            <summary>
            A class that contains both the instance of <see cref="T:RepoDb.ClassProperty"/> and <see cref="T:System.Reflection.ParameterInfo"/> objects.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.ClassProperty">
            <summary>
            Gets the instance of <see cref="T:RepoDb.ClassProperty"/> object in used.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.ParameterInfo">
            <summary>
            Gets the instance of <see cref="T:System.Reflection.ParameterInfo"/> object in used.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.ParameterInfoMappedClassProperty">
            <summary>
            Gets the instance of <see cref="T:RepoDb.ClassProperty"/> object that is mapped to the current <see cref="P:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.ParameterInfo"/>.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.GetTargetType">
            <summary>
            Gets the target type based on the combinations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.GetDescriptiveContextString">
            <summary>
            Gets the descriptive context string for error messaging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ClassPropertyParameterInfo.ToString">
            <summary>
            Returns the string that represents this object.
            </summary>
            <returns>The presented string.</returns>
        </member>
        <member name="T:RepoDb.Reflection.Compiler.FieldDirection">
             <summary>
            
             </summary>
        </member>
        <member name="T:RepoDb.Reflection.Compiler.MemberBinding">
            <summary>
            A class that contains both the property <see cref="P:RepoDb.Reflection.Compiler.MemberBinding.MemberAssignment"/> object and the constructor argument <see cref="T:System.Linq.Expressions.Expression"/> value.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.MemberBinding.ClassProperty">
            <summary>
            Gets the instance of <see cref="P:RepoDb.Reflection.Compiler.MemberBinding.ClassProperty"/> object in used.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.MemberBinding.ParameterInfo">
            <summary>
            Gets the instance of <see cref="P:RepoDb.Reflection.Compiler.MemberBinding.ParameterInfo"/> object in used.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.MemberBinding.MemberAssignment">
            <summary>
            Gets the current member assignment of the defined property.
            </summary>
        </member>
        <member name="P:RepoDb.Reflection.Compiler.MemberBinding.Argument">
            <summary>
            Gets the corresponding constructor argument of the defined property.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.MemberBinding.ToString">
            <summary>
            Returns the string that represents this object.
            </summary>
            <returns>The presented string.</returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetInputFieldDirections(System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetOutputFieldDirections(System.Collections.Generic.IEnumerable{RepoDb.DbField})">
             <summary>
            
             </summary>
             <param name="fields"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetSystemConvertToTypeMethod(System.Type,System.Type)">
             <summary>
            
             </summary>
             <param name="fromType"></param>
             <param name="toType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetSystemConvertChangeTypeMethod(System.Type)">
             <summary>
            
             </summary>
             <param name="conversionType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassHandler(System.Type)">
             <summary>
            
             </summary>
             <param name="type"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassHandlerGetMethod(System.Object)">
             <summary>
            
             </summary>
             <param name="handlerInstance"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassHandlerSetMethod(System.Object,System.Type[])">
             <summary>
            
             </summary>
             <param name="handlerInstance"></param>
             <param name="types"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerGetMethod(System.Object)">
             <summary>
            
             </summary>
             <param name="handlerInstance"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbCommandCreateParameterMethod">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterCollectionAddMethod">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerSetMethod(System.Object)">
             <summary>
            
             </summary>
             <param name="handlerInstance"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerGetParameter(RepoDb.Reflection.Compiler.ClassPropertyParameterInfo)">
             <summary>
            
             </summary>
             <param name="classPropertyParameterInfo"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerGetParameter(RepoDb.ClassProperty)">
             <summary>
            
             </summary>
             <param name="classProperty"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerGetParameter(System.Object)">
             <summary>
            
             </summary>
             <param name="handlerInstance"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerGetParameter(System.Reflection.MethodInfo)">
             <summary>
            
             </summary>
             <param name="getMethod"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerSetParameter(System.Object)">
             <summary>
            
             </summary>
             <param name="handlerInstance"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyHandlerSetParameter(System.Reflection.MethodInfo)">
             <summary>
            
             </summary>
             <param name="setMethod"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDataReaderFields(System.Data.Common.DbDataReader,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="reader"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDataReaderFields(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="reader"></param>
             <param name="dbFields"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetHandlerInstance(RepoDb.Reflection.Compiler.ClassPropertyParameterInfo,RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="classPropertyParameterInfo"></param>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetHandlerInstance(RepoDb.ClassProperty,RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="classProperty"></param>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueMethod(RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueMethod(System.Type)">
             <summary>
            
             </summary>
             <param name="targetType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueMethod">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueOrDefaultMethod(RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueOrDefaultMethod(System.Type)">
             <summary>
            
             </summary>
             <param name="targetType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterValueSetMethod">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetTimeSpanTicksProperty">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetTimeSpanTicksPropertyGetMethod">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDateTimeTimeOfDayProperty">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDateTimeTimeOfDayPropertyGetMethod">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToNullableGetValueOrDefaultExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToNullableValueExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToGuidToStringExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToStringToGuidExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToTimeSpanToDateTimeExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToDateTimeToTimeSpanExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToTimeSpanTicksExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToDateTimeTimeOfDayExpression(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToSystemConvertExpression(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToTypeExpression(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToEnumExpression(System.Linq.Expressions.Expression,System.Type,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="fromType"></param>
             <param name="toEnumType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToEnumExpressionForString(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toEnumType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToEnumExpressionForNonString(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toEnumType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertEnumExpressionToTypeExpression(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertEnumExpressionToTypeExpressionForString(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertEnumExpressionToTypeExpressionForNonString(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToDbNullExpression(System.Linq.Expressions.Expression,System.String)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="propertyName"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToNullableExpression(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="targetNullableType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToPropertyHandlerGetExpression(System.Linq.Expressions.Expression,System.Object,RepoDb.Reflection.Compiler.ClassPropertyParameterInfo)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="handlerInstance"></param>
             <param name="classPropertyParameterInfo"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionWithAutomaticConversion(System.Linq.Expressions.Expression,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="toType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToPropertyHandlerSetExpression(System.Linq.Expressions.Expression,RepoDb.ClassProperty,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="classProperty"></param>
             <param name="targetType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToPropertyHandlerSetExpressionTuple(System.Linq.Expressions.Expression,RepoDb.ClassProperty,System.Type)">
             <summary>
            
             </summary>
             <param name="expression"></param>
             <param name="classProperty"></param>
             <param name="targetType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToClassHandlerGetExpression``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="entityExpression"></param>
             <param name="readerParameterExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ConvertExpressionToClassHandlerSetExpression``1(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="entityOrEntitiesExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassPropertyParameterInfoValueExpression(System.Linq.Expressions.ParameterExpression,RepoDb.Reflection.Compiler.ClassPropertyParameterInfo,RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="readerParameterExpression"></param>
             <param name="classPropertyParameterInfo"></param>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassPropertyParameterInfoIsDbNullTrueValueExpression(RepoDb.Reflection.Compiler.ClassPropertyParameterInfo,RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="classPropertyParameterInfo"></param>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassPropertyParameterInfoIsDbNullFalseValueExpression(System.Linq.Expressions.ParameterExpression,RepoDb.Reflection.Compiler.ClassPropertyParameterInfo,RepoDb.DataReaderField)">
             <summary>
            
             </summary>
             <param name="readerParameterExpression"></param>
             <param name="classPropertyParameterInfo"></param>
             <param name="readerField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetNullableTypeExpression(System.Type)">
             <summary>
            
             </summary>
             <param name="targetType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetClassPropertyParameterInfos``1(System.Collections.Generic.IEnumerable{System.String},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="readerFieldsName"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetMemberBindingsForDataEntity``1(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IEnumerable{RepoDb.DataReaderField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Returns the list of the bindings for the entity.
            </summary>
            <typeparam name="TResult">The target entity type.</typeparam>
            <param name="readerParameterExpression">The data reader parameter.</param>
            <param name="readerFields">The list of fields to be bound from the data reader.</param>
            <param name="dbSetting">The database setting that is being used.</param>
            <returns>The enumerable list of <see cref="T:RepoDb.Reflection.Compiler.MemberBinding"/> objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbNullExpression(System.Linq.Expressions.ParameterExpression,System.Int32)">
             <summary>
            
             </summary>
             <param name="readerParameterExpression"></param>
             <param name="ordinal"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbNullExpression(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ConstantExpression)">
             <summary>
            
             </summary>
             <param name="readerParameterExpression"></param>
             <param name="ordinalExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueExpression(System.Linq.Expressions.ParameterExpression,System.Reflection.MethodInfo,System.Int32)">
             <summary>
            
             </summary>
             <param name="readerParameterExpression"></param>
             <param name="readerGetValueMethod"></param>
             <param name="ordinal"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbReaderGetValueExpression(System.Linq.Expressions.ParameterExpression,System.Reflection.MethodInfo,System.Linq.Expressions.ConstantExpression)">
             <summary>
            
             </summary>
             <param name="readerParameterExpression"></param>
             <param name="readerGetValueMethod"></param>
             <param name="ordinalExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetMemberBindingsForDictionary(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IList{RepoDb.DataReaderField})">
            <summary>
            Returns the list of the bindings for the object.
            </summary>
            <param name="readerParameterExpression">The data reader parameter.</param>
            <param name="readerFields">The list of fields to be bound from the data reader.</param>
            <returns>The enumerable list of child elements initializations.</returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetEntityInstancePropertyValueExpression(System.Linq.Expressions.Expression,RepoDb.ClassProperty,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="entityInstanceExpression"></param>
             <param name="classProperty"></param>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.IsPostgreSqlUserDefined(RepoDb.DbField)">
            <summary>
            
            </summary>
            <param name="dbField"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetSize(System.Nullable{System.Int32},RepoDb.DbField)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <param name="dbField"></param>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetObjectInstancePropertyValueExpression(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="propertyExpression"></param>
             <param name="objectInstanceExpression"></param>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDictionaryStringObjectPropertyValueExpression(System.Linq.Expressions.Expression,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="dictionaryInstanceExpression"></param>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDataEntityDbParameterValueAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,RepoDb.ClassProperty,RepoDb.DbField,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="entityExpression"></param>
             <param name="propertyExpression"></param>
             <param name="classProperty"></param>
             <param name="dbField"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDictionaryStringObjectDbParameterValueAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,RepoDb.DbField,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="dictionaryInstanceExpression"></param>
             <param name="dbField"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterDbTypeAssignmentExpression(System.Linq.Expressions.ParameterExpression,RepoDb.ClassProperty,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="classProperty"></param>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterDbTypeAssignmentExpression(System.Linq.Expressions.ParameterExpression,RepoDb.DbField)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="dbField"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterDbTypeAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Nullable{System.Data.DbType})">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="dbType"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbCommandCreateParameterExpression(System.Linq.Expressions.ParameterExpression)">
             <summary>
            
             </summary>
             <param name="commandParameterExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterNameAssignmentExpression(System.Linq.Expressions.ParameterExpression,RepoDb.DbField,System.Int32,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="dbField"></param>
             <param name="entityIndex"></param>
             <param name="dbSetting"></param>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterDirectionAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Data.ParameterDirection)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="direction"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterSizeAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Int32)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="size"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterSizeAssignmentExpression(System.Linq.Expressions.Expression,System.Int32)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="size"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterPrecisionAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Byte)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="precision"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterScaleAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Byte)">
             <summary>
            
             </summary>
             <param name="parameterVariableExpression"></param>
             <param name="scale"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbCommandParametersAddExpression(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression)">
             <summary>
            
             </summary>
             <param name="commandParameterExpression"></param>
             <param name="parameterVariable"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbParameterCollectionClearMethodExpression(System.Linq.Expressions.MemberExpression)">
             <summary>
            
             </summary>
             <param name="dbParameterCollectionExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDataEntityParameterAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Int32,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,RepoDb.DbField,RepoDb.ClassProperty,System.Data.ParameterDirection,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandParameterExpression"></param>
             <param name="entityIndex"></param>
             <param name="entityExpression"></param>
             <param name="propertyExpression"></param>
             <param name="dbField"></param>
             <param name="classProperty"></param>
             <param name="direction"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDictionaryStringObjectParameterAssignmentExpression(System.Linq.Expressions.ParameterExpression,System.Int32,System.Linq.Expressions.Expression,RepoDb.DbField,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandParameterExpression"></param>
             <param name="entityIndex"></param>
             <param name="dictionaryInstanceExpression"></param>
             <param name="dbField"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyFieldExpression(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression,RepoDb.Reflection.Compiler.FieldDirection,System.Int32,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <param name="commandParameterExpression"></param>
             <param name="entityExpression"></param>
             <param name="fieldDirection"></param>
             <param name="entityIndex"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetDbCommandParametersClearExpression(System.Linq.Expressions.ParameterExpression)">
             <summary>
            
             </summary>
             <param name="commandParameterExpression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetListEntityIndexerExpression(System.Linq.Expressions.Expression,System.Type,System.Int32)">
             <summary>
            
             </summary>
             <param name="entitiesParameterExpression"></param>
             <param name="typeOfListEntity"></param>
             <param name="entityIndex"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.ThrowIfNullAfterClassHandlerExpression``1(System.Linq.Expressions.Expression)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="expression"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetIndexDbParameterSetterExpression``1(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{RepoDb.Reflection.Compiler.FieldDirection},System.Int32,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="commandParameterExpression"></param>
             <param name="entitiesParameterExpression"></param>
             <param name="fieldDirections"></param>
             <param name="entityIndex"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataEntityDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataEntityListDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="batchSize"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataEntityPropertySetter``1(RepoDb.Field)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataEntityPropertySetter``1(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="property"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataReaderToExpandoObject(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="dbFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataReaderToType``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="reader"></param>
             <param name="dbFields"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataReaderToTargetType``1(System.Data.Common.DbDataReader,RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="reader"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDataReaderToDataEntity``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
             <summary>
            
             </summary>
             <typeparam name="TResult"></typeparam>
             <param name="reader"></param>
             <param name="dbFields"></param>
             <param name="dbSetting"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDbCommandToProperty``1(RepoDb.Field,System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <param name="parameterName"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDictionaryStringObjectDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDictionaryStringObjectItemSetter``1(RepoDb.Field)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.CompileDictionaryStringObjectListDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="batchSize"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPlainTypeToDbParametersCompiledFunction(System.Type,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            
            </summary>
            <param name="paramType"></param>
            <param name="entityType"></param>
            <param name="dbFields"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPlainTypeToDbParametersForEnumCompiledFunction(System.Linq.Expressions.Expression,RepoDb.ClassProperty,RepoDb.DbField,System.Type,System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="commandParameterExpression"></param>
            <param name="paramProperty"></param>
            <param name="dbField"></param>
            <param name="valueType"></param>
            <param name="valueExpression"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.InvokePropertyHandlerViaExpression(RepoDb.ClassProperty,System.Type@,System.Linq.Expressions.Expression@)">
            <summary>
            
            </summary>
            <param name="classProperty"></param>
            <param name="valueType"></param>
            <param name="valueExpression"></param>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyValueAttributeAssignmentExpressions(System.Linq.Expressions.ParameterExpression,RepoDb.ClassProperty)">
             <summary>
            
             </summary>
             <param name="parameterVariable"></param>
             <param name="classProperty"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetParameterPropertyValueSetterAttributesAssignmentExpressions(System.Linq.Expressions.Expression,RepoDb.ClassProperty)">
             <summary>
            
             </summary>
             <param name="parameterVariable"></param>
             <param name="classProperty"></param>
             <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyValueAttributesAssignmentExpression(System.Linq.Expressions.ParameterExpression,RepoDb.Attributes.Parameter.PropertyValueAttribute)">
            <summary>
            
            </summary>
            <param name="parameterVariableExpression"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyValueAttributesAssignmentExpression(System.Linq.Expressions.Expression,RepoDb.Attributes.Parameter.PropertyValueAttribute)">
            <summary>
            
            </summary>
            <param name="parameterExpression"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.Compiler.GetPropertyValueAttributeSetValueMethod">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Reflection.DataReader">
            <summary>
            A static classed used to manipulate the <see cref="T:System.Data.Common.DbDataReader"/> object.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerable``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of data entity objects.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns>A list of the target result type.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerableAsync``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting,System.Threading.CancellationToken)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of data entity objects in asynchronous way.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>A list of the target result type.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerable(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns>An array of dynamic objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReader.ToEnumerableAsync(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting,System.Threading.CancellationToken)">
            <summary>
            Converts the <see cref="T:System.Data.Common.DbDataReader"/> into an enumerable of dynamic objects.
            </summary>
            <param name="reader">The <see cref="T:System.Data.Common.DbDataReader"/> to be converted.</param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> object to be used during the asynchronous operation.</param>
            <returns>An array of dynamic objects.</returns>
        </member>
        <member name="T:RepoDb.Reflection.FunctionFactory">
            <summary>
            A static factory class used to create a custom compiled function.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDataReaderToType``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="reader"></param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDataReaderToExpandoObject(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="dbFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDataEntityDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDataEntityListDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="batchSize"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDictionaryStringObjectDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDictionaryStringObjectListDbParameterSetter``1(System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="inputFields"></param>
            <param name="batchSize"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDictionaryStringObjectItemSetter``1(RepoDb.Field)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDbCommandToProperty``1(RepoDb.Field,System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <param name="parameterName"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.CompileDataEntityPropertySetter``1(RepoDb.Field)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Reflection.FunctionFactory.GetPlainTypeToDbParametersCompiledFunction(System.Type,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            
            </summary>
            <param name="paramType"></param>
            <param name="entityType"></param>
            <param name="dbFields"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Reflection.Delegates.DataReaderToDataEntityFunction`1">
            <summary>
            A compiled function that is used to map the <see cref="T:System.Data.Common.DbDataReader"/> into data entity object.
            </summary>
            <typeparam name="TEntity">The data entity object to map.</typeparam>
            <returns>An instance of data entity object containing the values from the <see cref="T:System.Data.Common.DbDataReader"/> object.</returns>
        </member>
        <member name="T:RepoDb.Reflection.Delegates.DataReaderToExpandoObjectFunction">
            <summary>
            A compiled function that is used to map the <see cref="T:System.Data.Common.DbDataReader"/> into <see cref="T:System.Dynamic.ExpandoObject"/> object.
            </summary>
            <returns>An instance of <see cref="T:System.Dynamic.ExpandoObject"/> object containing the values from the <see cref="T:System.Data.Common.DbDataReader"/> object.</returns>
        </member>
        <member name="T:RepoDb.FunctionCache">
            <summary>
            A class that is being used to cache the compiled functions.
            </summary>
        </member>
        <member name="M:RepoDb.FunctionCache.GetReaderFieldsHashCode(System.Data.Common.DbDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataReaderToTypeCompiledFunction``1(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="reader"></param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.DataReaderToTypeCache`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:RepoDb.FunctionCache.DataReaderToTypeCache`1.Get(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="dbFields">The list of the <see cref="T:RepoDb.DbField"/> objects to be used.</param>
            <param name="dbSetting">The instance of <see cref="T:RepoDb.Interfaces.IDbSetting"/> object to be used.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.DataReaderToTypeCache`1.GetKey(System.Data.Common.DbDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataReaderToExpandoObjectCompileFunction(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="dbFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.DataReaderToExpandoObjectCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.FunctionCache.DataReaderToExpandoObjectCache.Get(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="dbFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.DataReaderToExpandoObjectCache.GetKey(System.Data.Common.DbDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataEntityDbParameterSetterCompiledFunction``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="cacheKey"></param>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.DataEntityDbParameterSetterCache`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:RepoDb.FunctionCache.DataEntityDbParameterSetterCache`1.Get(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="cacheKey"></param>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.DataEntityDbParameterSetterCache`1.GetKey(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            
            </summary>
            <param name="cacheKey"></param>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataEntityListDbParameterSetterCompiledFunction``1(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="cacheKey"></param>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="batchSize"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.DataEntityListDbParameterSetterCache`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:RepoDb.FunctionCache.DataEntityListDbParameterSetterCache`1.Get(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="cacheKey"></param>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="batchSize"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.DataEntityListDbParameterSetterCache`1.GetKey(System.String,System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Collections.Generic.IEnumerable{RepoDb.DbField},System.Int32)">
            <summary>
            
            </summary>
            <param name="cacheKey"></param>
            <param name="inputFields"></param>
            <param name="outputFields"></param>
            <param name="batchSize"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDbCommandToPropertyCompiledFunction``1(RepoDb.Field,System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <param name="parameterName"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.DbCommandToPropertyCache`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:RepoDb.FunctionCache.DbCommandToPropertyCache`1.Get(RepoDb.Field,System.String,System.Int32,RepoDb.Interfaces.IDbSetting)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <param name="parameterName"></param>
            <param name="index"></param>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetDataEntityPropertySetterCompiledFunction``1(RepoDb.Field)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.DataEntityPropertySetterCache`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:RepoDb.FunctionCache.DataEntityPropertySetterCache`1.Get(RepoDb.Field)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.FunctionCache.GetPlainTypeToDbParametersCompiledFunction(System.Type,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            
            </summary>
            <param name="paramType"></param>
            <param name="entityType"></param>
            <param name="dbFields"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.FunctionCache.PlainTypeToDbParametersCompiledFunctionCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:RepoDb.FunctionCache.PlainTypeToDbParametersCompiledFunctionCache.Get(System.Type,System.Type,System.Collections.Generic.IEnumerable{RepoDb.DbField})">
            <summary>
            
            </summary>
            <param name="paramType"></param>
            <param name="entityType"></param>
            <param name="dbFields"></param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.Requests.AverageAllRequest">
            <summary>
            A class that holds the value of the 'AverageAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.AverageAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.AverageAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.AverageAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.AverageAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.AverageAllRequest.Field">
            <summary>
            Gets the field to be averaged.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.AverageAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.AverageAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.AverageAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.AverageRequest">
            <summary>
            A class that holds the value of the 'Average' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.AverageRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.AverageRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.AverageRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.AverageRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.AverageRequest.Field">
            <summary>
            Gets the field to be averaged.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.AverageRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.AverageRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.AverageRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.AverageRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.BaseRequest">
            <summary>
            A base class for all operational request.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.BaseRequest"/> object.
            </summary>
            <param name="name">The name of request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Connection">
            <summary>
            Gets the connection object.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.Transaction">
            <summary>
            Gets the transaction object.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BaseRequest.StatementBuilder">
            <summary>
            Gets the statement builder.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.BaseRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.BaseRequest"/> object equality against the given target object.
            </summary>
            <param name="obj">The object to be compared to the current object.</param>
            <returns>True if the instances are equals.</returns>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.Equals(RepoDb.Requests.BaseRequest)">
            <summary>
            Compares the <see cref="T:RepoDb.Requests.BaseRequest"/> object equality against the given target object.
            </summary>
            <param name="other">The object to be compared to the current object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.op_Equality(RepoDb.Requests.BaseRequest,RepoDb.Requests.BaseRequest)">
            <summary>
            Compares the equality of the two <see cref="T:RepoDb.Requests.BaseRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.BaseRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.BaseRequest"/> object.</param>
            <returns>True if the instances are equal.</returns>
        </member>
        <member name="M:RepoDb.Requests.BaseRequest.op_Inequality(RepoDb.Requests.BaseRequest,RepoDb.Requests.BaseRequest)">
            <summary>
            Compares the inequality of the two <see cref="T:RepoDb.Requests.BaseRequest"/> objects.
            </summary>
            <param name="objA">The first <see cref="T:RepoDb.Requests.BaseRequest"/> object.</param>
            <param name="objB">The second <see cref="T:RepoDb.Requests.BaseRequest"/> object.</param>
            <returns>True if the instances are not equal.</returns>
        </member>
        <member name="T:RepoDb.Requests.BatchQueryRequest">
            <summary>
            A class that holds the value of the 'BatchQuery' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.BatchQueryRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Page">
            <summary>
            Gets the filter for the rows.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.RowsPerBatch">
            <summary>
            Gets the number of rows per batch.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.BatchQueryRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.BatchQueryRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.BatchQueryRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.CountAllRequest">
            <summary>
            A class that holds the value of the 'CountAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.CountAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.CountAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.CountRequest">
            <summary>
            A class that holds the value of the 'Count' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.CountRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.CountRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.CountRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.CountRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.CountRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.DeleteAllRequest">
            <summary>
            A class that holds the value of the 'DeleteAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.DeleteAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.DeleteAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.DeleteRequest">
            <summary>
            A class that holds the value of the 'Delete' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.DeleteRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.DeleteRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.DeleteRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.DeleteRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.DeleteRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.ExistsRequest">
            <summary>
            A class that holds the value of the 'Exists' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.ExistsRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.ExistsRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.ExistsRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.ExistsRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.ExistsRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.ExistsRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.ExistsRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.ExistsRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.InsertAllRequest">
            <summary>
            A class that holds the value of the 'Insert' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="batchSize">The batch size of the insertion.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.InsertAllRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.InsertAllRequest.BatchSize">
            <summary>
            Gets the size batch of the insertion.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.InsertAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.InsertAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.InsertRequest">
            <summary>
            A class that holds the value of the 'Insert' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.InsertRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.InsertRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.InsertRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.InsertRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.InsertRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.MaxAllRequest">
            <summary>
            A class that holds the value of the 'MaxAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MaxAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MaxAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MaxAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MaxAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MaxAllRequest.Field">
            <summary>
            Gets the field to be maximized.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MaxAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MaxAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MaxAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.MaxRequest">
            <summary>
            A class that holds the value of the 'Max' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MaxRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MaxRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MaxRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MaxRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MaxRequest.Field">
            <summary>
            Gets the field to be maximized.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MaxRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MaxRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MaxRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MaxRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.MergeAllRequest">
            <summary>
            A class that holds the value of the 'MergeAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MergeAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MergeAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MergeAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MergeAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the merge operation.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MergeAllRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MergeAllRequest.Qualifiers">
            <summary>
            Gets the qualifier <see cref="T:RepoDb.Field"/> objects.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MergeAllRequest.BatchSize">
            <summary>
            Gets the size batch of the update operation.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MergeAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MergeAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MergeAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.MergeRequest">
            <summary>
            A class that holds the value of the 'Merge' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MergeRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MergeRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MergeRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MergeRequest.Qualifiers">
            <summary>
            Gets the qualifier <see cref="T:RepoDb.Field"/> objects.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MergeRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MergeRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MergeRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.MinAllRequest">
            <summary>
            A class that holds the value of the 'MinAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MinAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MinAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MinAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MinAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MinAllRequest.Field">
            <summary>
            Gets the field to be minimized.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MinAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MinAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MinAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.MinRequest">
            <summary>
            A class that holds the value of the 'Min' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MinRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MinRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.MinRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.MinRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.MinRequest.Field">
            <summary>
            Gets the field to be minimized.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MinRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.MinRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.MinRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.MinRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.QueryAllRequest">
            <summary>
            A class that holds the value of the 'QueryAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.QueryAllRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryAllRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.QueryAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.QueryMultipleRequest">
            <summary>
            A class that holds the value of the 'QueryMultiple' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.#ctor(System.Nullable{System.Int32},System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.
            </summary>
            <param name="index">The index value.</param>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.#ctor(System.Nullable{System.Int32},System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryMultipleRequest"/> object.
            </summary>
            <param name="index">The index value.</param>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Index">
            <summary>
            Gets the index used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Top">
            <summary>
            Gets the filter for the rows.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryMultipleRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryMultipleRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.QueryMultipleRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.QueryRequest">
            <summary>
            A class that holds the value of the 'Query' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.QueryRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of order fields.</param>
            <param name="top">The filter for the rows.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Fields">
            <summary>
            Gets the list of the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.OrderBy">
            <summary>
            Gets the list of the order fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Top">
            <summary>
            Gets the filter for the rows.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.QueryRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.QueryRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.QueryRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.SumAllRequest">
            <summary>
            A class that holds the value of the 'SumAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.SumAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.SumAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.SumAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.SumAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.SumAllRequest.Field">
            <summary>
            Gets the field to be summarized.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.SumAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.SumAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.SumAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.SumRequest">
            <summary>
            A class that holds the value of the 'Sum' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.SumRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.SumRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.SumRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Field,RepoDb.QueryGroup,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.SumRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="field">The field object.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.SumRequest.Field">
            <summary>
            Gets the field to be summarized.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.SumRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.SumRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.SumRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.SumRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.TruncateRequest">
            <summary>
            A class that holds the value of the 'Truncate' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.TruncateRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.TruncateRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.TruncateRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.TruncateRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.UpdateAllRequest">
            <summary>
            A class that holds the value of the 'UpdateAll' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.UpdateAllRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.UpdateAllRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.UpdateAllRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.UpdateAllRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the update operation.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.UpdateAllRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.UpdateAllRequest.Qualifiers">
            <summary>
            Gets the qualifiers fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.UpdateAllRequest.BatchSize">
            <summary>
            Gets the size batch of the update operation.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.UpdateAllRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.UpdateAllRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.UpdateAllRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Requests.UpdateRequest">
            <summary>
            A class that holds the value of the 'Update' operation arguments.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.#ctor(System.Type,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.UpdateRequest"/> object.
            </summary>
            <param name="type">The target type.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.#ctor(System.String,System.Data.IDbConnection,System.Data.IDbTransaction,RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.Field},System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Requests.UpdateRequest"/> object.
            </summary>
            <param name="name">The name of the request.</param>
            <param name="connection">The connection object.</param>
            <param name="transaction">The transaction object.</param>
            <param name="where">The query expression.</param>
            <param name="fields">The list of the target fields.</param>
            <param name="hints">The hints for the table.</param>
            <param name="statementBuilder">The statement builder.</param>
        </member>
        <member name="P:RepoDb.Requests.UpdateRequest.Where">
            <summary>
            Gets the query expression used.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.UpdateRequest.Fields">
            <summary>
            Gets the target fields.
            </summary>
        </member>
        <member name="P:RepoDb.Requests.UpdateRequest.Hints">
            <summary>
            Gets the hints for the table.
            </summary>
        </member>
        <member name="M:RepoDb.Requests.UpdateRequest.GetHashCode">
            <summary>
            Returns the hashcode for this <see cref="T:RepoDb.Requests.UpdateRequest"/>.
            </summary>
            <returns>The hashcode value.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.ClassHandlerResolver">
            <summary>
            A class that is being used to resolve the equivalent <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object of the .NET CLR type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.ClassHandlerResolver.Resolve(System.Type)">
            <summary>
            Resolves the equivalent <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object of the .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type</param>
            <returns>The equivalent <see cref="T:RepoDb.Interfaces.IClassHandler`1"/> object of the .NET CLR type.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.ClassMappedNameResolver">
            <summary>
            A class that is being used to resolve the database object name mappings of the data entity type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.ClassMappedNameResolver.Resolve(System.Type)">
            <summary>
            Resolves the mapped database object name mappings of the data entity type.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The mapped database object name.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.ClientTypeToAverageableClientTypeResolver">
            <summary>
            A class that is being used to resolve the .NET CLR type into its averageable .NET CLR type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.ClientTypeToAverageableClientTypeResolver.Resolve(System.Type)">
            <summary>
            Returns the averageable .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type.</param>
            <returns>The averageable .NET CLR type.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.ClientTypeToDbTypeResolver">
            <summary>
            A class that is being used to resolve the .NET CLR Types into its equivalent SQL Server <see cref="T:System.Data.DbType"/> value.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.ClientTypeToDbTypeResolver.Resolve(System.Type)">
            <summary>
            Returns the equivalent <see cref="T:System.Data.DbType"/> of the target .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type.</param>
            <returns>The equivalent <see cref="T:System.Data.DbType"/> Type.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.DbConvertFieldResolver">
            <summary>
            A class that is being used to resolve the <see cref="T:RepoDb.Field"/> name conversion.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.DbConvertFieldResolver.#ctor(RepoDb.Interfaces.IResolver{System.Type,System.Nullable{System.Data.DbType}},RepoDb.Interfaces.IResolver{System.Data.DbType,System.String})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.Resolvers.DbConvertFieldResolver"/> class.
            </summary>
        </member>
        <member name="P:RepoDb.Resolvers.DbConvertFieldResolver.DbTypeResolver">
            <summary>
            Gets the resolver that is being used to resolve the .NET CLR type and <see cref="T:System.Data.DbType"/>.
            </summary>
        </member>
        <member name="P:RepoDb.Resolvers.DbConvertFieldResolver.StringNameResolver">
            <summary>
            Gets the resolver that is being used to resolve the <see cref="T:System.Data.DbType"/> and the database type string name.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.DbConvertFieldResolver.Resolve(RepoDb.Field,RepoDb.Interfaces.IDbSetting)">
            <summary>
            Returns the converted name of the <see cref="T:RepoDb.Field"/> object.
            </summary>
            <param name="field">The instance of the <see cref="T:RepoDb.Field"/> to be converted.</param>
            <param name="dbSetting">The current in used <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.</param>
            <returns>The converted name of the <see cref="T:RepoDb.Field"/> object.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.DbTypeToClientTypeResolver">
            <summary>
            A class that is being used to resolve the <see cref="T:System.Data.DbType"/> into its equivalent .NET CLR Types.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.DbTypeToClientTypeResolver.Resolve(System.Data.DbType)">
            <summary>
            Returns the equivalent <see cref="T:System.Data.DbType"/> of the .NET CLR Types.
            </summary>
            <param name="dbType">The type of the database.</param>
            <returns>The equivalent string name.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.IdentityResolver">
            <summary>
            A class that is being used to resolve the identity property of the data entity type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.IdentityResolver.Resolve(System.Type)">
            <summary>
            Resolves the identity <see cref="T:RepoDb.ClassProperty"/> of the data entity type.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The instance of the identity <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.PrimaryResolver">
            <summary>
            A class that is being used to resolve the primary property of the data entity type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.PrimaryResolver.Resolve(System.Type)">
            <summary>
            Resolves the primary <see cref="T:RepoDb.ClassProperty"/> of the data entity type.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <returns>The instance of the primary <see cref="T:RepoDb.ClassProperty"/> object.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.PropertyHandlerPropertyLevelResolver">
            <summary>
            A class that is being used to resolve the equivalent <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.PropertyHandlerPropertyLevelResolver.Resolve(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Resolves the equivalent <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.
            </summary>
            <param name="entityType">The type of the data entity.</param>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be resolved.</param>
            <returns>The equivalent <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the property.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.PropertyHandlerTypeLevelResolver">
            <summary>
            A class that is being used to resolve the equivalent <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the .NET CLR type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.PropertyHandlerTypeLevelResolver.Resolve(System.Type)">
            <summary>
            Resolves the equivalent <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type</param>
            <returns>The equivalent <see cref="T:RepoDb.Interfaces.IPropertyHandler`2"/> object of the .NET CLR type.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.PropertyMappedNameResolver">
            <summary>
            A class that is being used to resolve the database object name mappings of the data entity type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.PropertyMappedNameResolver.Resolve(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Resolves the cached column name mappings of the property.
            </summary>
            <param name="propertyInfo">The target property.</param>
            <param name="declaringType">The declaring type of the target property. Usually, the type of the parent derived class, not the base class.</param>
            <returns>The cached column name mappings of the property.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.PropertyValueAttributeResolver">
            <summary>
            A class that is being used to resolve the associated <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the property.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.PropertyValueAttributeResolver.Resolve(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Resolves the associated <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects of the property.
            </summary>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be resolved.</param>
            <param name="includeMappings">True to evaluate the existing mappings.</param>
            <returns>The list of associated <see cref="T:RepoDb.Attributes.Parameter.PropertyValueAttribute"/> objects on the property.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.TypeMapPropertyLevelResolver">
            <summary>
            A class that is being used to resolve the equivalent <see cref="T:System.Data.DbType"/> object of the property.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.TypeMapPropertyLevelResolver.Resolve(System.Reflection.PropertyInfo)">
            <summary>
            Resolves the equivalent <see cref="T:System.Data.DbType"/> object of the property.
            </summary>
            <param name="propertyInfo">The instance of <see cref="T:System.Reflection.PropertyInfo"/> to be resolved.</param>
            <returns>The equivalent <see cref="T:System.Data.DbType"/> object of the property.</returns>
        </member>
        <member name="T:RepoDb.Resolvers.TypeMapTypeLevelResolver">
            <summary>
            A class that is being used to resolve the equivalent <see cref="T:System.Data.DbType"/> object of the .NET CLR type.
            </summary>
        </member>
        <member name="M:RepoDb.Resolvers.TypeMapTypeLevelResolver.Resolve(System.Type)">
            <summary>
            Resolves the equivalent <see cref="T:System.Data.DbType"/> object of the .NET CLR type.
            </summary>
            <param name="type">The .NET CLR type.</param>
            <returns>The equivalent <see cref="T:System.Data.DbType"/> object of the .NET CLR type.</returns>
        </member>
        <member name="T:RepoDb.StatementBuilders.BaseStatementBuilder">
            <summary>
            A base class for all <see cref="T:RepoDb.Interfaces.IStatementBuilder"/>-based objects.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.#ctor(RepoDb.Interfaces.IDbSetting,RepoDb.Interfaces.IResolver{RepoDb.Field,RepoDb.Interfaces.IDbSetting,System.String},RepoDb.Interfaces.IResolver{System.Type,System.Type})">
            <summary>
            Creates a new instance of <see cref="T:RepoDb.StatementBuilders.BaseStatementBuilder"/> class.
            </summary>
            <param name="dbSetting">The database settings object currently in used.</param>
            <param name="convertFieldResolver">The resolver used when converting a field in the database layer.</param>
            <param name="averageableClientTypeResolver">The resolver used to identity the type for average.</param>
        </member>
        <member name="P:RepoDb.StatementBuilders.BaseStatementBuilder.DbSetting">
            <summary>
            Gets the database setting object that is currently in used.
            </summary>
        </member>
        <member name="P:RepoDb.StatementBuilders.BaseStatementBuilder.ConvertFieldResolver">
            <summary>
            Gets the resolver used to convert the <see cref="T:RepoDb.Field"/> object.
            </summary>
        </member>
        <member name="P:RepoDb.StatementBuilders.BaseStatementBuilder.AverageableClientTypeResolver">
            <summary>
            Gets the resolver that is being used to resolve the type to be averageable type.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateAverage(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Average' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for average operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateAverageAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'AverageAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be averaged.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for average-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateCount(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Count' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for count operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateCountAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for 'CountAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for count-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateDelete(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Delete' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for delete operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateDeleteAll(RepoDb.QueryBuilder,System.String,System.String)">
            <summary>
            Creates a SQL Statement for 'DeleteAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for delete-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateExists(RepoDb.QueryBuilder,System.String,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Exists' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for exists operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateInsert(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'Insert' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateInsertAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'InsertAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be inserted.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for insert operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateMax(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Max' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for maximum operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateMaxAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'MaxAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be maximized.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for maximum-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateMin(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Min' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for minimum operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateMinAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'MinAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be minimized.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for minimum-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a SQL Statement for 'Query' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="where">The query expression.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="top">The number of rows to be returned.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateQueryAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String)">
            <summary>
            Creates a SQL Statement for 'QueryAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for query operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateSum(RepoDb.QueryBuilder,System.String,RepoDb.Field,RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'Sum' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for sum operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateSumAll(RepoDb.QueryBuilder,System.String,RepoDb.Field,System.String)">
            <summary>
            Creates a SQL Statement for 'SumAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="field">The field to be summarized.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for sum-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateTruncate(RepoDb.QueryBuilder,System.String)">
            <summary>
            Creates a SQL Statement for 'Truncate' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <returns>A sql statement for truncate operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateUpdate(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'Update' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="where">The query expression.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for update operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateUpdateAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'UpdateAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be updated.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for update-all operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateBatchQuery(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},RepoDb.QueryGroup,System.String)">
            <summary>
            Creates a SQL Statement for 'BatchQuery' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The mapping list of <see cref="T:RepoDb.Field"/> objects to be used.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields for ordering.</param>
            <param name="where">The query expression.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for batch query operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateMerge(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'Merge' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.CreateMergeAll(RepoDb.QueryBuilder,System.String,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Int32,RepoDb.DbField,RepoDb.DbField,System.String)">
            <summary>
            Creates a SQL Statement for 'MergeAll' operation.
            </summary>
            <param name="queryBuilder">The query builder to be used.</param>
            <param name="tableName">The name of the target table.</param>
            <param name="fields">The list of fields to be merged.</param>
            <param name="qualifiers">The list of the qualifier <see cref="T:RepoDb.Field"/> objects.</param>
            <param name="batchSize">The batch size of the operation.</param>
            <param name="primaryField">The primary field from the database.</param>
            <param name="identityField">The identity field from the database.</param>
            <param name="hints">The table hints to be used.</param>
            <returns>A sql statement for merge operation.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.GuardTableName(System.String)">
            <summary>
            Throws an exception if the table name is null or empty.
            </summary>
            <param name="tableName">The name of the table.</param>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.GuardPrimary(RepoDb.DbField)">
            <summary>
            Throws an exception if the primary field is not really a primary field.
            </summary>
            <param name="field">The instance of the primary field.</param>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.GuardIdentity(RepoDb.DbField)">
            <summary>
            Throws an exception if the identity field is not really an identity field.
            </summary>
            <param name="field">The instance of the identity field.</param>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.GuardHints(System.String)">
            <summary>
            Throws an exception if the 'hints' is present and the <see cref="T:RepoDb.Interfaces.IDbSetting"/> object does not support it.
            </summary>
            <param name="hints">The value to be evaluated.</param>
        </member>
        <member name="M:RepoDb.StatementBuilders.BaseStatementBuilder.ValidateMultipleStatementExecution(System.Int32)">
            <summary>
            Throws an exception if the 'batchSize' is greater than 1 and the multiple statement execution is not being supported
            based on the settings of the <see cref="T:RepoDb.Interfaces.IDbSetting"/> object.
            </summary>
            <param name="batchSize">The batch size to be evaluated.</param>
        </member>
        <member name="T:RepoDb.StaticType">
            <summary>
            A static class that contains all the .NET CLR types needed within the library.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.BindingFlags">
            <summary>
            Gets a type of the <see cref="!:System.ReflectionBindingFlags"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Boolean">
            <summary>
            Gets a type of the <see cref="T:System.Boolean"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Byte">
            <summary>
            Gets a type of the <see cref="T:System.Byte"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.ByteArray">
            <summary>
            Gets a type of the <see cref="T:System.Byte"/> (array) .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.CharArray">
            <summary>
            Gets a type of the <see cref="T:System.Char"/> (array) .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.ClassProperty">
            <summary>
            Gets a type of the <see cref="T:RepoDb.ClassProperty"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.ColumnAttribute">
            <summary>
            Gets a type of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Convert">
            <summary>
            Gets a type of the <see cref="T:System.Convert"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Converter">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Converter"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DataTable">
            <summary>
            Gets a type of the <see cref="T:System.Data.DataTable"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DateTime">
            <summary>
            Gets a type of the <see cref="T:System.DateTime"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DateTimeOffset">
            <summary>
            Gets a type of the <see cref="T:System.DateTimeOffset"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbCommand">
            <summary>
            Gets a type of the <see cref="T:System.Data.Common.DbCommand"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbCommandExtension">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Extensions.DbCommandExtension"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbConnection">
            <summary>
            Gets a type of the <see cref="T:System.Data.Common.DbConnection"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbDataReader">
            <summary>
            Gets a type of the <see cref="T:System.Data.Common.DbDataReader"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbParameter">
            <summary>
            Gets a type of the <see cref="T:System.Data.Common.DbParameter"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbParameterCollection">
            <summary>
            Gets a type of the <see cref="T:System.Data.Common.DbParameterCollection"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbType">
            <summary>
            Gets a type of the <see cref="T:System.Data.DbType"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbTypeAttribute">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Attributes.Parameter.DbTypeAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Decimal">
            <summary>
            Gets a type of the <see cref="T:System.Decimal"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Dictionary">
            <summary>
            Gets a type of the <see cref="T:System.Collections.Generic.Dictionary`2"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DictionaryStringObject">
            <summary>
            Gets a type of the <see cref="T:System.Collections.Generic.Dictionary`2"/> (with string/object key-value-pair) .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Double">
            <summary>
            Gets a type of the <see cref="T:System.Double"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Enum">
            <summary>
            Gets a type of the <see cref="T:System.Enum"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.ExpandoObject">
            <summary>
            Gets a type of the <see cref="!:System.DynamicExpandoObject"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Guid">
            <summary>
            Gets a type of the <see cref="T:System.Guid"/> .NET CLR type.
            </summary>;
        </member>
        <member name="P:RepoDb.StaticType.IClassHandler">
            <summary>
            Gets a type of the <see cref="P:RepoDb.StaticType.IClassHandler"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IDbCommand">
            <summary>
            Gets a type of the <see cref="T:System.Data.IDbCommand"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.DbTypeNullable">
            <summary>
            Gets a type of the <see cref="T:System.Nullable`1"/> (of type <see cref="P:RepoDb.StaticType.DbType"/>) .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IdentityAttribute">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Attributes.IdentityAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IEnumerable">
            <summary>
            Gets a type of the <see cref="T:System.Collections.IEnumerable"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IDbDataParameter">
            <summary>
            Gets a type of the <see cref="T:System.Data.IDbDataParameter"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IDictionary">
            <summary>
            Gets a type of the <see cref="T:System.Collections.Generic.IDictionary`2"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IDictionaryStringObject">
            <summary>
            Gets a type of the <see cref="T:System.Collections.Generic.IDictionary`2"/> (with string/object key-value-pair) .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Int16">
            <summary>
            Gets a type of the <see cref="T:System.Int16"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Int32">
            <summary>
            Gets a type of the <see cref="T:System.Int32"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Int64">
            <summary>
            Gets a type of the <see cref="T:System.Int64"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IPropertyHandler">
            <summary>
            Gets a type of the <see cref="P:RepoDb.StaticType.IPropertyHandler"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.IStatementBuilder">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Interfaces.IStatementBuilder"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.MapAttribute">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Attributes.MapAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.NameAttribute">
            <summary>
            Gets a type of the <see cref="!:Attributes.Parameter.ColumnAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Nullable">
            <summary>
            Gets a type of the <see cref="T:System.Nullable"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Object">
            <summary>
            Gets a type of the <see cref="T:System.Object"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Operation">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Enumerations.Operation"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.PropertyValueAttribute">
            <summary>
            Gets a type of the <see cref="P:RepoDb.StaticType.PropertyValueAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.PropertyHandlerAttribute">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Attributes.PropertyHandlerAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.PropertyInfo">
            <summary>
            Gets a type of the <see cref="T:System.Reflection.PropertyInfo"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.PropertyValue">
            <summary>
            Gets a type of the <see cref="T:RepoDb.PropertyValue"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.PropertyValueList">
            <summary>
            Gets a type of the <see cref="T:System.Collections.Generic.List`1"/> (of <see cref="T:RepoDb.PropertyValue"/>) .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.QueryField">
            <summary>
            Gets a type of the <see cref="T:RepoDb.QueryField"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.QueryGroup">
            <summary>
            Gets a type of the <see cref="T:RepoDb.QueryGroup"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Single">
            <summary>
            Gets a type of the <see cref="T:System.Single"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.String">
            <summary>
            Gets a type of the <see cref="T:System.String"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.SqlVariant">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Types.SqlVariant"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.TableAttribute">
            <summary>
            Gets a type of the <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.TimeSpan">
            <summary>
            Gets a type of the <see cref="T:System.TimeSpan"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.Type">
            <summary>
            Gets a type of the <see cref="T:System.Type"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.TypeMapAttribute">
            <summary>
            Gets a type of the <see cref="T:RepoDb.Attributes.TypeMapAttribute"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.UInt16">
            <summary>
            Gets a type of the <see cref="T:System.UInt16"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.UInt32">
            <summary>
            Gets a type of the <see cref="T:System.UInt32"/> .NET CLR type.
            </summary>
        </member>
        <member name="P:RepoDb.StaticType.UInt64">
            <summary>
            Gets a type of the <see cref="T:System.UInt64"/> .NET CLR type.
            </summary>
        </member>
        <member name="T:RepoDb.TraceLog">
            <summary>
            A class that holds the information of the tracing operations.
            </summary>
        </member>
        <member name="M:RepoDb.TraceLog.#ctor(System.Guid,System.String,System.Object,System.Object,System.Nullable{System.TimeSpan})">
            <summary>
            Creates an instance of <see cref="T:RepoDb.TraceLog"/> class.
            </summary>
            <param name="sessionId">The session identifier for the current trace object.</param>
            <param name="statement">The command text in used.</param>
            <param name="parameter">The parameters passed.</param>
            <param name="result">The actual result if present.</param>
            <param name="executionTime">The elapsed time of the execution.</param>
        </member>
        <member name="P:RepoDb.TraceLog.SessionId">
            <summary>
            Gets the session identifier of the current trace.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Result">
            <summary>
            Gets the actual result of the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Parameter">
            <summary>
            Gets or sets the parameter object used on the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Statement">
            <summary>
            Gets or sets the SQL Statement used on the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.ExecutionTime">
            <summary>
            Gets the actual length of the operation execution.
            </summary>
        </member>
        <member name="T:RepoDb.Types.SqlVariant">
            <summary>
            A type holder for sql_variant <see cref="T:System.Data.DbType"/> value.
            </summary>
        </member>
    </members>
</doc>
